
nucleo-f070rb-sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b0c  08007b0c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007b0c  08007b0c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b0c  08007b0c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002430  20000024  08007b38  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002454  08007b38  00022454  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da98  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002131  00000000  00000000  0002dae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00030778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011662  00000000  00000000  000311f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104a3  00000000  00000000  00042852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000635d8  00000000  00000000  00052cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b62cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  000b6320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007458 	.word	0x08007458

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08007458 	.word	0x08007458

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <SELECT+0x1c>)
 8000236:	2200      	movs	r2, #0
 8000238:	2110      	movs	r1, #16
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fb8a 	bl	8001954 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000240:	2001      	movs	r0, #1
 8000242:	f001 f93f 	bl	80014c4 <HAL_Delay>
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	48000800 	.word	0x48000800

08000250 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <DESELECT+0x1c>)
 8000256:	2201      	movs	r2, #1
 8000258:	2110      	movs	r1, #16
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fb7a 	bl	8001954 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000260:	2001      	movs	r0, #1
 8000262:	f001 f92f 	bl	80014c4 <HAL_Delay>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	48000800 	.word	0x48000800

08000270 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	0002      	movs	r2, r0
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <SPI_TxByte+0x30>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	2202      	movs	r2, #2
 8000286:	4013      	ands	r3, r2
 8000288:	2b02      	cmp	r3, #2
 800028a:	d1f8      	bne.n	800027e <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800028c:	1df9      	adds	r1, r7, #7
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <SPI_TxByte+0x30>)
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	f002 f8a6 	bl	80023e4 <HAL_SPI_Transmit>
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000044 	.word	0x20000044

080002a4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	000a      	movs	r2, r1
 80002ae:	1cbb      	adds	r3, r7, #2
 80002b0:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <SPI_TxBuffer+0x34>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	2202      	movs	r2, #2
 80002bc:	4013      	ands	r3, r2
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d1f8      	bne.n	80002b4 <SPI_TxBuffer+0x10>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80002c2:	1cbb      	adds	r3, r7, #2
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <SPI_TxBuffer+0x34>)
 80002ca:	2364      	movs	r3, #100	; 0x64
 80002cc:	f002 f88a 	bl	80023e4 <HAL_SPI_Transmit>
}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000044 	.word	0x20000044

080002dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	22ff      	movs	r2, #255	; 0xff
 80002e6:	701a      	strb	r2, [r3, #0]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <SPI_RxByte+0x38>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	2202      	movs	r2, #2
 80002f2:	4013      	ands	r3, r2
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d1f8      	bne.n	80002ea <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80002f8:	1dba      	adds	r2, r7, #6
 80002fa:	1df9      	adds	r1, r7, #7
 80002fc:	4805      	ldr	r0, [pc, #20]	; (8000314 <SPI_RxByte+0x38>)
 80002fe:	2364      	movs	r3, #100	; 0x64
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2301      	movs	r3, #1
 8000304:	f002 f9c6 	bl	8002694 <HAL_SPI_TransmitReceive>

	return data;
 8000308:	1dbb      	adds	r3, r7, #6
 800030a:	781b      	ldrb	r3, [r3, #0]
}
 800030c:	0018      	movs	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000044 	.word	0x20000044

08000318 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000320:	f7ff ffdc 	bl	80002dc <SPI_RxByte>
 8000324:	0003      	movs	r3, r0
 8000326:	001a      	movs	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	701a      	strb	r2, [r3, #0]
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b002      	add	sp, #8
 8000332:	bd80      	pop	{r7, pc}

08000334 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <SD_ReadyWait+0x38>)
 800033c:	22fa      	movs	r2, #250	; 0xfa
 800033e:	0052      	lsls	r2, r2, #1
 8000340:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000342:	1dfc      	adds	r4, r7, #7
 8000344:	f7ff ffca 	bl	80002dc <SPI_RxByte>
 8000348:	0003      	movs	r3, r0
 800034a:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && Timer2);
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2bff      	cmp	r3, #255	; 0xff
 8000352:	d004      	beq.n	800035e <SD_ReadyWait+0x2a>
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SD_ReadyWait+0x38>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	b29b      	uxth	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f1      	bne.n	8000342 <SD_ReadyWait+0xe>

	return res;
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781b      	ldrb	r3, [r3, #0]
}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b003      	add	sp, #12
 8000368:	bd90      	pop	{r4, r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	20002218 	.word	0x20002218

08000370 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000376:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <SD_PowerOn+0x88>)
 8000378:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800037a:	f7ff ff69 	bl	8000250 <DESELECT>
	for(int i = 0; i < 10; i++)
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	e005      	b.n	8000390 <SD_PowerOn+0x20>
	{
		SPI_TxByte(0xFF);
 8000384:	20ff      	movs	r0, #255	; 0xff
 8000386:	f7ff ff73 	bl	8000270 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	3301      	adds	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	2b09      	cmp	r3, #9
 8000394:	ddf6      	ble.n	8000384 <SD_PowerOn+0x14>
	}

	/* slave select */
	SELECT();
 8000396:	f7ff ff4b 	bl	8000230 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800039a:	003b      	movs	r3, r7
 800039c:	2240      	movs	r2, #64	; 0x40
 800039e:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 80003a6:	003b      	movs	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 80003ac:	003b      	movs	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 80003b2:	003b      	movs	r3, r7
 80003b4:	2200      	movs	r2, #0
 80003b6:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 80003b8:	003b      	movs	r3, r7
 80003ba:	2295      	movs	r2, #149	; 0x95
 80003bc:	715a      	strb	r2, [r3, #5]

	SPI_TxBuffer(args, sizeof(args));
 80003be:	003b      	movs	r3, r7
 80003c0:	2106      	movs	r1, #6
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ff6e 	bl	80002a4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80003c8:	e002      	b.n	80003d0 <SD_PowerOn+0x60>
	{
		cnt--;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80003d0:	f7ff ff84 	bl	80002dc <SPI_RxByte>
 80003d4:	0003      	movs	r3, r0
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d002      	beq.n	80003e0 <SD_PowerOn+0x70>
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1f4      	bne.n	80003ca <SD_PowerOn+0x5a>
	}

	DESELECT();
 80003e0:	f7ff ff36 	bl	8000250 <DESELECT>
	SPI_TxByte(0XFF);
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	f7ff ff43 	bl	8000270 <SPI_TxByte>

	PowerFlag = 1;
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <SD_PowerOn+0x8c>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	701a      	strb	r2, [r3, #0]
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b004      	add	sp, #16
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	00001fff 	.word	0x00001fff
 80003fc:	20000041 	.word	0x20000041

08000400 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000404:	4b02      	ldr	r3, [pc, #8]	; (8000410 <SD_PowerOff+0x10>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000041 	.word	0x20000041

08000414 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000418:	4b02      	ldr	r3, [pc, #8]	; (8000424 <SD_CheckPower+0x10>)
 800041a:	781b      	ldrb	r3, [r3, #0]
}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	20000041 	.word	0x20000041

08000428 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000428:	b5b0      	push	{r4, r5, r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <SD_RxDataBlock+0x64>)
 8000434:	22c8      	movs	r2, #200	; 0xc8
 8000436:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000438:	250f      	movs	r5, #15
 800043a:	197c      	adds	r4, r7, r5
 800043c:	f7ff ff4e 	bl	80002dc <SPI_RxByte>
 8000440:	0003      	movs	r3, r0
 8000442:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && Timer1);
 8000444:	197b      	adds	r3, r7, r5
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2bff      	cmp	r3, #255	; 0xff
 800044a:	d104      	bne.n	8000456 <SD_RxDataBlock+0x2e>
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <SD_RxDataBlock+0x64>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	b29b      	uxth	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1f0      	bne.n	8000438 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000456:	230f      	movs	r3, #15
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2bfe      	cmp	r3, #254	; 0xfe
 800045e:	d001      	beq.n	8000464 <SD_RxDataBlock+0x3c>
 8000460:	2300      	movs	r3, #0
 8000462:	e00f      	b.n	8000484 <SD_RxDataBlock+0x5c>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	1c5a      	adds	r2, r3, #1
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ff54 	bl	8000318 <SPI_RxBytePtr>
	} while(len--);
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	603a      	str	r2, [r7, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1f4      	bne.n	8000464 <SD_RxDataBlock+0x3c>

	/* discard CRC */
	SPI_RxByte();
 800047a:	f7ff ff2f 	bl	80002dc <SPI_RxByte>
	SPI_RxByte();
 800047e:	f7ff ff2d 	bl	80002dc <SPI_RxByte>

	return TRUE;
 8000482:	2301      	movs	r3, #1
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	b004      	add	sp, #16
 800048a:	bdb0      	pop	{r4, r5, r7, pc}
 800048c:	20002216 	.word	0x20002216

08000490 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000490:	b5b0      	push	{r4, r5, r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	000a      	movs	r2, r1
 800049a:	1cfb      	adds	r3, r7, #3
 800049c:	701a      	strb	r2, [r3, #0]
	uint8_t resp;
	uint8_t i = 0;
 800049e:	230e      	movs	r3, #14
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80004a6:	f7ff ff45 	bl	8000334 <SD_ReadyWait>
 80004aa:	0003      	movs	r3, r0
 80004ac:	2bff      	cmp	r3, #255	; 0xff
 80004ae:	d001      	beq.n	80004b4 <SD_TxDataBlock+0x24>
 80004b0:	2300      	movs	r3, #0
 80004b2:	e03c      	b.n	800052e <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 80004b4:	1cfb      	adds	r3, r7, #3
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff fed9 	bl	8000270 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80004be:	1cfb      	adds	r3, r7, #3
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2bfd      	cmp	r3, #253	; 0xfd
 80004c4:	d029      	beq.n	800051a <SD_TxDataBlock+0x8a>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	009a      	lsls	r2, r3, #2
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f7ff fee8 	bl	80002a4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80004d4:	f7ff ff02 	bl	80002dc <SPI_RxByte>
		SPI_RxByte();
 80004d8:	f7ff ff00 	bl	80002dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80004dc:	e011      	b.n	8000502 <SD_TxDataBlock+0x72>
		{
			resp = SPI_RxByte();
 80004de:	250f      	movs	r5, #15
 80004e0:	197c      	adds	r4, r7, r5
 80004e2:	f7ff fefb 	bl	80002dc <SPI_RxByte>
 80004e6:	0003      	movs	r3, r0
 80004e8:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80004ea:	197b      	adds	r3, r7, r5
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	221f      	movs	r2, #31
 80004f0:	4013      	ands	r3, r2
 80004f2:	2b05      	cmp	r3, #5
 80004f4:	d00b      	beq.n	800050e <SD_TxDataBlock+0x7e>
			i++;
 80004f6:	210e      	movs	r1, #14
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	3201      	adds	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 8000502:	230e      	movs	r3, #14
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b40      	cmp	r3, #64	; 0x40
 800050a:	d9e8      	bls.n	80004de <SD_TxDataBlock+0x4e>
 800050c:	e000      	b.n	8000510 <SD_TxDataBlock+0x80>
			if ((resp & 0x1F) == 0x05) break;
 800050e:	46c0      	nop			; (mov r8, r8)
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	f7ff fee3 	bl	80002dc <SPI_RxByte>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d0fb      	beq.n	8000512 <SD_TxDataBlock+0x82>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	221f      	movs	r2, #31
 8000522:	4013      	ands	r3, r2
 8000524:	2b05      	cmp	r3, #5
 8000526:	d101      	bne.n	800052c <SD_TxDataBlock+0x9c>
 8000528:	2301      	movs	r3, #1
 800052a:	e000      	b.n	800052e <SD_TxDataBlock+0x9e>

	return FALSE;
 800052c:	2300      	movs	r3, #0
}
 800052e:	0018      	movs	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	b004      	add	sp, #16
 8000534:	bdb0      	pop	{r4, r5, r7, pc}

08000536 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000536:	b5b0      	push	{r4, r5, r7, lr}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	0002      	movs	r2, r0
 800053e:	6039      	str	r1, [r7, #0]
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000544:	f7ff fef6 	bl	8000334 <SD_ReadyWait>
 8000548:	0003      	movs	r3, r0
 800054a:	2bff      	cmp	r3, #255	; 0xff
 800054c:	d001      	beq.n	8000552 <SD_SendCmd+0x1c>
 800054e:	23ff      	movs	r3, #255	; 0xff
 8000550:	e059      	b.n	8000606 <SD_SendCmd+0xd0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff fe8a 	bl	8000270 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	0e1b      	lsrs	r3, r3, #24
 8000560:	b2db      	uxtb	r3, r3
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff fe84 	bl	8000270 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	b2db      	uxtb	r3, r3
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe7e 	bl	8000270 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	b2db      	uxtb	r3, r3
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff fe78 	bl	8000270 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	0018      	movs	r0, r3
 8000586:	f7ff fe73 	bl	8000270 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b40      	cmp	r3, #64	; 0x40
 8000590:	d104      	bne.n	800059c <SD_SendCmd+0x66>
 8000592:	230f      	movs	r3, #15
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	2295      	movs	r2, #149	; 0x95
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e00c      	b.n	80005b6 <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b48      	cmp	r3, #72	; 0x48
 80005a2:	d104      	bne.n	80005ae <SD_SendCmd+0x78>
 80005a4:	230f      	movs	r3, #15
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	2287      	movs	r2, #135	; 0x87
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	e003      	b.n	80005b6 <SD_SendCmd+0x80>
	else crc = 1;
 80005ae:	230f      	movs	r3, #15
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SPI_TxByte(crc);
 80005b6:	230f      	movs	r3, #15
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	0018      	movs	r0, r3
 80005be:	f7ff fe57 	bl	8000270 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b4c      	cmp	r3, #76	; 0x4c
 80005c8:	d101      	bne.n	80005ce <SD_SendCmd+0x98>
 80005ca:	f7ff fe87 	bl	80002dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80005ce:	230e      	movs	r3, #14
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	220a      	movs	r2, #10
 80005d4:	701a      	strb	r2, [r3, #0]
	do {
		res = SPI_RxByte();
 80005d6:	250d      	movs	r5, #13
 80005d8:	197c      	adds	r4, r7, r5
 80005da:	f7ff fe7f 	bl	80002dc <SPI_RxByte>
 80005de:	0003      	movs	r3, r0
 80005e0:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 80005e2:	197b      	adds	r3, r7, r5
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da09      	bge.n	8000600 <SD_SendCmd+0xca>
 80005ec:	210e      	movs	r1, #14
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	187a      	adds	r2, r7, r1
 80005f2:	7812      	ldrb	r2, [r2, #0]
 80005f4:	3a01      	subs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1ea      	bne.n	80005d6 <SD_SendCmd+0xa0>

	return res;
 8000600:	230d      	movs	r3, #13
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000610 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	0002      	movs	r2, r0
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SD_disk_initialize+0x18>
 8000624:	2301      	movs	r3, #1
 8000626:	e0f6      	b.n	8000816 <SD_disk_initialize+0x206>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000628:	4b7d      	ldr	r3, [pc, #500]	; (8000820 <SD_disk_initialize+0x210>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	001a      	movs	r2, r3
 8000630:	2302      	movs	r3, #2
 8000632:	4013      	ands	r3, r2
 8000634:	d003      	beq.n	800063e <SD_disk_initialize+0x2e>
 8000636:	4b7a      	ldr	r3, [pc, #488]	; (8000820 <SD_disk_initialize+0x210>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	e0eb      	b.n	8000816 <SD_disk_initialize+0x206>

	/* power on */
	SD_PowerOn();
 800063e:	f7ff fe97 	bl	8000370 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000642:	f7ff fdf5 	bl	8000230 <SELECT>

	/* check disk type */
	type = 0;
 8000646:	230e      	movs	r3, #14
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800064e:	2100      	movs	r1, #0
 8000650:	2040      	movs	r0, #64	; 0x40
 8000652:	f7ff ff70 	bl	8000536 <SD_SendCmd>
 8000656:	0003      	movs	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d000      	beq.n	800065e <SD_disk_initialize+0x4e>
 800065c:	e0c0      	b.n	80007e0 <SD_disk_initialize+0x1d0>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800065e:	4b71      	ldr	r3, [pc, #452]	; (8000824 <SD_disk_initialize+0x214>)
 8000660:	22fa      	movs	r2, #250	; 0xfa
 8000662:	0092      	lsls	r2, r2, #2
 8000664:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000666:	23d5      	movs	r3, #213	; 0xd5
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	0019      	movs	r1, r3
 800066c:	2048      	movs	r0, #72	; 0x48
 800066e:	f7ff ff62 	bl	8000536 <SD_SendCmd>
 8000672:	0003      	movs	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d000      	beq.n	800067a <SD_disk_initialize+0x6a>
 8000678:	e06d      	b.n	8000756 <SD_disk_initialize+0x146>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800067a:	230f      	movs	r3, #15
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e00e      	b.n	80006a2 <SD_disk_initialize+0x92>
			{
				ocr[n] = SPI_RxByte();
 8000684:	250f      	movs	r5, #15
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781c      	ldrb	r4, [r3, #0]
 800068a:	f7ff fe27 	bl	80002dc <SPI_RxByte>
 800068e:	0003      	movs	r3, r0
 8000690:	001a      	movs	r2, r3
 8000692:	2308      	movs	r3, #8
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 8000698:	197b      	adds	r3, r7, r5
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	197b      	adds	r3, r7, r5
 800069e:	3201      	adds	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	230f      	movs	r3, #15
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d9eb      	bls.n	8000684 <SD_disk_initialize+0x74>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80006ac:	2208      	movs	r2, #8
 80006ae:	18bb      	adds	r3, r7, r2
 80006b0:	789b      	ldrb	r3, [r3, #2]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d000      	beq.n	80006b8 <SD_disk_initialize+0xa8>
 80006b6:	e093      	b.n	80007e0 <SD_disk_initialize+0x1d0>
 80006b8:	18bb      	adds	r3, r7, r2
 80006ba:	78db      	ldrb	r3, [r3, #3]
 80006bc:	2baa      	cmp	r3, #170	; 0xaa
 80006be:	d000      	beq.n	80006c2 <SD_disk_initialize+0xb2>
 80006c0:	e08e      	b.n	80007e0 <SD_disk_initialize+0x1d0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80006c2:	2100      	movs	r1, #0
 80006c4:	2077      	movs	r0, #119	; 0x77
 80006c6:	f7ff ff36 	bl	8000536 <SD_SendCmd>
 80006ca:	0003      	movs	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d807      	bhi.n	80006e0 <SD_disk_initialize+0xd0>
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0019      	movs	r1, r3
 80006d6:	2069      	movs	r0, #105	; 0x69
 80006d8:	f7ff ff2d 	bl	8000536 <SD_SendCmd>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d005      	beq.n	80006ec <SD_disk_initialize+0xdc>
				} while (Timer1);
 80006e0:	4b50      	ldr	r3, [pc, #320]	; (8000824 <SD_disk_initialize+0x214>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1eb      	bne.n	80006c2 <SD_disk_initialize+0xb2>
 80006ea:	e000      	b.n	80006ee <SD_disk_initialize+0xde>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80006ec:	46c0      	nop			; (mov r8, r8)

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <SD_disk_initialize+0x214>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d100      	bne.n	80006fa <SD_disk_initialize+0xea>
 80006f8:	e072      	b.n	80007e0 <SD_disk_initialize+0x1d0>
 80006fa:	2100      	movs	r1, #0
 80006fc:	207a      	movs	r0, #122	; 0x7a
 80006fe:	f7ff ff1a 	bl	8000536 <SD_SendCmd>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d000      	beq.n	8000708 <SD_disk_initialize+0xf8>
 8000706:	e06b      	b.n	80007e0 <SD_disk_initialize+0x1d0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000708:	230f      	movs	r3, #15
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e00e      	b.n	8000730 <SD_disk_initialize+0x120>
					{
						ocr[n] = SPI_RxByte();
 8000712:	250f      	movs	r5, #15
 8000714:	197b      	adds	r3, r7, r5
 8000716:	781c      	ldrb	r4, [r3, #0]
 8000718:	f7ff fde0 	bl	80002dc <SPI_RxByte>
 800071c:	0003      	movs	r3, r0
 800071e:	001a      	movs	r2, r3
 8000720:	2308      	movs	r3, #8
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 8000726:	197b      	adds	r3, r7, r5
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	197b      	adds	r3, r7, r5
 800072c:	3201      	adds	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	230f      	movs	r3, #15
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d9eb      	bls.n	8000712 <SD_disk_initialize+0x102>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800073a:	2308      	movs	r3, #8
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	001a      	movs	r2, r3
 8000742:	2340      	movs	r3, #64	; 0x40
 8000744:	4013      	ands	r3, r2
 8000746:	d001      	beq.n	800074c <SD_disk_initialize+0x13c>
 8000748:	220c      	movs	r2, #12
 800074a:	e000      	b.n	800074e <SD_disk_initialize+0x13e>
 800074c:	2204      	movs	r2, #4
 800074e:	230e      	movs	r3, #14
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	e044      	b.n	80007e0 <SD_disk_initialize+0x1d0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000756:	2100      	movs	r1, #0
 8000758:	2077      	movs	r0, #119	; 0x77
 800075a:	f7ff feec 	bl	8000536 <SD_SendCmd>
 800075e:	0003      	movs	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	d808      	bhi.n	8000776 <SD_disk_initialize+0x166>
 8000764:	2100      	movs	r1, #0
 8000766:	2069      	movs	r0, #105	; 0x69
 8000768:	f7ff fee5 	bl	8000536 <SD_SendCmd>
 800076c:	0003      	movs	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d801      	bhi.n	8000776 <SD_disk_initialize+0x166>
 8000772:	2202      	movs	r2, #2
 8000774:	e000      	b.n	8000778 <SD_disk_initialize+0x168>
 8000776:	2201      	movs	r2, #1
 8000778:	230e      	movs	r3, #14
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 800077e:	230e      	movs	r3, #14
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d10d      	bne.n	80007a4 <SD_disk_initialize+0x194>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000788:	2100      	movs	r1, #0
 800078a:	2077      	movs	r0, #119	; 0x77
 800078c:	f7ff fed3 	bl	8000536 <SD_SendCmd>
 8000790:	0003      	movs	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d80c      	bhi.n	80007b0 <SD_disk_initialize+0x1a0>
 8000796:	2100      	movs	r1, #0
 8000798:	2069      	movs	r0, #105	; 0x69
 800079a:	f7ff fecc 	bl	8000536 <SD_SendCmd>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d106      	bne.n	80007b0 <SD_disk_initialize+0x1a0>
 80007a2:	e00c      	b.n	80007be <SD_disk_initialize+0x1ae>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80007a4:	2100      	movs	r1, #0
 80007a6:	2041      	movs	r0, #65	; 0x41
 80007a8:	f7ff fec5 	bl	8000536 <SD_SendCmd>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d005      	beq.n	80007bc <SD_disk_initialize+0x1ac>
				}

			} while (Timer1);
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <SD_disk_initialize+0x214>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1e1      	bne.n	800077e <SD_disk_initialize+0x16e>
 80007ba:	e000      	b.n	80007be <SD_disk_initialize+0x1ae>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80007bc:	46c0      	nop			; (mov r8, r8)

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <SD_disk_initialize+0x214>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d007      	beq.n	80007d8 <SD_disk_initialize+0x1c8>
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	0019      	movs	r1, r3
 80007ce:	2050      	movs	r0, #80	; 0x50
 80007d0:	f7ff feb1 	bl	8000536 <SD_SendCmd>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d003      	beq.n	80007e0 <SD_disk_initialize+0x1d0>
 80007d8:	230e      	movs	r3, #14
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <SD_disk_initialize+0x218>)
 80007e2:	240e      	movs	r4, #14
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 80007ea:	f7ff fd31 	bl	8000250 <DESELECT>
	SPI_RxByte();
 80007ee:	f7ff fd75 	bl	80002dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d008      	beq.n	800080c <SD_disk_initialize+0x1fc>
	{
		Stat &= ~STA_NOINIT;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <SD_disk_initialize+0x210>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2201      	movs	r2, #1
 8000802:	4393      	bics	r3, r2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <SD_disk_initialize+0x210>)
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e001      	b.n	8000810 <SD_disk_initialize+0x200>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800080c:	f7ff fdf8 	bl	8000400 <SD_PowerOff>
	}

	return Stat;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <SD_disk_initialize+0x210>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
}
 8000816:	0018      	movs	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	b004      	add	sp, #16
 800081c:	bdb0      	pop	{r4, r5, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000000 	.word	0x20000000
 8000824:	20002216 	.word	0x20002216
 8000828:	20000040 	.word	0x20000040

0800082c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SD_disk_status+0x18>
 8000840:	2301      	movs	r3, #1
 8000842:	e002      	b.n	800084a <SD_disk_status+0x1e>
	return Stat;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <SD_disk_status+0x28>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000000 	.word	0x20000000

08000858 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	210f      	movs	r1, #15
 8000866:	187b      	adds	r3, r7, r1
 8000868:	1c02      	adds	r2, r0, #0
 800086a:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <SD_disk_read+0x22>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <SD_disk_read+0x26>
 800087a:	2304      	movs	r3, #4
 800087c:	e053      	b.n	8000926 <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SD_disk_read+0xd8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	001a      	movs	r2, r3
 8000886:	2301      	movs	r3, #1
 8000888:	4013      	ands	r3, r2
 800088a:	d001      	beq.n	8000890 <SD_disk_read+0x38>
 800088c:	2303      	movs	r3, #3
 800088e:	e04a      	b.n	8000926 <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <SD_disk_read+0xdc>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	2304      	movs	r3, #4
 8000898:	4013      	ands	r3, r2
 800089a:	d102      	bne.n	80008a2 <SD_disk_read+0x4a>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	025b      	lsls	r3, r3, #9
 80008a0:	607b      	str	r3, [r7, #4]

	SELECT();
 80008a2:	f7ff fcc5 	bl	8000230 <SELECT>

	if (count == 1)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d112      	bne.n	80008d2 <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	0019      	movs	r1, r3
 80008b0:	2051      	movs	r0, #81	; 0x51
 80008b2:	f7ff fe40 	bl	8000536 <SD_SendCmd>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d12d      	bne.n	8000916 <SD_disk_read+0xbe>
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	009a      	lsls	r2, r3, #2
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff fdb0 	bl	8000428 <SD_RxDataBlock>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d024      	beq.n	8000916 <SD_disk_read+0xbe>
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	e021      	b.n	8000916 <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0019      	movs	r1, r3
 80008d6:	2052      	movs	r0, #82	; 0x52
 80008d8:	f7ff fe2d 	bl	8000536 <SD_SendCmd>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d11a      	bne.n	8000916 <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	009a      	lsls	r2, r3, #2
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff fd9d 	bl	8000428 <SD_RxDataBlock>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d00c      	beq.n	800090c <SD_disk_read+0xb4>
				buff += 512;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	0092      	lsls	r2, r2, #2
 80008f8:	4694      	mov	ip, r2
 80008fa:	4463      	add	r3, ip
 80008fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ea      	bne.n	80008e0 <SD_disk_read+0x88>
 800090a:	e000      	b.n	800090e <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 800090c:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800090e:	2100      	movs	r1, #0
 8000910:	204c      	movs	r0, #76	; 0x4c
 8000912:	f7ff fe10 	bl	8000536 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000916:	f7ff fc9b 	bl	8000250 <DESELECT>
	SPI_RxByte();
 800091a:	f7ff fcdf 	bl	80002dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	1e5a      	subs	r2, r3, #1
 8000922:	4193      	sbcs	r3, r2
 8000924:	b2db      	uxtb	r3, r3
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b004      	add	sp, #16
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	20000000 	.word	0x20000000
 8000934:	20000040 	.word	0x20000040

08000938 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	210f      	movs	r1, #15
 8000946:	187b      	adds	r3, r7, r1
 8000948:	1c02      	adds	r2, r0, #0
 800094a:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <SD_disk_write+0x22>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <SD_disk_write+0x26>
 800095a:	2304      	movs	r3, #4
 800095c:	e06b      	b.n	8000a36 <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800095e:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <SD_disk_write+0x108>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	001a      	movs	r2, r3
 8000966:	2301      	movs	r3, #1
 8000968:	4013      	ands	r3, r2
 800096a:	d001      	beq.n	8000970 <SD_disk_write+0x38>
 800096c:	2303      	movs	r3, #3
 800096e:	e062      	b.n	8000a36 <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000970:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <SD_disk_write+0x108>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	001a      	movs	r2, r3
 8000978:	2304      	movs	r3, #4
 800097a:	4013      	ands	r3, r2
 800097c:	d001      	beq.n	8000982 <SD_disk_write+0x4a>
 800097e:	2302      	movs	r3, #2
 8000980:	e059      	b.n	8000a36 <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <SD_disk_write+0x10c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	001a      	movs	r2, r3
 8000988:	2304      	movs	r3, #4
 800098a:	4013      	ands	r3, r2
 800098c:	d102      	bne.n	8000994 <SD_disk_write+0x5c>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	607b      	str	r3, [r7, #4]

	SELECT();
 8000994:	f7ff fc4c 	bl	8000230 <SELECT>

	if (count == 1)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d110      	bne.n	80009c0 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	0019      	movs	r1, r3
 80009a2:	2058      	movs	r0, #88	; 0x58
 80009a4:	f7ff fdc7 	bl	8000536 <SD_SendCmd>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d13c      	bne.n	8000a26 <SD_disk_write+0xee>
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	21fe      	movs	r1, #254	; 0xfe
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fd6d 	bl	8000490 <SD_TxDataBlock>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d035      	beq.n	8000a26 <SD_disk_write+0xee>
			count = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	e032      	b.n	8000a26 <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <SD_disk_write+0x10c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	001a      	movs	r2, r3
 80009c6:	2302      	movs	r3, #2
 80009c8:	4013      	ands	r3, r2
 80009ca:	d008      	beq.n	80009de <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	2077      	movs	r0, #119	; 0x77
 80009d0:	f7ff fdb1 	bl	8000536 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	0019      	movs	r1, r3
 80009d8:	2057      	movs	r0, #87	; 0x57
 80009da:	f7ff fdac 	bl	8000536 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0019      	movs	r1, r3
 80009e2:	2059      	movs	r0, #89	; 0x59
 80009e4:	f7ff fda7 	bl	8000536 <SD_SendCmd>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d11c      	bne.n	8000a26 <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	21fc      	movs	r1, #252	; 0xfc
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff fd4d 	bl	8000490 <SD_TxDataBlock>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d00c      	beq.n	8000a14 <SD_disk_write+0xdc>
				buff += 512;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	4694      	mov	ip, r2
 8000a02:	4463      	add	r3, ip
 8000a04:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1ec      	bne.n	80009ec <SD_disk_write+0xb4>
 8000a12:	e000      	b.n	8000a16 <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000a14:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000a16:	21fd      	movs	r1, #253	; 0xfd
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fd39 	bl	8000490 <SD_TxDataBlock>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d101      	bne.n	8000a26 <SD_disk_write+0xee>
			{
				count = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000a26:	f7ff fc13 	bl	8000250 <DESELECT>
	SPI_RxByte();
 8000a2a:	f7ff fc57 	bl	80002dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	4193      	sbcs	r3, r2
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000040 	.word	0x20000040

08000a48 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08b      	sub	sp, #44	; 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	603a      	str	r2, [r7, #0]
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	1dbb      	adds	r3, r7, #6
 8000a58:	1c0a      	adds	r2, r1, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SD_disk_ioctl+0x24>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e11b      	b.n	8000ca4 <SD_disk_ioctl+0x25c>
	res = RES_ERROR;
 8000a6c:	2327      	movs	r3, #39	; 0x27
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	d127      	bne.n	8000acc <SD_disk_ioctl+0x84>
	{
		switch (*ptr)
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d013      	beq.n	8000aac <SD_disk_ioctl+0x64>
 8000a84:	dc1d      	bgt.n	8000ac2 <SD_disk_ioctl+0x7a>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <SD_disk_ioctl+0x48>
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d007      	beq.n	8000a9e <SD_disk_ioctl+0x56>
 8000a8e:	e018      	b.n	8000ac2 <SD_disk_ioctl+0x7a>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000a90:	f7ff fcb6 	bl	8000400 <SD_PowerOff>
			res = RES_OK;
 8000a94:	2327      	movs	r3, #39	; 0x27
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
			break;
 8000a9c:	e0ff      	b.n	8000c9e <SD_disk_ioctl+0x256>
		case 1:
			SD_PowerOn();		/* Power On */
 8000a9e:	f7ff fc67 	bl	8000370 <SD_PowerOn>
			res = RES_OK;
 8000aa2:	2327      	movs	r3, #39	; 0x27
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
			break;
 8000aaa:	e0f8      	b.n	8000c9e <SD_disk_ioctl+0x256>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	1c5c      	adds	r4, r3, #1
 8000ab0:	f7ff fcb0 	bl	8000414 <SD_CheckPower>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ab8:	2327      	movs	r3, #39	; 0x27
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
			break;
 8000ac0:	e0ed      	b.n	8000c9e <SD_disk_ioctl+0x256>
		default:
			res = RES_PARERR;
 8000ac2:	2327      	movs	r3, #39	; 0x27
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e0e8      	b.n	8000c9e <SD_disk_ioctl+0x256>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000acc:	4b77      	ldr	r3, [pc, #476]	; (8000cac <SD_disk_ioctl+0x264>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d001      	beq.n	8000ade <SD_disk_ioctl+0x96>
 8000ada:	2303      	movs	r3, #3
 8000adc:	e0e2      	b.n	8000ca4 <SD_disk_ioctl+0x25c>

		SELECT();
 8000ade:	f7ff fba7 	bl	8000230 <SELECT>

		switch (ctrl)
 8000ae2:	1dbb      	adds	r3, r7, #6
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b0d      	cmp	r3, #13
 8000ae8:	d900      	bls.n	8000aec <SD_disk_ioctl+0xa4>
 8000aea:	e0c8      	b.n	8000c7e <SD_disk_ioctl+0x236>
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	4b70      	ldr	r3, [pc, #448]	; (8000cb0 <SD_disk_ioctl+0x268>)
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000af6:	2100      	movs	r1, #0
 8000af8:	2049      	movs	r0, #73	; 0x49
 8000afa:	f7ff fd1c 	bl	8000536 <SD_SendCmd>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d000      	beq.n	8000b04 <SD_disk_ioctl+0xbc>
 8000b02:	e0c1      	b.n	8000c88 <SD_disk_ioctl+0x240>
 8000b04:	240c      	movs	r4, #12
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2110      	movs	r1, #16
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fc8c 	bl	8000428 <SD_RxDataBlock>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d100      	bne.n	8000b16 <SD_disk_ioctl+0xce>
 8000b14:	e0b8      	b.n	8000c88 <SD_disk_ioctl+0x240>
			{
				if ((csd[0] >> 6) == 1)
 8000b16:	0022      	movs	r2, r4
 8000b18:	18bb      	adds	r3, r7, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	099b      	lsrs	r3, r3, #6
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d114      	bne.n	8000b4e <SD_disk_ioctl+0x106>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000b24:	0011      	movs	r1, r2
 8000b26:	18bb      	adds	r3, r7, r2
 8000b28:	7a5b      	ldrb	r3, [r3, #9]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	7a1b      	ldrb	r3, [r3, #8]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	18d3      	adds	r3, r2, r3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	211e      	movs	r1, #30
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	3201      	adds	r2, #1
 8000b40:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	029a      	lsls	r2, r3, #10
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e03a      	b.n	8000bc4 <SD_disk_ioctl+0x17c>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000b4e:	200c      	movs	r0, #12
 8000b50:	183b      	adds	r3, r7, r0
 8000b52:	795b      	ldrb	r3, [r3, #5]
 8000b54:	220f      	movs	r2, #15
 8000b56:	4013      	ands	r3, r2
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	183b      	adds	r3, r7, r0
 8000b5c:	7a9b      	ldrb	r3, [r3, #10]
 8000b5e:	09db      	lsrs	r3, r3, #7
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	18d3      	adds	r3, r2, r3
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	183b      	adds	r3, r7, r0
 8000b68:	7a5b      	ldrb	r3, [r3, #9]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2106      	movs	r1, #6
 8000b70:	400b      	ands	r3, r1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	18d3      	adds	r3, r2, r3
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	2426      	movs	r4, #38	; 0x26
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	3202      	adds	r2, #2
 8000b7e:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000b80:	183b      	adds	r3, r7, r0
 8000b82:	7a1b      	ldrb	r3, [r3, #8]
 8000b84:	099b      	lsrs	r3, r3, #6
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	183b      	adds	r3, r7, r0
 8000b8c:	79db      	ldrb	r3, [r3, #7]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	183b      	adds	r3, r7, r0
 8000b9a:	799b      	ldrb	r3, [r3, #6]
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	b299      	uxth	r1, r3
 8000ba0:	23c0      	movs	r3, #192	; 0xc0
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	211e      	movs	r1, #30
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	3201      	adds	r2, #1
 8000bb2:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	881a      	ldrh	r2, [r3, #0]
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3b09      	subs	r3, #9
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000bc4:	2327      	movs	r3, #39	; 0x27
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bcc:	e05c      	b.n	8000c88 <SD_disk_ioctl+0x240>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000bd6:	2327      	movs	r3, #39	; 0x27
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			break;
 8000bde:	e05a      	b.n	8000c96 <SD_disk_ioctl+0x24e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000be0:	f7ff fba8 	bl	8000334 <SD_ReadyWait>
 8000be4:	0003      	movs	r3, r0
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d150      	bne.n	8000c8c <SD_disk_ioctl+0x244>
 8000bea:	2327      	movs	r3, #39	; 0x27
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
			break;
 8000bf2:	e04b      	b.n	8000c8c <SD_disk_ioctl+0x244>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2049      	movs	r0, #73	; 0x49
 8000bf8:	f7ff fc9d 	bl	8000536 <SD_SendCmd>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d147      	bne.n	8000c90 <SD_disk_ioctl+0x248>
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	2110      	movs	r1, #16
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fc0f 	bl	8000428 <SD_RxDataBlock>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d040      	beq.n	8000c90 <SD_disk_ioctl+0x248>
 8000c0e:	2327      	movs	r3, #39	; 0x27
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
			break;
 8000c16:	e03b      	b.n	8000c90 <SD_disk_ioctl+0x248>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c18:	2100      	movs	r1, #0
 8000c1a:	204a      	movs	r0, #74	; 0x4a
 8000c1c:	f7ff fc8b 	bl	8000536 <SD_SendCmd>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d137      	bne.n	8000c94 <SD_disk_ioctl+0x24c>
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	2110      	movs	r1, #16
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fbfd 	bl	8000428 <SD_RxDataBlock>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d030      	beq.n	8000c94 <SD_disk_ioctl+0x24c>
 8000c32:	2327      	movs	r3, #39	; 0x27
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
			break;
 8000c3a:	e02b      	b.n	8000c94 <SD_disk_ioctl+0x24c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	207a      	movs	r0, #122	; 0x7a
 8000c40:	f7ff fc79 	bl	8000536 <SD_SendCmd>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d11a      	bne.n	8000c7e <SD_disk_ioctl+0x236>
			{
				for (n = 0; n < 4; n++)
 8000c48:	2326      	movs	r3, #38	; 0x26
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e00c      	b.n	8000c6c <SD_disk_ioctl+0x224>
				{
					*ptr++ = SPI_RxByte();
 8000c52:	6a3c      	ldr	r4, [r7, #32]
 8000c54:	1c63      	adds	r3, r4, #1
 8000c56:	623b      	str	r3, [r7, #32]
 8000c58:	f7ff fb40 	bl	80002dc <SPI_RxByte>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000c60:	2126      	movs	r1, #38	; 0x26
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	3201      	adds	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	2326      	movs	r3, #38	; 0x26
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d9ed      	bls.n	8000c52 <SD_disk_ioctl+0x20a>
				}
				res = RES_OK;
 8000c76:	2327      	movs	r3, #39	; 0x27
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
			}
		default:
			res = RES_PARERR;
 8000c7e:	2327      	movs	r3, #39	; 0x27
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	2204      	movs	r2, #4
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e006      	b.n	8000c96 <SD_disk_ioctl+0x24e>
			break;
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	e004      	b.n	8000c96 <SD_disk_ioctl+0x24e>
			break;
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	e002      	b.n	8000c96 <SD_disk_ioctl+0x24e>
			break;
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	e000      	b.n	8000c96 <SD_disk_ioctl+0x24e>
			break;
 8000c94:	46c0      	nop			; (mov r8, r8)
		}

		DESELECT();
 8000c96:	f7ff fadb 	bl	8000250 <DESELECT>
		SPI_RxByte();
 8000c9a:	f7ff fb1f 	bl	80002dc <SPI_RxByte>
	}

	return res;
 8000c9e:	2327      	movs	r3, #39	; 0x27
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b00b      	add	sp, #44	; 0x2c
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	0800756c 	.word	0x0800756c

08000cb4 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	int i=0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000cc0:	e002      	b.n	8000cc8 <bufsize+0x14>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f6      	bne.n	8000cc2 <bufsize+0xe>
	return i;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <clear_buffer>:

void clear_buffer (void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e007      	b.n	8000cfc <clear_buffer+0x1c>
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <clear_buffer+0x2c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000d00:	ddf4      	ble.n	8000cec <clear_buffer+0xc>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20002194 	.word	0x20002194

08000d10 <send_uart>:

void send_uart (char *string)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff f9f4 	bl	8000108 <strlen>
 8000d20:	0002      	movs	r2, r0
 8000d22:	210f      	movs	r1, #15
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <send_uart+0x34>)
 8000d36:	f002 f849 	bl	8002dcc <HAL_UART_Transmit>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	200000a8 	.word	0x200000a8

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f000 fb56 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f8a6 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 f95e 	bl	8001014 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d58:	f000 f92c 	bl	8000fb4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d5c:	f000 f8ec 	bl	8000f38 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000d60:	f002 fbf6 	bl	8003550 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (500);
 8000d64:	23fa      	movs	r3, #250	; 0xfa
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fbab 	bl	80014c4 <HAL_Delay>
  fresult = f_mount(&fs, "/", 1);
 8000d6e:	493f      	ldr	r1, [pc, #252]	; (8000e6c <main+0x124>)
 8000d70:	4b3f      	ldr	r3, [pc, #252]	; (8000e70 <main+0x128>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	0018      	movs	r0, r3
 8000d76:	f005 fa69 	bl	800624c <f_mount>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <main+0x12c>)
 8000d80:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n");
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <main+0x12c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <main+0x4c>
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <main+0x130>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff ffbf 	bl	8000d10 <send_uart>
 8000d92:	e003      	b.n	8000d9c <main+0x54>
  else send_uart("SD CARD mounted successfully...\n");
 8000d94:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <main+0x134>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff ffba 	bl	8000d10 <send_uart>

  HAL_Delay(250);
 8000d9c:	20fa      	movs	r0, #250	; 0xfa
 8000d9e:	f000 fb91 	bl	80014c4 <HAL_Delay>

  fresult = f_open(&fil, "file5.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000da2:	4937      	ldr	r1, [pc, #220]	; (8000e80 <main+0x138>)
 8000da4:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <main+0x13c>)
 8000da6:	2213      	movs	r2, #19
 8000da8:	0018      	movs	r0, r3
 8000daa:	f005 fa9f 	bl	80062ec <f_open>
 8000dae:	0003      	movs	r3, r0
 8000db0:	001a      	movs	r2, r3
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <main+0x12c>)
 8000db4:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000db6:	200a      	movs	r0, #10
 8000db8:	f000 fb84 	bl	80014c4 <HAL_Delay>

  f_close(&fil);
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <main+0x13c>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f006 fa02 	bl	80071c8 <f_close>
//	/**************** The following operation is using f_write and f_read **************************/
//
//	/* Create second file with read write access and open it */
//	fresult = f_open(&fil, "file5.txt", FA_CREATE_ALWAYS | FA_WRITE);

	fresult = f_open(&fil, "file5.txt", FA_WRITE);
 8000dc4:	492e      	ldr	r1, [pc, #184]	; (8000e80 <main+0x138>)
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <main+0x13c>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f005 fa8e 	bl	80062ec <f_open>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <main+0x12c>)
 8000dd6:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	strcpy (buffer, "kerem0101\n");
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <main+0x140>)
 8000dda:	4a2c      	ldr	r2, [pc, #176]	; (8000e8c <main+0x144>)
 8000ddc:	ca03      	ldmia	r2!, {r0, r1}
 8000dde:	c303      	stmia	r3!, {r0, r1}
 8000de0:	8811      	ldrh	r1, [r2, #0]
 8000de2:	8019      	strh	r1, [r3, #0]
 8000de4:	7892      	ldrb	r2, [r2, #2]
 8000de6:	709a      	strb	r2, [r3, #2]

	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <main+0x140>)
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff ff62 	bl	8000cb4 <bufsize>
 8000df0:	0003      	movs	r3, r0
 8000df2:	001a      	movs	r2, r3
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <main+0x148>)
 8000df6:	4924      	ldr	r1, [pc, #144]	; (8000e88 <main+0x140>)
 8000df8:	4822      	ldr	r0, [pc, #136]	; (8000e84 <main+0x13c>)
 8000dfa:	f005 fee5 	bl	8006bc8 <f_write>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	001a      	movs	r2, r3
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <main+0x12c>)
 8000e04:	701a      	strb	r2, [r3, #0]

	/* Close file */
	f_close(&fil);
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <main+0x13c>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f006 f9dd 	bl	80071c8 <f_close>

	HAL_Delay(50);
 8000e0e:	2032      	movs	r0, #50	; 0x32
 8000e10:	f000 fb58 	bl	80014c4 <HAL_Delay>

	// clearing buffer to show that result obtained is from the file
	clear_buffer();
 8000e14:	f7ff ff64 	bl	8000ce0 <clear_buffer>

	/* Open second file to read */
	fresult = f_open(&fil, "file5.txt", FA_READ);
 8000e18:	4919      	ldr	r1, [pc, #100]	; (8000e80 <main+0x138>)
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <main+0x13c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f005 fa64 	bl	80062ec <f_open>
 8000e24:	0003      	movs	r3, r0
 8000e26:	001a      	movs	r2, r3
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <main+0x12c>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)send_uart ("file5.txt is open and the data is shown below\n");
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <main+0x12c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d103      	bne.n	8000e3c <main+0xf4>
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <main+0x14c>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff6a 	bl	8000d10 <send_uart>

	/* Read data from the file
	* Please see the function details for the arguments */
	f_read (&fil, buffer, f_size(&fil), &br);
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <main+0x13c>)
 8000e3e:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <main+0x150>)
 8000e40:	589a      	ldr	r2, [r3, r2]
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <main+0x154>)
 8000e44:	4910      	ldr	r1, [pc, #64]	; (8000e88 <main+0x140>)
 8000e46:	480f      	ldr	r0, [pc, #60]	; (8000e84 <main+0x13c>)
 8000e48:	f005 fce0 	bl	800680c <f_read>
	send_uart(buffer);
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <main+0x140>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff ff5e 	bl	8000d10 <send_uart>

	/* Close file */
	f_close(&fil);
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <main+0x13c>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f006 f9b6 	bl	80071c8 <f_close>

	clear_buffer();
 8000e5c:	f7ff ff40 	bl	8000ce0 <clear_buffer>

	HAL_Delay(1000);
 8000e60:	23fa      	movs	r3, #250	; 0xfa
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fb2d 	bl	80014c4 <HAL_Delay>
	fresult = f_open(&fil, "file5.txt", FA_WRITE);
 8000e6a:	e7ab      	b.n	8000dc4 <main+0x7c>
 8000e6c:	08007470 	.word	0x08007470
 8000e70:	2000012c 	.word	0x2000012c
 8000e74:	20002188 	.word	0x20002188
 8000e78:	08007474 	.word	0x08007474
 8000e7c:	08007498 	.word	0x08007498
 8000e80:	080074bc 	.word	0x080074bc
 8000e84:	2000115c 	.word	0x2000115c
 8000e88:	20002194 	.word	0x20002194
 8000e8c:	080074c8 	.word	0x080074c8
 8000e90:	20002190 	.word	0x20002190
 8000e94:	080074d4 	.word	0x080074d4
 8000e98:	0000100c 	.word	0x0000100c
 8000e9c:	2000218c 	.word	0x2000218c

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b091      	sub	sp, #68	; 0x44
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	2410      	movs	r4, #16
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	0018      	movs	r0, r3
 8000eac:	2330      	movs	r3, #48	; 0x30
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f006 fac9 	bl	8007448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2310      	movs	r3, #16
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f006 fac2 	bl	8007448 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec4:	0021      	movs	r1, r4
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2202      	movs	r2, #2
 8000eca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2201      	movs	r2, #1
 8000ed0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2202      	movs	r2, #2
 8000edc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	0212      	lsls	r2, r2, #8
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	0352      	lsls	r2, r2, #13
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fd4a 	bl	8001990 <HAL_RCC_OscConfig>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000f00:	f000 f918 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	003b      	movs	r3, r7
 8000f06:	2207      	movs	r2, #7
 8000f08:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2101      	movs	r1, #1
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 f853 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f2a:	f000 f903 	bl	8001134 <Error_Handler>
  }
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b011      	add	sp, #68	; 0x44
 8000f34:	bd90      	pop	{r4, r7, pc}
	...

08000f38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_SPI1_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f44:	2282      	movs	r2, #130	; 0x82
 8000f46:	0052      	lsls	r2, r2, #1
 8000f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f52:	22e0      	movs	r2, #224	; 0xe0
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f86:	2207      	movs	r2, #7
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f92:	2208      	movs	r2, #8
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 f96b 	bl	8002274 <HAL_SPI_Init>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fa2:	f000 f8c7 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000044 	.word	0x20000044
 8000fb0:	40013000 	.word	0x40013000

08000fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fba:	4a15      	ldr	r2, [pc, #84]	; (8001010 <MX_USART2_UART_Init+0x5c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fc0:	22e1      	movs	r2, #225	; 0xe1
 8000fc2:	0252      	lsls	r2, r2, #9
 8000fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fe93 	bl	8002d24 <HAL_UART_Init>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001002:	f000 f897 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000a8 	.word	0x200000a8
 8001010:	40004400 	.word	0x40004400

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b08b      	sub	sp, #44	; 0x2c
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	2414      	movs	r4, #20
 800101c:	193b      	adds	r3, r7, r4
 800101e:	0018      	movs	r0, r3
 8001020:	2314      	movs	r3, #20
 8001022:	001a      	movs	r2, r3
 8001024:	2100      	movs	r1, #0
 8001026:	f006 fa0f 	bl	8007448 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <MX_GPIO_Init+0x118>)
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	4b3f      	ldr	r3, [pc, #252]	; (800112c <MX_GPIO_Init+0x118>)
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	0309      	lsls	r1, r1, #12
 8001034:	430a      	orrs	r2, r1
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	4b3c      	ldr	r3, [pc, #240]	; (800112c <MX_GPIO_Init+0x118>)
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	031b      	lsls	r3, r3, #12
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001046:	4b39      	ldr	r3, [pc, #228]	; (800112c <MX_GPIO_Init+0x118>)
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <MX_GPIO_Init+0x118>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	03c9      	lsls	r1, r1, #15
 8001050:	430a      	orrs	r2, r1
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	4b35      	ldr	r3, [pc, #212]	; (800112c <MX_GPIO_Init+0x118>)
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	03db      	lsls	r3, r3, #15
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <MX_GPIO_Init+0x118>)
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <MX_GPIO_Init+0x118>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0289      	lsls	r1, r1, #10
 800106c:	430a      	orrs	r2, r1
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_GPIO_Init+0x118>)
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_GPIO_Init+0x118>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MX_GPIO_Init+0x118>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	02c9      	lsls	r1, r1, #11
 8001088:	430a      	orrs	r2, r1
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <MX_GPIO_Init+0x118>)
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	02db      	lsls	r3, r3, #11
 8001094:	4013      	ands	r3, r2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800109a:	2390      	movs	r3, #144	; 0x90
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	2200      	movs	r2, #0
 80010a0:	2120      	movs	r1, #32
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 fc56 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_GPIO_Init+0x11c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	2110      	movs	r1, #16
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 fc50 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	0192      	lsls	r2, r2, #6
 80010ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2284      	movs	r2, #132	; 0x84
 80010c0:	0392      	lsls	r2, r2, #14
 80010c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_GPIO_Init+0x11c>)
 80010ce:	0019      	movs	r1, r3
 80010d0:	0010      	movs	r0, r2
 80010d2:	f000 facf 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010d6:	193b      	adds	r3, r7, r4
 80010d8:	2220      	movs	r2, #32
 80010da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	193b      	adds	r3, r7, r4
 80010de:	2201      	movs	r2, #1
 80010e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	193a      	adds	r2, r7, r4
 80010f0:	2390      	movs	r3, #144	; 0x90
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fabc 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010fc:	0021      	movs	r1, r4
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2210      	movs	r2, #16
 8001102:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2201      	movs	r2, #1
 8001108:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	187b      	adds	r3, r7, r1
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <MX_GPIO_Init+0x11c>)
 800111a:	0019      	movs	r1, r3
 800111c:	0010      	movs	r0, r2
 800111e:	f000 faa9 	bl	8001674 <HAL_GPIO_Init>

}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b00b      	add	sp, #44	; 0x2c
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	40021000 	.word	0x40021000
 8001130:	48000800 	.word	0x48000800

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_MspInit+0x44>)
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_MspInit+0x44>)
 800114c:	2101      	movs	r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_MspInit+0x44>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_MspInit+0x44>)
 8001160:	69da      	ldr	r2, [r3, #28]
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_MspInit+0x44>)
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	0549      	lsls	r1, r1, #21
 8001168:	430a      	orrs	r2, r1
 800116a:	61da      	str	r2, [r3, #28]
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_MspInit+0x44>)
 800116e:	69da      	ldr	r2, [r3, #28]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	055b      	lsls	r3, r3, #21
 8001174:	4013      	ands	r3, r2
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b08b      	sub	sp, #44	; 0x2c
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	2414      	movs	r4, #20
 8001192:	193b      	adds	r3, r7, r4
 8001194:	0018      	movs	r0, r3
 8001196:	2314      	movs	r3, #20
 8001198:	001a      	movs	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f006 f954 	bl	8007448 <memset>
  if(hspi->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <HAL_SPI_MspInit+0xd8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d155      	bne.n	8001256 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0149      	lsls	r1, r1, #5
 80011b4:	430a      	orrs	r2, r1
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	0289      	lsls	r1, r1, #10
 80011d0:	430a      	orrs	r2, r1
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	029b      	lsls	r3, r3, #10
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	02c9      	lsls	r1, r1, #11
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_SPI_MspInit+0xdc>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	02db      	lsls	r3, r3, #11
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	22c0      	movs	r2, #192	; 0xc0
 8001202:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2202      	movs	r2, #2
 8001208:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	193b      	adds	r3, r7, r4
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	193b      	adds	r3, r7, r4
 8001212:	2203      	movs	r2, #3
 8001214:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001216:	193b      	adds	r3, r7, r4
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	193a      	adds	r2, r7, r4
 800121e:	2390      	movs	r3, #144	; 0x90
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f000 fa25 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800122a:	0021      	movs	r1, r4
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2208      	movs	r2, #8
 8001230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2202      	movs	r2, #2
 8001236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2203      	movs	r2, #3
 8001242:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	187b      	adds	r3, r7, r1
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_SPI_MspInit+0xe0>)
 800124e:	0019      	movs	r1, r3
 8001250:	0010      	movs	r0, r2
 8001252:	f000 fa0f 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b00b      	add	sp, #44	; 0x2c
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40013000 	.word	0x40013000
 8001264:	40021000 	.word	0x40021000
 8001268:	48000400 	.word	0x48000400

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08b      	sub	sp, #44	; 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	2414      	movs	r4, #20
 8001276:	193b      	adds	r3, r7, r4
 8001278:	0018      	movs	r0, r3
 800127a:	2314      	movs	r3, #20
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f006 f8e2 	bl	8007448 <memset>
  if(huart->Instance==USART2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_UART_MspInit+0x90>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d132      	bne.n	80012f4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_UART_MspInit+0x94>)
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_UART_MspInit+0x94>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0289      	lsls	r1, r1, #10
 8001298:	430a      	orrs	r2, r1
 800129a:	61da      	str	r2, [r3, #28]
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_UART_MspInit+0x94>)
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	029b      	lsls	r3, r3, #10
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_UART_MspInit+0x94>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x94>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	0289      	lsls	r1, r1, #10
 80012b4:	430a      	orrs	r2, r1
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0x94>)
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c6:	0021      	movs	r1, r4
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2202      	movs	r2, #2
 80012d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2203      	movs	r2, #3
 80012de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2201      	movs	r2, #1
 80012e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	187a      	adds	r2, r7, r1
 80012e8:	2390      	movs	r3, #144	; 0x90
 80012ea:	05db      	lsls	r3, r3, #23
 80012ec:	0011      	movs	r1, r2
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 f9c0 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b00b      	add	sp, #44	; 0x2c
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	40004400 	.word	0x40004400
 8001300:	40021000 	.word	0x40021000

08001304 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <SDTimer_Handler+0x3c>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <SDTimer_Handler+0x1c>
    Timer1--;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <SDTimer_Handler+0x3c>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	3b01      	subs	r3, #1
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <SDTimer_Handler+0x3c>)
 800131e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SDTimer_Handler+0x40>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <SDTimer_Handler+0x34>
    Timer2--;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SDTimer_Handler+0x40>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <SDTimer_Handler+0x40>)
 8001336:	801a      	strh	r2, [r3, #0]
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	20002216 	.word	0x20002216
 8001344:	20002218 	.word	0x20002218

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SysTick_Handler+0x30>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3301      	adds	r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <SysTick_Handler+0x30>)
 8001378:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <SysTick_Handler+0x30>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b09      	cmp	r3, #9
 8001382:	d904      	bls.n	800138e <SysTick_Handler+0x26>
	{
	FatFsCnt = 0;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Handler+0x30>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 800138a:	f7ff ffbb 	bl	8001304 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 f87d 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20002214 	.word	0x20002214

0800139c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ae:	490e      	ldr	r1, [pc, #56]	; (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c4:	4c0b      	ldr	r4, [pc, #44]	; (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013d2:	f7ff ffe3 	bl	800139c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013d6:	f006 f813 	bl	8007400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fcb5 	bl	8000d48 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013ec:	08007b14 	.word	0x08007b14
  ldr r2, =_sbss
 80013f0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013f4:	20002454 	.word	0x20002454

080013f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_IRQHandler>
	...

080013fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_Init+0x24>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_Init+0x24>)
 8001406:	2110      	movs	r1, #16
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800140c:	2000      	movs	r0, #0
 800140e:	f000 f809 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001412:	f7ff fe95 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_InitTick+0x5c>)
 800142e:	681c      	ldr	r4, [r3, #0]
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_InitTick+0x60>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	0019      	movs	r1, r3
 8001436:	23fa      	movs	r3, #250	; 0xfa
 8001438:	0098      	lsls	r0, r3, #2
 800143a:	f7fe fe6d 	bl	8000118 <__udivsi3>
 800143e:	0003      	movs	r3, r0
 8001440:	0019      	movs	r1, r3
 8001442:	0020      	movs	r0, r4
 8001444:	f7fe fe68 	bl	8000118 <__udivsi3>
 8001448:	0003      	movs	r3, r0
 800144a:	0018      	movs	r0, r3
 800144c:	f000 f905 	bl	800165a <HAL_SYSTICK_Config>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d001      	beq.n	8001458 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e00f      	b.n	8001478 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d80b      	bhi.n	8001476 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2301      	movs	r3, #1
 8001462:	425b      	negs	r3, r3
 8001464:	2200      	movs	r2, #0
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f8e2 	bl	8001630 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_InitTick+0x64>)
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b003      	add	sp, #12
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	20000004 	.word	0x20000004
 8001484:	2000000c 	.word	0x2000000c
 8001488:	20000008 	.word	0x20000008

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x1c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	001a      	movs	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x20>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	18d2      	adds	r2, r2, r3
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_IncTick+0x20>)
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	2000000c 	.word	0x2000000c
 80014ac:	2000221c 	.word	0x2000221c

080014b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	2000221c 	.word	0x2000221c

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fff0 	bl	80014b0 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3301      	adds	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	001a      	movs	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	189b      	adds	r3, r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	f7ff ffe0 	bl	80014b0 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b004      	add	sp, #16
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	2000000c 	.word	0x2000000c

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	0002      	movs	r2, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d828      	bhi.n	8001574 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001522:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <__NVIC_SetPriority+0xd4>)
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	33c0      	adds	r3, #192	; 0xc0
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	589b      	ldr	r3, [r3, r2]
 8001532:	1dfa      	adds	r2, r7, #7
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	0011      	movs	r1, r2
 8001538:	2203      	movs	r2, #3
 800153a:	400a      	ands	r2, r1
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	21ff      	movs	r1, #255	; 0xff
 8001540:	4091      	lsls	r1, r2
 8001542:	000a      	movs	r2, r1
 8001544:	43d2      	mvns	r2, r2
 8001546:	401a      	ands	r2, r3
 8001548:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	22ff      	movs	r2, #255	; 0xff
 8001550:	401a      	ands	r2, r3
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	0018      	movs	r0, r3
 8001558:	2303      	movs	r3, #3
 800155a:	4003      	ands	r3, r0
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001560:	481f      	ldr	r0, [pc, #124]	; (80015e0 <__NVIC_SetPriority+0xd4>)
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	430a      	orrs	r2, r1
 800156c:	33c0      	adds	r3, #192	; 0xc0
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001572:	e031      	b.n	80015d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <__NVIC_SetPriority+0xd8>)
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	0019      	movs	r1, r3
 800157c:	230f      	movs	r3, #15
 800157e:	400b      	ands	r3, r1
 8001580:	3b08      	subs	r3, #8
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3306      	adds	r3, #6
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	1dfa      	adds	r2, r7, #7
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	0011      	movs	r1, r2
 8001594:	2203      	movs	r2, #3
 8001596:	400a      	ands	r2, r1
 8001598:	00d2      	lsls	r2, r2, #3
 800159a:	21ff      	movs	r1, #255	; 0xff
 800159c:	4091      	lsls	r1, r2
 800159e:	000a      	movs	r2, r1
 80015a0:	43d2      	mvns	r2, r2
 80015a2:	401a      	ands	r2, r3
 80015a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	019b      	lsls	r3, r3, #6
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	401a      	ands	r2, r3
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	0018      	movs	r0, r3
 80015b4:	2303      	movs	r3, #3
 80015b6:	4003      	ands	r3, r0
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <__NVIC_SetPriority+0xd8>)
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	001c      	movs	r4, r3
 80015c4:	230f      	movs	r3, #15
 80015c6:	4023      	ands	r3, r4
 80015c8:	3b08      	subs	r3, #8
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	430a      	orrs	r2, r1
 80015ce:	3306      	adds	r3, #6
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	18c3      	adds	r3, r0, r3
 80015d4:	3304      	adds	r3, #4
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b003      	add	sp, #12
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	045b      	lsls	r3, r3, #17
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d301      	bcc.n	8001600 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fc:	2301      	movs	r3, #1
 80015fe:	e010      	b.n	8001622 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <SysTick_Config+0x44>)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	3a01      	subs	r2, #1
 8001606:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001608:	2301      	movs	r3, #1
 800160a:	425b      	negs	r3, r3
 800160c:	2103      	movs	r1, #3
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff ff7c 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x44>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x44>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	210f      	movs	r1, #15
 800163c:	187b      	adds	r3, r7, r1
 800163e:	1c02      	adds	r2, r0, #0
 8001640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	187b      	adds	r3, r7, r1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff ff5d 	bl	800150c <__NVIC_SetPriority>
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b004      	add	sp, #16
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ffbf 	bl	80015e8 <SysTick_Config>
 800166a:	0003      	movs	r3, r0
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e14f      	b.n	8001924 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4091      	lsls	r1, r2
 800168e:	000a      	movs	r2, r1
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d100      	bne.n	800169c <HAL_GPIO_Init+0x28>
 800169a:	e140      	b.n	800191e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	2201      	movs	r2, #1
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	4013      	ands	r3, r2
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	4013      	ands	r3, r2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	58d3      	ldr	r3, [r2, r3]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2207      	movs	r2, #7
 8001770:	4013      	ands	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2107      	movs	r1, #7
 800178a:	400b      	ands	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	6939      	ldr	r1, [r7, #16]
 80017a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	401a      	ands	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d100      	bne.n	80017e8 <HAL_GPIO_Init+0x174>
 80017e6:	e09a      	b.n	800191e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b54      	ldr	r3, [pc, #336]	; (800193c <HAL_GPIO_Init+0x2c8>)
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_GPIO_Init+0x2c8>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b51      	ldr	r3, [pc, #324]	; (800193c <HAL_GPIO_Init+0x2c8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	589b      	ldr	r3, [r3, r2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2203      	movs	r2, #3
 8001812:	4013      	ands	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	409a      	lsls	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	43da      	mvns	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	2390      	movs	r3, #144	; 0x90
 8001828:	05db      	lsls	r3, r3, #23
 800182a:	429a      	cmp	r2, r3
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x1e2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a44      	ldr	r2, [pc, #272]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x1de>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a43      	ldr	r2, [pc, #268]	; (8001948 <HAL_GPIO_Init+0x2d4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x1da>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a42      	ldr	r2, [pc, #264]	; (800194c <HAL_GPIO_Init+0x2d8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x1d6>
 8001846:	2303      	movs	r3, #3
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x1e4>
 800184a:	2305      	movs	r3, #5
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x1e4>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001856:	2300      	movs	r3, #0
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	2103      	movs	r1, #3
 800185c:	400a      	ands	r2, r1
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001876:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	4013      	ands	r3, r2
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	035b      	lsls	r3, r3, #13
 80018e2:	4013      	ands	r3, r2
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43da      	mvns	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	039b      	lsls	r3, r3, #14
 800190c:	4013      	ands	r3, r2
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	40da      	lsrs	r2, r3
 800192c:	1e13      	subs	r3, r2, #0
 800192e:	d000      	beq.n	8001932 <HAL_GPIO_Init+0x2be>
 8001930:	e6a8      	b.n	8001684 <HAL_GPIO_Init+0x10>
  } 
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b006      	add	sp, #24
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	48000400 	.word	0x48000400
 8001948:	48000800 	.word	0x48000800
 800194c:	48000c00 	.word	0x48000c00
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	0008      	movs	r0, r1
 800195e:	0011      	movs	r1, r2
 8001960:	1cbb      	adds	r3, r7, #2
 8001962:	1c02      	adds	r2, r0, #0
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	1c7b      	adds	r3, r7, #1
 8001968:	1c0a      	adds	r2, r1, #0
 800196a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800196c:	1c7b      	adds	r3, r7, #1
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001974:	1cbb      	adds	r3, r7, #2
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197e:	1cbb      	adds	r3, r7, #2
 8001980:	881a      	ldrh	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e305      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	d100      	bne.n	80019ae <HAL_RCC_OscConfig+0x1e>
 80019ac:	e08d      	b.n	8001aca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ae:	4bc5      	ldr	r3, [pc, #788]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	220c      	movs	r2, #12
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d00e      	beq.n	80019d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ba:	4bc2      	ldr	r3, [pc, #776]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	220c      	movs	r2, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d116      	bne.n	80019f4 <HAL_RCC_OscConfig+0x64>
 80019c6:	4bbf      	ldr	r3, [pc, #764]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	23c0      	movs	r3, #192	; 0xc0
 80019cc:	025b      	lsls	r3, r3, #9
 80019ce:	401a      	ands	r2, r3
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10d      	bne.n	80019f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4bba      	ldr	r3, [pc, #744]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x56>
 80019e4:	e070      	b.n	8001ac8 <HAL_RCC_OscConfig+0x138>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d000      	beq.n	80019f0 <HAL_RCC_OscConfig+0x60>
 80019ee:	e06b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e2dc      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x7c>
 80019fc:	4bb1      	ldr	r3, [pc, #708]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4bb0      	ldr	r3, [pc, #704]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0249      	lsls	r1, r1, #9
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e02f      	b.n	8001a6c <HAL_RCC_OscConfig+0xdc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x9e>
 8001a14:	4bab      	ldr	r3, [pc, #684]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4baa      	ldr	r3, [pc, #680]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a1a:	49ab      	ldr	r1, [pc, #684]	; (8001cc8 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	4ba8      	ldr	r3, [pc, #672]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4ba7      	ldr	r3, [pc, #668]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a26:	49a9      	ldr	r1, [pc, #676]	; (8001ccc <HAL_RCC_OscConfig+0x33c>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e01e      	b.n	8001a6c <HAL_RCC_OscConfig+0xdc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10e      	bne.n	8001a54 <HAL_RCC_OscConfig+0xc4>
 8001a36:	4ba3      	ldr	r3, [pc, #652]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4ba2      	ldr	r3, [pc, #648]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	02c9      	lsls	r1, r1, #11
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4b9f      	ldr	r3, [pc, #636]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b9e      	ldr	r3, [pc, #632]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	0249      	lsls	r1, r1, #9
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xdc>
 8001a54:	4b9b      	ldr	r3, [pc, #620]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b9a      	ldr	r3, [pc, #616]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a5a:	499b      	ldr	r1, [pc, #620]	; (8001cc8 <HAL_RCC_OscConfig+0x338>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	4b98      	ldr	r3, [pc, #608]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b97      	ldr	r3, [pc, #604]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a66:	4999      	ldr	r1, [pc, #612]	; (8001ccc <HAL_RCC_OscConfig+0x33c>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d014      	beq.n	8001a9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fd1c 	bl	80014b0 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fd17 	bl	80014b0 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e28e      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a90:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	029b      	lsls	r3, r3, #10
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0xee>
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fd07 	bl	80014b0 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fd02 	bl	80014b0 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e279      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	029b      	lsls	r3, r3, #10
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x118>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x146>
 8001ad4:	e06c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ad6:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	220c      	movs	r2, #12
 8001adc:	4013      	ands	r3, r2
 8001ade:	d00e      	beq.n	8001afe <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ae0:	4b78      	ldr	r3, [pc, #480]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d11f      	bne.n	8001b2c <HAL_RCC_OscConfig+0x19c>
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	23c0      	movs	r3, #192	; 0xc0
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	401a      	ands	r2, r3
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b71      	ldr	r3, [pc, #452]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_OscConfig+0x184>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e24c      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	22f8      	movs	r2, #248	; 0xf8
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00da      	lsls	r2, r3, #3
 8001b24:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e041      	b.n	8001bb0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d024      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fcb6 	bl	80014b0 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fcb1 	bl	80014b0 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e228      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d0f1      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	22f8      	movs	r2, #248	; 0xf8
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	00da      	lsls	r2, r3, #3
 8001b76:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e018      	b.n	8001bb0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b51      	ldr	r3, [pc, #324]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	438a      	bics	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fc91 	bl	80014b0 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc8c 	bl	80014b0 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e203      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d1f1      	bne.n	8001b94 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d036      	beq.n	8001c28 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d019      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fc6f 	bl	80014b0 <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fc6a 	bl	80014b0 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1e1      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d0f1      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x248>
 8001bf4:	e018      	b.n	8001c28 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	438a      	bics	r2, r1
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fc55 	bl	80014b0 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fc50 	bl	80014b0 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1c7      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d1f1      	bne.n	8001c0c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d100      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2a4>
 8001c32:	e0b5      	b.n	8001da0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c34:	201f      	movs	r0, #31
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	055b      	lsls	r3, r3, #21
 8001c44:	4013      	ands	r3, r2
 8001c46:	d110      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0549      	lsls	r1, r1, #21
 8001c52:	430a      	orrs	r2, r1
 8001c54:	61da      	str	r2, [r3, #28]
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	055b      	lsls	r3, r3, #21
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c64:	183b      	adds	r3, r7, r0
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_OscConfig+0x340>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	d11a      	bne.n	8001cac <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCC_OscConfig+0x340>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_RCC_OscConfig+0x340>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	0049      	lsls	r1, r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fc14 	bl	80014b0 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7ff fc0f 	bl	80014b0 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e186      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x340>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x344>
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001cb6:	6a1a      	ldr	r2, [r3, #32]
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	621a      	str	r2, [r3, #32]
 8001cc0:	e036      	b.n	8001d30 <HAL_RCC_OscConfig+0x3a0>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	fffeffff 	.word	0xfffeffff
 8001ccc:	fffbffff 	.word	0xfffbffff
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x366>
 8001cdc:	4bb6      	ldr	r3, [pc, #728]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001cde:	6a1a      	ldr	r2, [r3, #32]
 8001ce0:	4bb5      	ldr	r3, [pc, #724]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	621a      	str	r2, [r3, #32]
 8001ce8:	4bb3      	ldr	r3, [pc, #716]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	4bb2      	ldr	r3, [pc, #712]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001cee:	2104      	movs	r1, #4
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	621a      	str	r2, [r3, #32]
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x3a0>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x388>
 8001cfe:	4bae      	ldr	r3, [pc, #696]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d00:	6a1a      	ldr	r2, [r3, #32]
 8001d02:	4bad      	ldr	r3, [pc, #692]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d04:	2104      	movs	r1, #4
 8001d06:	430a      	orrs	r2, r1
 8001d08:	621a      	str	r2, [r3, #32]
 8001d0a:	4bab      	ldr	r3, [pc, #684]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d0c:	6a1a      	ldr	r2, [r3, #32]
 8001d0e:	4baa      	ldr	r3, [pc, #680]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	621a      	str	r2, [r3, #32]
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0x3a0>
 8001d18:	4ba7      	ldr	r3, [pc, #668]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	4ba6      	ldr	r3, [pc, #664]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	621a      	str	r2, [r3, #32]
 8001d24:	4ba4      	ldr	r3, [pc, #656]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d26:	6a1a      	ldr	r2, [r3, #32]
 8001d28:	4ba3      	ldr	r3, [pc, #652]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d014      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fbba 	bl	80014b0 <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fbb5 	bl	80014b0 <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a9b      	ldr	r2, [pc, #620]	; (8001fbc <HAL_RCC_OscConfig+0x62c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e12b      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b98      	ldr	r3, [pc, #608]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3b2>
 8001d60:	e013      	b.n	8001d8a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fba5 	bl	80014b0 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6a:	e009      	b.n	8001d80 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fba0 	bl	80014b0 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a91      	ldr	r2, [pc, #580]	; (8001fbc <HAL_RCC_OscConfig+0x62c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e116      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	4b8d      	ldr	r3, [pc, #564]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8a:	231f      	movs	r3, #31
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	4b87      	ldr	r3, [pc, #540]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001d9a:	4989      	ldr	r1, [pc, #548]	; (8001fc0 <HAL_RCC_OscConfig+0x630>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2210      	movs	r2, #16
 8001da6:	4013      	ands	r3, r2
 8001da8:	d063      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d12a      	bne.n	8001e08 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001db2:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db6:	4b80      	ldr	r3, [pc, #512]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001db8:	2104      	movs	r1, #4
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dbe:	4b7e      	ldr	r3, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7ff fb71 	bl	80014b0 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dd4:	f7ff fb6c 	bl	80014b0 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0e3      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001de6:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d0f1      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001df0:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df4:	22f8      	movs	r2, #248	; 0xf8
 8001df6:	4393      	bics	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	00da      	lsls	r2, r3, #3
 8001e00:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
 8001e06:	e034      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	3305      	adds	r3, #5
 8001e0e:	d111      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e10:	4b69      	ldr	r3, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e14:	4b68      	ldr	r3, [pc, #416]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e16:	2104      	movs	r1, #4
 8001e18:	438a      	bics	r2, r1
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e1c:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	22f8      	movs	r2, #248	; 0xf8
 8001e22:	4393      	bics	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	00da      	lsls	r2, r3, #3
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
 8001e32:	e01e      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e34:	4b60      	ldr	r3, [pc, #384]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e38:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e40:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e44:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	438a      	bics	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fb30 	bl	80014b0 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e56:	f7ff fb2b 	bl	80014b0 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0a2      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f1      	bne.n	8001e56 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d100      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
 8001e7a:	e097      	b.n	8001fac <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	220c      	movs	r2, #12
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d100      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4fa>
 8001e88:	e06b      	b.n	8001f62 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d14c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e98:	494a      	ldr	r1, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x634>)
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fb07 	bl	80014b0 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff fb02 	bl	80014b0 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e079      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eba:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	049b      	lsls	r3, r3, #18
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	220f      	movs	r2, #15
 8001ecc:	4393      	bics	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <HAL_RCC_OscConfig+0x638>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	431a      	orrs	r2, r3
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	0449      	lsls	r1, r1, #17
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fad5 	bl	80014b0 <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff fad0 	bl	80014b0 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e047      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	049b      	lsls	r3, r3, #18
 8001f26:	4013      	ands	r3, r2
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x57c>
 8001f2a:	e03f      	b.n	8001fac <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001f32:	4924      	ldr	r1, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x634>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff faba 	bl	80014b0 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff fab5 	bl	80014b0 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e02c      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	049b      	lsls	r3, r3, #18
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5b2>
 8001f60:	e024      	b.n	8001fac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e01f      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	23c0      	movs	r3, #192	; 0xc0
 8001f7e:	025b      	lsls	r3, r3, #9
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d10e      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	401a      	ands	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	23f0      	movs	r3, #240	; 0xf0
 8001f9c:	039b      	lsls	r3, r3, #14
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b008      	add	sp, #32
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	efffffff 	.word	0xefffffff
 8001fc4:	feffffff 	.word	0xfeffffff
 8001fc8:	ffc27fff 	.word	0xffc27fff

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b3      	b.n	8002148 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d911      	bls.n	8002012 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b58      	ldr	r3, [pc, #352]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	4b55      	ldr	r3, [pc, #340]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e09a      	b.n	8002148 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d015      	beq.n	8002048 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2204      	movs	r2, #4
 8002022:	4013      	ands	r3, r2
 8002024:	d006      	beq.n	8002034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002026:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 800202c:	21e0      	movs	r1, #224	; 0xe0
 800202e:	00c9      	lsls	r1, r1, #3
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	22f0      	movs	r2, #240	; 0xf0
 800203a:	4393      	bics	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d040      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	4013      	ands	r3, r2
 8002064:	d114      	bne.n	8002090 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06e      	b.n	8002148 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	049b      	lsls	r3, r3, #18
 800207a:	4013      	ands	r3, r2
 800207c:	d108      	bne.n	8002090 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e062      	b.n	8002148 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e05b      	b.n	8002148 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	4393      	bics	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7ff fa04 	bl	80014b0 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ac:	e009      	b.n	80020c2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ae:	f7ff f9ff 	bl	80014b0 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <HAL_RCC_ClockConfig+0x18c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e042      	b.n	8002148 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	220c      	movs	r2, #12
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1ec      	bne.n	80020ae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d211      	bcs.n	8002106 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4393      	bics	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_RCC_ClockConfig+0x184>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e020      	b.n	8002148 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_RCC_ClockConfig+0x190>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002124:	f000 f820 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002128:	0001      	movs	r1, r0
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x188>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	220f      	movs	r2, #15
 8002132:	4013      	ands	r3, r2
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_RCC_ClockConfig+0x194>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	000a      	movs	r2, r1
 800213a:	40da      	lsrs	r2, r3
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_ClockConfig+0x198>)
 800213e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff f96f 	bl	8001424 <HAL_InitTick>
  
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b004      	add	sp, #16
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
 8002158:	00001388 	.word	0x00001388
 800215c:	fffff8ff 	.word	0xfffff8ff
 8002160:	080075a4 	.word	0x080075a4
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08f      	sub	sp, #60	; 0x3c
 800216c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800216e:	2314      	movs	r3, #20
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002174:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002176:	c313      	stmia	r3!, {r0, r1, r4}
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002180:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002182:	c313      	stmia	r3!, {r0, r1, r4}
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218c:	2300      	movs	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002190:	2300      	movs	r3, #0
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800219c:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_RCC_GetSysClockFreq+0xc4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	220c      	movs	r2, #12
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d002      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x4a>
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d003      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x50>
 80021b0:	e02f      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021b6:	e02f      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	0c9b      	lsrs	r3, r3, #18
 80021bc:	220f      	movs	r2, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2214      	movs	r2, #20
 80021c2:	18ba      	adds	r2, r7, r2
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	220f      	movs	r2, #15
 80021ce:	4013      	ands	r3, r2
 80021d0:	1d3a      	adds	r2, r7, #4
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d8:	23c0      	movs	r3, #192	; 0xc0
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	401a      	ands	r2, r3
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	025b      	lsls	r3, r3, #9
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d109      	bne.n	80021fa <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e8:	4811      	ldr	r0, [pc, #68]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ea:	f7fd ff95 	bl	8000118 <__udivsi3>
 80021ee:	0003      	movs	r3, r0
 80021f0:	001a      	movs	r2, r3
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	4353      	muls	r3, r2
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
 80021f8:	e008      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021fe:	f7fd ff8b 	bl	8000118 <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	001a      	movs	r2, r3
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	4353      	muls	r3, r2
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002216:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b00f      	add	sp, #60	; 0x3c
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	08007504 	.word	0x08007504
 8002228:	08007514 	.word	0x08007514
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <HAL_RCC_GetHCLKFreq+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800224c:	f7ff fff2 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002250:	0001      	movs	r1, r0
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	2207      	movs	r2, #7
 800225a:	4013      	ands	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	40d9      	lsrs	r1, r3
 8002262:	000b      	movs	r3, r1
}    
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	40021000 	.word	0x40021000
 8002270:	080075b4 	.word	0x080075b4

08002274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0a8      	b.n	80023d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	2382      	movs	r3, #130	; 0x82
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	429a      	cmp	r2, r3
 8002298:	d009      	beq.n	80022ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
 80022a0:	e005      	b.n	80022ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	225d      	movs	r2, #93	; 0x5d
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	225c      	movs	r2, #92	; 0x5c
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7fe ff5c 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	225d      	movs	r2, #93	; 0x5d
 80022d4:	2102      	movs	r1, #2
 80022d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2140      	movs	r1, #64	; 0x40
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	23e0      	movs	r3, #224	; 0xe0
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d902      	bls.n	80022fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e002      	b.n	8002300 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	015b      	lsls	r3, r3, #5
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	23f0      	movs	r3, #240	; 0xf0
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	429a      	cmp	r2, r3
 800230a:	d008      	beq.n	800231e <HAL_SPI_Init+0xaa>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23e0      	movs	r3, #224	; 0xe0
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	429a      	cmp	r2, r3
 8002316:	d002      	beq.n	800231e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	2382      	movs	r3, #130	; 0x82
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	2384      	movs	r3, #132	; 0x84
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	400b      	ands	r3, r1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2102      	movs	r1, #2
 800233a:	400b      	ands	r3, r1
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2101      	movs	r1, #1
 8002344:	400b      	ands	r3, r1
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6999      	ldr	r1, [r3, #24]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	400b      	ands	r3, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2138      	movs	r1, #56	; 0x38
 800235a:	400b      	ands	r3, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	400b      	ands	r3, r1
 8002366:	431a      	orrs	r2, r3
 8002368:	0011      	movs	r1, r2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	401a      	ands	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	2204      	movs	r2, #4
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2110      	movs	r1, #16
 800238c:	400b      	ands	r3, r1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	2108      	movs	r1, #8
 8002396:	400b      	ands	r3, r1
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	23f0      	movs	r3, #240	; 0xf0
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	400b      	ands	r3, r1
 80023a4:	431a      	orrs	r2, r3
 80023a6:	0011      	movs	r1, r2
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	015b      	lsls	r3, r3, #5
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4907      	ldr	r1, [pc, #28]	; (80023e0 <HAL_SPI_Init+0x16c>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	225d      	movs	r2, #93	; 0x5d
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b004      	add	sp, #16
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	fffff7ff 	.word	0xfffff7ff

080023e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	1dbb      	adds	r3, r7, #6
 80023f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023f4:	231f      	movs	r3, #31
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	225c      	movs	r2, #92	; 0x5c
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_SPI_Transmit+0x26>
 8002406:	2302      	movs	r3, #2
 8002408:	e140      	b.n	800268c <HAL_SPI_Transmit+0x2a8>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	225c      	movs	r2, #92	; 0x5c
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002412:	f7ff f84d 	bl	80014b0 <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800241a:	2316      	movs	r3, #22
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	1dba      	adds	r2, r7, #6
 8002420:	8812      	ldrh	r2, [r2, #0]
 8002422:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	225d      	movs	r2, #93	; 0x5d
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d004      	beq.n	800243a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002430:	231f      	movs	r3, #31
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
    goto error;
 8002438:	e11d      	b.n	8002676 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_SPI_Transmit+0x64>
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002448:	231f      	movs	r3, #31
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002450:	e111      	b.n	8002676 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	225d      	movs	r2, #93	; 0x5d
 8002456:	2103      	movs	r1, #3
 8002458:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1dba      	adds	r2, r7, #6
 800246a:	8812      	ldrh	r2, [r2, #0]
 800246c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1dba      	adds	r2, r7, #6
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2244      	movs	r2, #68	; 0x44
 8002480:	2100      	movs	r1, #0
 8002482:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2246      	movs	r2, #70	; 0x46
 8002488:	2100      	movs	r1, #0
 800248a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d110      	bne.n	80024c6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2140      	movs	r1, #64	; 0x40
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	01c9      	lsls	r1, r1, #7
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d007      	beq.n	80024e4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2140      	movs	r1, #64	; 0x40
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	23e0      	movs	r3, #224	; 0xe0
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d94e      	bls.n	800258e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_SPI_Transmit+0x11e>
 80024f8:	2316      	movs	r3, #22
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d13f      	bne.n	8002582 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	881a      	ldrh	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	1c9a      	adds	r2, r3, #2
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002526:	e02c      	b.n	8002582 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d112      	bne.n	800255c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	1c9a      	adds	r2, r3, #2
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	87da      	strh	r2, [r3, #62]	; 0x3e
 800255a:	e012      	b.n	8002582 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800255c:	f7fe ffa8 	bl	80014b0 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d802      	bhi.n	8002572 <HAL_SPI_Transmit+0x18e>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_SPI_Transmit+0x194>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d104      	bne.n	8002582 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002578:	231f      	movs	r3, #31
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2203      	movs	r2, #3
 800257e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002580:	e079      	b.n	8002676 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1cd      	bne.n	8002528 <HAL_SPI_Transmit+0x144>
 800258c:	e04f      	b.n	800262e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_SPI_Transmit+0x1bc>
 8002596:	2316      	movs	r3, #22
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d141      	bne.n	8002624 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	7812      	ldrb	r2, [r2, #0]
 80025ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80025c6:	e02d      	b.n	8002624 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d113      	bne.n	80025fe <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025fc:	e012      	b.n	8002624 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025fe:	f7fe ff57 	bl	80014b0 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d802      	bhi.n	8002614 <HAL_SPI_Transmit+0x230>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_SPI_Transmit+0x236>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800261a:	231f      	movs	r3, #31
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	2203      	movs	r2, #3
 8002620:	701a      	strb	r2, [r3, #0]
          goto error;
 8002622:	e028      	b.n	8002676 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1cc      	bne.n	80025c8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0018      	movs	r0, r3
 8002636:	f000 fb2f 	bl	8002c98 <SPI_EndRxTxTransaction>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d002      	beq.n	8002644 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800266a:	231f      	movs	r3, #31
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e000      	b.n	8002676 <HAL_SPI_Transmit+0x292>
  }

error:
 8002674:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	225d      	movs	r2, #93	; 0x5d
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	225c      	movs	r2, #92	; 0x5c
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002686:	231f      	movs	r3, #31
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	781b      	ldrb	r3, [r3, #0]
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b008      	add	sp, #32
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	001a      	movs	r2, r3
 80026a2:	1cbb      	adds	r3, r7, #2
 80026a4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026a6:	2301      	movs	r3, #1
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026aa:	2323      	movs	r3, #35	; 0x23
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	225c      	movs	r2, #92	; 0x5c
 80026b6:	5c9b      	ldrb	r3, [r3, r2]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x2c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e1b5      	b.n	8002a2c <HAL_SPI_TransmitReceive+0x398>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	225c      	movs	r2, #92	; 0x5c
 80026c4:	2101      	movs	r1, #1
 80026c6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026c8:	f7fe fef2 	bl	80014b0 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d0:	201b      	movs	r0, #27
 80026d2:	183b      	adds	r3, r7, r0
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	215d      	movs	r1, #93	; 0x5d
 80026d8:	5c52      	ldrb	r2, [r2, r1]
 80026da:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80026e2:	2312      	movs	r3, #18
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	1cba      	adds	r2, r7, #2
 80026e8:	8812      	ldrh	r2, [r2, #0]
 80026ea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d011      	beq.n	8002718 <HAL_SPI_TransmitReceive+0x84>
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	2382      	movs	r3, #130	; 0x82
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d107      	bne.n	800270e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <HAL_SPI_TransmitReceive+0x7a>
 8002706:	183b      	adds	r3, r7, r0
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d004      	beq.n	8002718 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800270e:	2323      	movs	r3, #35	; 0x23
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
    goto error;
 8002716:	e17e      	b.n	8002a16 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_SPI_TransmitReceive+0x98>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_SPI_TransmitReceive+0x98>
 8002724:	1cbb      	adds	r3, r7, #2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d104      	bne.n	8002736 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800272c:	2323      	movs	r3, #35	; 0x23
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
    goto error;
 8002734:	e16f      	b.n	8002a16 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	225d      	movs	r2, #93	; 0x5d
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b04      	cmp	r3, #4
 8002740:	d003      	beq.n	800274a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	225d      	movs	r2, #93	; 0x5d
 8002746:	2105      	movs	r1, #5
 8002748:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1cba      	adds	r2, r7, #2
 800275a:	2146      	movs	r1, #70	; 0x46
 800275c:	8812      	ldrh	r2, [r2, #0]
 800275e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1cba      	adds	r2, r7, #2
 8002764:	2144      	movs	r1, #68	; 0x44
 8002766:	8812      	ldrh	r2, [r2, #0]
 8002768:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1cba      	adds	r2, r7, #2
 8002774:	8812      	ldrh	r2, [r2, #0]
 8002776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1cba      	adds	r2, r7, #2
 800277c:	8812      	ldrh	r2, [r2, #0]
 800277e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	23e0      	movs	r3, #224	; 0xe0
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	429a      	cmp	r2, r3
 8002796:	d908      	bls.n	80027aa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	49a4      	ldr	r1, [pc, #656]	; (8002a34 <HAL_SPI_TransmitReceive+0x3a0>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	e008      	b.n	80027bc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0149      	lsls	r1, r1, #5
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d007      	beq.n	80027da <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2140      	movs	r1, #64	; 0x40
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	23e0      	movs	r3, #224	; 0xe0
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d800      	bhi.n	80027e8 <HAL_SPI_TransmitReceive+0x154>
 80027e6:	e07f      	b.n	80028e8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x168>
 80027f0:	2312      	movs	r3, #18
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d000      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x168>
 80027fa:	e069      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002820:	e056      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2202      	movs	r2, #2
 800282a:	4013      	ands	r3, r2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d11b      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x1d4>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_SPI_TransmitReceive+0x1d4>
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	2b01      	cmp	r3, #1
 800283e:	d113      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	881a      	ldrh	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	1c9a      	adds	r2, r3, #2
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2201      	movs	r2, #1
 8002870:	4013      	ands	r3, r2
 8002872:	2b01      	cmp	r3, #1
 8002874:	d11c      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x21c>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2246      	movs	r2, #70	; 0x46
 800287a:	5a9b      	ldrh	r3, [r3, r2]
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	b292      	uxth	r2, r2
 800288e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2246      	movs	r2, #70	; 0x46
 800289e:	5a9b      	ldrh	r3, [r3, r2]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b299      	uxth	r1, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2246      	movs	r2, #70	; 0x46
 80028aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028ac:	2301      	movs	r3, #1
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028b0:	f7fe fdfe 	bl	80014b0 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028bc:	429a      	cmp	r2, r3
 80028be:	d807      	bhi.n	80028d0 <HAL_SPI_TransmitReceive+0x23c>
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	3301      	adds	r3, #1
 80028c4:	d004      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80028c6:	2323      	movs	r3, #35	; 0x23
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2203      	movs	r2, #3
 80028cc:	701a      	strb	r2, [r3, #0]
        goto error;
 80028ce:	e0a2      	b.n	8002a16 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1a3      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x18e>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2246      	movs	r2, #70	; 0x46
 80028de:	5a9b      	ldrh	r3, [r3, r2]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d19d      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x18e>
 80028e6:	e085      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x268>
 80028f0:	2312      	movs	r3, #18
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d000      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x268>
 80028fa:	e070      	b.n	80029de <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002922:	e05c      	b.n	80029de <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d11c      	bne.n	800296c <HAL_SPI_TransmitReceive+0x2d8>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d017      	beq.n	800296c <HAL_SPI_TransmitReceive+0x2d8>
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	2b01      	cmp	r3, #1
 8002940:	d114      	bne.n	800296c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2201      	movs	r2, #1
 8002974:	4013      	ands	r3, r2
 8002976:	2b01      	cmp	r3, #1
 8002978:	d11e      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x324>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2246      	movs	r2, #70	; 0x46
 800297e:	5a9b      	ldrh	r3, [r3, r2]
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	001a      	movs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	7812      	ldrb	r2, [r2, #0]
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2246      	movs	r2, #70	; 0x46
 80029a6:	5a9b      	ldrh	r3, [r3, r2]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b299      	uxth	r1, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2246      	movs	r2, #70	; 0x46
 80029b2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029b4:	2301      	movs	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029b8:	f7fe fd7a 	bl	80014b0 <HAL_GetTick>
 80029bc:	0002      	movs	r2, r0
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d802      	bhi.n	80029ce <HAL_SPI_TransmitReceive+0x33a>
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	3301      	adds	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x340>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80029d4:	2323      	movs	r3, #35	; 0x23
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2203      	movs	r2, #3
 80029da:	701a      	strb	r2, [r3, #0]
        goto error;
 80029dc:	e01b      	b.n	8002a16 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d19d      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x290>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2246      	movs	r2, #70	; 0x46
 80029ec:	5a9b      	ldrh	r3, [r3, r2]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d197      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f94c 	bl	8002c98 <SPI_EndRxTxTransaction>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002a04:	2323      	movs	r3, #35	; 0x23
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	661a      	str	r2, [r3, #96]	; 0x60
 8002a12:	e000      	b.n	8002a16 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002a14:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	225d      	movs	r2, #93	; 0x5d
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	225c      	movs	r2, #92	; 0x5c
 8002a22:	2100      	movs	r1, #0
 8002a24:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a26:	2323      	movs	r3, #35	; 0x23
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b00a      	add	sp, #40	; 0x28
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	ffffefff 	.word	0xffffefff

08002a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a48:	f7fe fd32 	bl	80014b0 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a58:	f7fe fd2a 	bl	80014b0 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a60:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	015b      	lsls	r3, r3, #5
 8002a66:	0d1b      	lsrs	r3, r3, #20
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	4353      	muls	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6e:	e058      	b.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	d055      	beq.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a76:	f7fe fd1b 	bl	80014b0 <HAL_GetTick>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d902      	bls.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d142      	bne.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	21e0      	movs	r1, #224	; 0xe0
 8002a98:	438a      	bics	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	2382      	movs	r3, #130	; 0x82
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d113      	bne.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d005      	beq.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	438a      	bics	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	019b      	lsls	r3, r3, #6
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d110      	bne.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	491a      	ldr	r1, [pc, #104]	; (8002b50 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0189      	lsls	r1, r1, #6
 8002afa:	430a      	orrs	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	225d      	movs	r2, #93	; 0x5d
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	225c      	movs	r2, #92	; 0x5c
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e017      	b.n	8002b42 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	425a      	negs	r2, r3
 8002b32:	4153      	adcs	r3, r2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	001a      	movs	r2, r3
 8002b38:	1dfb      	adds	r3, r7, #7
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d197      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b008      	add	sp, #32
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	ffffdfff 	.word	0xffffdfff

08002b54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b62:	2317      	movs	r3, #23
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b6a:	f7fe fca1 	bl	80014b0 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	18d3      	adds	r3, r2, r3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002b7a:	f7fe fc99 	bl	80014b0 <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	0013      	movs	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	00da      	lsls	r2, r3, #3
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	0d1b      	lsrs	r3, r3, #20
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9c:	4353      	muls	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ba0:	e068      	b.n	8002c74 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	23c0      	movs	r3, #192	; 0xc0
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10a      	bne.n	8002bc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d107      	bne.n	8002bc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	2117      	movs	r1, #23
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	d055      	beq.n	8002c74 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bc8:	f7fe fc72 	bl	80014b0 <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d902      	bls.n	8002bde <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d142      	bne.n	8002c64 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	21e0      	movs	r1, #224	; 0xe0
 8002bea:	438a      	bics	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	2382      	movs	r3, #130	; 0x82
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d113      	bne.n	8002c22 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d005      	beq.n	8002c12 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d107      	bne.n	8002c22 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	; 0x40
 8002c1e:	438a      	bics	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d110      	bne.n	8002c50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4916      	ldr	r1, [pc, #88]	; (8002c94 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	0189      	lsls	r1, r1, #6
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	225d      	movs	r2, #93	; 0x5d
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	225c      	movs	r2, #92	; 0x5c
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e010      	b.n	8002c86 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d18e      	bne.n	8002ba2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b00a      	add	sp, #40	; 0x28
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	20000004 	.word	0x20000004
 8002c94:	ffffdfff 	.word	0xffffdfff

08002c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	23c0      	movs	r3, #192	; 0xc0
 8002ca8:	0159      	lsls	r1, r3, #5
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f7ff ff4e 	bl	8002b54 <SPI_WaitFifoStateUntilTimeout>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d007      	beq.n	8002ccc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e027      	b.n	8002d1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	f7ff fead 	bl	8002a38 <SPI_WaitFlagStateUntilTimeout>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d007      	beq.n	8002cf2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e014      	b.n	8002d1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	23c0      	movs	r3, #192	; 0xc0
 8002cf6:	00d9      	lsls	r1, r3, #3
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	0013      	movs	r3, r2
 8002d00:	2200      	movs	r2, #0
 8002d02:	f7ff ff27 	bl	8002b54 <SPI_WaitFifoStateUntilTimeout>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d007      	beq.n	8002d1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	2220      	movs	r2, #32
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e000      	b.n	8002d1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e044      	b.n	8002dc0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2274      	movs	r2, #116	; 0x74
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fe fa8f 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f8da 	bl	8002f20 <UART_SetConfig>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e024      	b.n	8002dc0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 fa25 	bl	80031d0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <HAL_UART_Init+0xa4>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2108      	movs	r1, #8
 8002da2:	438a      	bics	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 fabd 	bl	8003338 <UART_CheckIdleState>
 8002dbe:	0003      	movs	r3, r0
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	fffff7ff 	.word	0xfffff7ff

08002dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d000      	beq.n	8002de6 <HAL_UART_Transmit+0x1a>
 8002de4:	e096      	b.n	8002f14 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_UART_Transmit+0x28>
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e08e      	b.n	8002f16 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	015b      	lsls	r3, r3, #5
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d109      	bne.n	8002e18 <HAL_UART_Transmit+0x4c>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e07e      	b.n	8002f16 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2274      	movs	r2, #116	; 0x74
 8002e1c:	5c9b      	ldrb	r3, [r3, r2]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Transmit+0x5a>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e077      	b.n	8002f16 <HAL_UART_Transmit+0x14a>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2274      	movs	r2, #116	; 0x74
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	2100      	movs	r1, #0
 8002e34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2221      	movs	r2, #33	; 0x21
 8002e3a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fb38 	bl	80014b0 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1dba      	adds	r2, r7, #6
 8002e48:	2150      	movs	r1, #80	; 0x50
 8002e4a:	8812      	ldrh	r2, [r2, #0]
 8002e4c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1dba      	adds	r2, r7, #6
 8002e52:	2152      	movs	r1, #82	; 0x52
 8002e54:	8812      	ldrh	r2, [r2, #0]
 8002e56:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d108      	bne.n	8002e76 <HAL_UART_Transmit+0xaa>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e003      	b.n	8002e7e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2274      	movs	r2, #116	; 0x74
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002e86:	e02d      	b.n	8002ee4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	0013      	movs	r3, r2
 8002e92:	2200      	movs	r2, #0
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	f000 fa97 	bl	80033c8 <UART_WaitOnFlagUntilTimeout>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e039      	b.n	8002f16 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	05d2      	lsls	r2, r2, #23
 8002eb2:	0dd2      	lsrs	r2, r2, #23
 8002eb4:	b292      	uxth	r2, r2
 8002eb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	3302      	adds	r3, #2
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e008      	b.n	8002ed2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2252      	movs	r2, #82	; 0x52
 8002ed6:	5a9b      	ldrh	r3, [r3, r2]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b299      	uxth	r1, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2252      	movs	r2, #82	; 0x52
 8002ee2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2252      	movs	r2, #82	; 0x52
 8002ee8:	5a9b      	ldrh	r3, [r3, r2]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1cb      	bne.n	8002e88 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	0013      	movs	r3, r2
 8002efa:	2200      	movs	r2, #0
 8002efc:	2140      	movs	r1, #64	; 0x40
 8002efe:	f000 fa63 	bl	80033c8 <UART_WaitOnFlagUntilTimeout>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e005      	b.n	8002f16 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b008      	add	sp, #32
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f28:	231e      	movs	r3, #30
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a97      	ldr	r2, [pc, #604]	; (80031ac <UART_SetConfig+0x28c>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a92      	ldr	r2, [pc, #584]	; (80031b0 <UART_SetConfig+0x290>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a89      	ldr	r2, [pc, #548]	; (80031b4 <UART_SetConfig+0x294>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a85      	ldr	r2, [pc, #532]	; (80031b8 <UART_SetConfig+0x298>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d127      	bne.n	8002ff6 <UART_SetConfig+0xd6>
 8002fa6:	4b85      	ldr	r3, [pc, #532]	; (80031bc <UART_SetConfig+0x29c>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	2203      	movs	r2, #3
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d00d      	beq.n	8002fce <UART_SetConfig+0xae>
 8002fb2:	d81b      	bhi.n	8002fec <UART_SetConfig+0xcc>
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d014      	beq.n	8002fe2 <UART_SetConfig+0xc2>
 8002fb8:	d818      	bhi.n	8002fec <UART_SetConfig+0xcc>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <UART_SetConfig+0xa4>
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d00a      	beq.n	8002fd8 <UART_SetConfig+0xb8>
 8002fc2:	e013      	b.n	8002fec <UART_SetConfig+0xcc>
 8002fc4:	231f      	movs	r3, #31
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e035      	b.n	800303a <UART_SetConfig+0x11a>
 8002fce:	231f      	movs	r3, #31
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e030      	b.n	800303a <UART_SetConfig+0x11a>
 8002fd8:	231f      	movs	r3, #31
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2204      	movs	r2, #4
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e02b      	b.n	800303a <UART_SetConfig+0x11a>
 8002fe2:	231f      	movs	r3, #31
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e026      	b.n	800303a <UART_SetConfig+0x11a>
 8002fec:	231f      	movs	r3, #31
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e021      	b.n	800303a <UART_SetConfig+0x11a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a71      	ldr	r2, [pc, #452]	; (80031c0 <UART_SetConfig+0x2a0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d104      	bne.n	800300a <UART_SetConfig+0xea>
 8003000:	231f      	movs	r3, #31
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e017      	b.n	800303a <UART_SetConfig+0x11a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6d      	ldr	r2, [pc, #436]	; (80031c4 <UART_SetConfig+0x2a4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d104      	bne.n	800301e <UART_SetConfig+0xfe>
 8003014:	231f      	movs	r3, #31
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e00d      	b.n	800303a <UART_SetConfig+0x11a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <UART_SetConfig+0x2a8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d104      	bne.n	8003032 <UART_SetConfig+0x112>
 8003028:	231f      	movs	r3, #31
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e003      	b.n	800303a <UART_SetConfig+0x11a>
 8003032:	231f      	movs	r3, #31
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2210      	movs	r2, #16
 8003038:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	429a      	cmp	r2, r3
 8003044:	d15d      	bne.n	8003102 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8003046:	231f      	movs	r3, #31
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d015      	beq.n	800307c <UART_SetConfig+0x15c>
 8003050:	dc18      	bgt.n	8003084 <UART_SetConfig+0x164>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d00d      	beq.n	8003072 <UART_SetConfig+0x152>
 8003056:	dc15      	bgt.n	8003084 <UART_SetConfig+0x164>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <UART_SetConfig+0x142>
 800305c:	2b02      	cmp	r3, #2
 800305e:	d005      	beq.n	800306c <UART_SetConfig+0x14c>
 8003060:	e010      	b.n	8003084 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003062:	f7ff f8f1 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8003066:	0003      	movs	r3, r0
 8003068:	61bb      	str	r3, [r7, #24]
        break;
 800306a:	e012      	b.n	8003092 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800306c:	4b57      	ldr	r3, [pc, #348]	; (80031cc <UART_SetConfig+0x2ac>)
 800306e:	61bb      	str	r3, [r7, #24]
        break;
 8003070:	e00f      	b.n	8003092 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003072:	f7ff f879 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]
        break;
 800307a:	e00a      	b.n	8003092 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	61bb      	str	r3, [r7, #24]
        break;
 8003082:	e006      	b.n	8003092 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003088:	231e      	movs	r3, #30
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
        break;
 8003090:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d100      	bne.n	800309a <UART_SetConfig+0x17a>
 8003098:	e07b      	b.n	8003192 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	005a      	lsls	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	18d2      	adds	r2, r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0019      	movs	r1, r3
 80030ac:	0010      	movs	r0, r2
 80030ae:	f7fd f833 	bl	8000118 <__udivsi3>
 80030b2:	0003      	movs	r3, r0
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d91c      	bls.n	80030f8 <UART_SetConfig+0x1d8>
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	025b      	lsls	r3, r3, #9
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d217      	bcs.n	80030f8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	200e      	movs	r0, #14
 80030ce:	183b      	adds	r3, r7, r0
 80030d0:	210f      	movs	r1, #15
 80030d2:	438a      	bics	r2, r1
 80030d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2207      	movs	r2, #7
 80030de:	4013      	ands	r3, r2
 80030e0:	b299      	uxth	r1, r3
 80030e2:	183b      	adds	r3, r7, r0
 80030e4:	183a      	adds	r2, r7, r0
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	183a      	adds	r2, r7, r0
 80030f2:	8812      	ldrh	r2, [r2, #0]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	e04c      	b.n	8003192 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80030f8:	231e      	movs	r3, #30
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e047      	b.n	8003192 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003102:	231f      	movs	r3, #31
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d015      	beq.n	8003138 <UART_SetConfig+0x218>
 800310c:	dc18      	bgt.n	8003140 <UART_SetConfig+0x220>
 800310e:	2b04      	cmp	r3, #4
 8003110:	d00d      	beq.n	800312e <UART_SetConfig+0x20e>
 8003112:	dc15      	bgt.n	8003140 <UART_SetConfig+0x220>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <UART_SetConfig+0x1fe>
 8003118:	2b02      	cmp	r3, #2
 800311a:	d005      	beq.n	8003128 <UART_SetConfig+0x208>
 800311c:	e010      	b.n	8003140 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800311e:	f7ff f893 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8003122:	0003      	movs	r3, r0
 8003124:	61bb      	str	r3, [r7, #24]
        break;
 8003126:	e012      	b.n	800314e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <UART_SetConfig+0x2ac>)
 800312a:	61bb      	str	r3, [r7, #24]
        break;
 800312c:	e00f      	b.n	800314e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312e:	f7ff f81b 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8003132:	0003      	movs	r3, r0
 8003134:	61bb      	str	r3, [r7, #24]
        break;
 8003136:	e00a      	b.n	800314e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	61bb      	str	r3, [r7, #24]
        break;
 800313e:	e006      	b.n	800314e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003144:	231e      	movs	r3, #30
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
        break;
 800314c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01e      	beq.n	8003192 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	085a      	lsrs	r2, r3, #1
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	18d2      	adds	r2, r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0019      	movs	r1, r3
 8003164:	0010      	movs	r0, r2
 8003166:	f7fc ffd7 	bl	8000118 <__udivsi3>
 800316a:	0003      	movs	r3, r0
 800316c:	b29b      	uxth	r3, r3
 800316e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	d909      	bls.n	800318a <UART_SetConfig+0x26a>
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	025b      	lsls	r3, r3, #9
 800317c:	429a      	cmp	r2, r3
 800317e:	d204      	bcs.n	800318a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	e003      	b.n	8003192 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800318a:	231e      	movs	r3, #30
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800319e:	231e      	movs	r3, #30
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	781b      	ldrb	r3, [r3, #0]
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b008      	add	sp, #32
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	efff69f3 	.word	0xefff69f3
 80031b0:	ffffcfff 	.word	0xffffcfff
 80031b4:	fffff4ff 	.word	0xfffff4ff
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40004400 	.word	0x40004400
 80031c4:	40004800 	.word	0x40004800
 80031c8:	40004c00 	.word	0x40004c00
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2201      	movs	r2, #1
 80031de:	4013      	ands	r3, r2
 80031e0:	d00b      	beq.n	80031fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <UART_AdvFeatureConfig+0x144>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2202      	movs	r2, #2
 8003200:	4013      	ands	r3, r2
 8003202:	d00b      	beq.n	800321c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a43      	ldr	r2, [pc, #268]	; (8003318 <UART_AdvFeatureConfig+0x148>)
 800320c:	4013      	ands	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	d00b      	beq.n	800323e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a3b      	ldr	r2, [pc, #236]	; (800331c <UART_AdvFeatureConfig+0x14c>)
 800322e:	4013      	ands	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2208      	movs	r2, #8
 8003244:	4013      	ands	r3, r2
 8003246:	d00b      	beq.n	8003260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4a34      	ldr	r2, [pc, #208]	; (8003320 <UART_AdvFeatureConfig+0x150>)
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2210      	movs	r2, #16
 8003266:	4013      	ands	r3, r2
 8003268:	d00b      	beq.n	8003282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <UART_AdvFeatureConfig+0x154>)
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2220      	movs	r2, #32
 8003288:	4013      	ands	r3, r2
 800328a:	d00b      	beq.n	80032a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4a25      	ldr	r2, [pc, #148]	; (8003328 <UART_AdvFeatureConfig+0x158>)
 8003294:	4013      	ands	r3, r2
 8003296:	0019      	movs	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2240      	movs	r2, #64	; 0x40
 80032aa:	4013      	ands	r3, r2
 80032ac:	d01d      	beq.n	80032ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <UART_AdvFeatureConfig+0x15c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	035b      	lsls	r3, r3, #13
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10b      	bne.n	80032ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a15      	ldr	r2, [pc, #84]	; (8003330 <UART_AdvFeatureConfig+0x160>)
 80032da:	4013      	ands	r3, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	4013      	ands	r3, r2
 80032f2:	d00b      	beq.n	800330c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <UART_AdvFeatureConfig+0x164>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}
 8003314:	fffdffff 	.word	0xfffdffff
 8003318:	fffeffff 	.word	0xfffeffff
 800331c:	fffbffff 	.word	0xfffbffff
 8003320:	ffff7fff 	.word	0xffff7fff
 8003324:	ffffefff 	.word	0xffffefff
 8003328:	ffffdfff 	.word	0xffffdfff
 800332c:	ffefffff 	.word	0xffefffff
 8003330:	ff9fffff 	.word	0xff9fffff
 8003334:	fff7ffff 	.word	0xfff7ffff

08003338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af02      	add	r7, sp, #8
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	2100      	movs	r1, #0
 8003346:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003348:	f7fe f8b2 	bl	80014b0 <HAL_GetTick>
 800334c:	0003      	movs	r3, r0
 800334e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2208      	movs	r2, #8
 8003358:	4013      	ands	r3, r2
 800335a:	2b08      	cmp	r3, #8
 800335c:	d10c      	bne.n	8003378 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2280      	movs	r2, #128	; 0x80
 8003362:	0391      	lsls	r1, r2, #14
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <UART_CheckIdleState+0x8c>)
 8003368:	9200      	str	r2, [sp, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	f000 f82c 	bl	80033c8 <UART_WaitOnFlagUntilTimeout>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d001      	beq.n	8003378 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e021      	b.n	80033bc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2204      	movs	r2, #4
 8003380:	4013      	ands	r3, r2
 8003382:	2b04      	cmp	r3, #4
 8003384:	d10c      	bne.n	80033a0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	03d1      	lsls	r1, r2, #15
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <UART_CheckIdleState+0x8c>)
 8003390:	9200      	str	r2, [sp, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	f000 f818 	bl	80033c8 <UART_WaitOnFlagUntilTimeout>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d001      	beq.n	80033a0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e00d      	b.n	80033bc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2274      	movs	r2, #116	; 0x74
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b004      	add	sp, #16
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	01ffffff 	.word	0x01ffffff

080033c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b094      	sub	sp, #80	; 0x50
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d8:	e0a3      	b.n	8003522 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033dc:	3301      	adds	r3, #1
 80033de:	d100      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80033e0:	e09f      	b.n	8003522 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe f865 	bl	80014b0 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d13d      	bne.n	8003474 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f8:	f3ef 8310 	mrs	r3, PRIMASK
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003400:	647b      	str	r3, [r7, #68]	; 0x44
 8003402:	2301      	movs	r3, #1
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	494c      	ldr	r1, [pc, #304]	; (800354c <UART_WaitOnFlagUntilTimeout+0x184>)
 800341a:	400a      	ands	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	f383 8810 	msr	PRIMASK, r3
}
 8003428:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003432:	643b      	str	r3, [r7, #64]	; 0x40
 8003434:	2301      	movs	r3, #1
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	438a      	bics	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2274      	movs	r2, #116	; 0x74
 800346c:	2100      	movs	r1, #0
 800346e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e067      	b.n	8003544 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2204      	movs	r2, #4
 800347c:	4013      	ands	r3, r2
 800347e:	d050      	beq.n	8003522 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	401a      	ands	r2, r3
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	429a      	cmp	r2, r3
 8003492:	d146      	bne.n	8003522 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	613b      	str	r3, [r7, #16]
  return(result);
 80034a4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	2301      	movs	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4923      	ldr	r1, [pc, #140]	; (800354c <UART_WaitOnFlagUntilTimeout+0x184>)
 80034c0:	400a      	ands	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d0:	f3ef 8310 	mrs	r3, PRIMASK
 80034d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80034d6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034da:	2301      	movs	r3, #1
 80034dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	438a      	bics	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f383 8810 	msr	PRIMASK, r3
}
 8003500:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	2120      	movs	r1, #32
 8003514:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2274      	movs	r2, #116	; 0x74
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e010      	b.n	8003544 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	425a      	negs	r2, r3
 8003532:	4153      	adcs	r3, r2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	001a      	movs	r2, r3
 8003538:	1dfb      	adds	r3, r7, #7
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d100      	bne.n	8003542 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003540:	e74b      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b014      	add	sp, #80	; 0x50
 800354a:	bd80      	pop	{r7, pc}
 800354c:	fffffe5f 	.word	0xfffffe5f

08003550 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003554:	4a06      	ldr	r2, [pc, #24]	; (8003570 <MX_FATFS_Init+0x20>)
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <MX_FATFS_Init+0x24>)
 8003558:	0011      	movs	r1, r2
 800355a:	0018      	movs	r0, r3
 800355c:	f003 febe 	bl	80072dc <FATFS_LinkDriver>
 8003560:	0003      	movs	r3, r0
 8003562:	001a      	movs	r2, r3
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <MX_FATFS_Init+0x28>)
 8003566:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20002224 	.word	0x20002224
 8003574:	20000010 	.word	0x20000010
 8003578:	20002220 	.word	0x20002220

0800357c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003580:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	0002      	movs	r2, r0
 8003590:	1dfb      	adds	r3, r7, #7
 8003592:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	0018      	movs	r0, r3
 800359a:	f7fd f839 	bl	8000610 <SD_disk_initialize>
 800359e:	0003      	movs	r3, r0
 80035a0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}

080035aa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	0002      	movs	r2, r0
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd f936 	bl	800082c <SD_disk_status>
 80035c0:	0003      	movs	r3, r0
 80035c2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	210f      	movs	r1, #15
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	1c02      	adds	r2, r0, #0
 80035de:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	7818      	ldrb	r0, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	f7fd f935 	bl	8000858 <SD_disk_read>
 80035ee:	0003      	movs	r3, r0
 80035f0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b004      	add	sp, #16
 80035f8:	bd80      	pop	{r7, pc}

080035fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	210f      	movs	r1, #15
 8003608:	187b      	adds	r3, r7, r1
 800360a:	1c02      	adds	r2, r0, #0
 800360c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800360e:	187b      	adds	r3, r7, r1
 8003610:	7818      	ldrb	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	f7fd f98e 	bl	8000938 <SD_disk_write>
 800361c:	0003      	movs	r3, r0
 800361e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b004      	add	sp, #16
 8003626:	bd80      	pop	{r7, pc}

08003628 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	603a      	str	r2, [r7, #0]
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	1c02      	adds	r2, r0, #0
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	1dbb      	adds	r3, r7, #6
 8003638:	1c0a      	adds	r2, r1, #0
 800363a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	7818      	ldrb	r0, [r3, #0]
 8003640:	1dbb      	adds	r3, r7, #6
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	0019      	movs	r1, r3
 8003648:	f7fd f9fe 	bl	8000a48 <SD_disk_ioctl>
 800364c:	0003      	movs	r3, r0
 800364e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	0002      	movs	r2, r0
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <disk_status+0x40>)
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	3304      	adds	r3, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	1dfa      	adds	r2, r7, #7
 8003676:	7812      	ldrb	r2, [r2, #0]
 8003678:	4907      	ldr	r1, [pc, #28]	; (8003698 <disk_status+0x40>)
 800367a:	188a      	adds	r2, r1, r2
 800367c:	7a12      	ldrb	r2, [r2, #8]
 800367e:	250f      	movs	r5, #15
 8003680:	197c      	adds	r4, r7, r5
 8003682:	0010      	movs	r0, r2
 8003684:	4798      	blx	r3
 8003686:	0003      	movs	r3, r0
 8003688:	7023      	strb	r3, [r4, #0]
  return stat;
 800368a:	197b      	adds	r3, r7, r5
 800368c:	781b      	ldrb	r3, [r3, #0]
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b004      	add	sp, #16
 8003694:	bdb0      	pop	{r4, r5, r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	20002448 	.word	0x20002448

0800369c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	0002      	movs	r2, r0
 80036a4:	1dfb      	adds	r3, r7, #7
 80036a6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80036a8:	200f      	movs	r0, #15
 80036aa:	183b      	adds	r3, r7, r0
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <disk_initialize+0x5c>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d116      	bne.n	80036ea <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <disk_initialize+0x5c>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80036c6:	1dfb      	adds	r3, r7, #7
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <disk_initialize+0x5c>)
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	18d3      	adds	r3, r2, r3
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	1dfa      	adds	r2, r7, #7
 80036d8:	7812      	ldrb	r2, [r2, #0]
 80036da:	4907      	ldr	r1, [pc, #28]	; (80036f8 <disk_initialize+0x5c>)
 80036dc:	188a      	adds	r2, r1, r2
 80036de:	7a12      	ldrb	r2, [r2, #8]
 80036e0:	183c      	adds	r4, r7, r0
 80036e2:	0010      	movs	r0, r2
 80036e4:	4798      	blx	r3
 80036e6:	0003      	movs	r3, r0
 80036e8:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80036ea:	230f      	movs	r3, #15
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	781b      	ldrb	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b005      	add	sp, #20
 80036f6:	bd90      	pop	{r4, r7, pc}
 80036f8:	20002448 	.word	0x20002448

080036fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80036fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	210f      	movs	r1, #15
 800370a:	187b      	adds	r3, r7, r1
 800370c:	1c02      	adds	r2, r0, #0
 800370e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003710:	187b      	adds	r3, r7, r1
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <disk_read+0x4c>)
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	3304      	adds	r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689d      	ldr	r5, [r3, #8]
 8003720:	187b      	adds	r3, r7, r1
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4a08      	ldr	r2, [pc, #32]	; (8003748 <disk_read+0x4c>)
 8003726:	18d3      	adds	r3, r2, r3
 8003728:	7a18      	ldrb	r0, [r3, #8]
 800372a:	2617      	movs	r6, #23
 800372c:	19bc      	adds	r4, r7, r6
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	47a8      	blx	r5
 8003736:	0003      	movs	r3, r0
 8003738:	7023      	strb	r3, [r4, #0]
  return res;
 800373a:	19bb      	adds	r3, r7, r6
 800373c:	781b      	ldrb	r3, [r3, #0]
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b007      	add	sp, #28
 8003744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	20002448 	.word	0x20002448

0800374c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	210f      	movs	r1, #15
 800375a:	187b      	adds	r3, r7, r1
 800375c:	1c02      	adds	r2, r0, #0
 800375e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003760:	187b      	adds	r3, r7, r1
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <disk_write+0x4c>)
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	3304      	adds	r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68dd      	ldr	r5, [r3, #12]
 8003770:	187b      	adds	r3, r7, r1
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4a08      	ldr	r2, [pc, #32]	; (8003798 <disk_write+0x4c>)
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	7a18      	ldrb	r0, [r3, #8]
 800377a:	2617      	movs	r6, #23
 800377c:	19bc      	adds	r4, r7, r6
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	47a8      	blx	r5
 8003786:	0003      	movs	r3, r0
 8003788:	7023      	strb	r3, [r4, #0]
  return res;
 800378a:	19bb      	adds	r3, r7, r6
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b007      	add	sp, #28
 8003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	20002448 	.word	0x20002448

0800379c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800379c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	603a      	str	r2, [r7, #0]
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	1c02      	adds	r2, r0, #0
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	1c0a      	adds	r2, r1, #0
 80037ae:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <disk_ioctl+0x4c>)
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	18d3      	adds	r3, r2, r3
 80037ba:	3304      	adds	r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	1dfa      	adds	r2, r7, #7
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	4908      	ldr	r1, [pc, #32]	; (80037e8 <disk_ioctl+0x4c>)
 80037c6:	188a      	adds	r2, r1, r2
 80037c8:	7a10      	ldrb	r0, [r2, #8]
 80037ca:	260f      	movs	r6, #15
 80037cc:	19bc      	adds	r4, r7, r6
 80037ce:	683d      	ldr	r5, [r7, #0]
 80037d0:	1dba      	adds	r2, r7, #6
 80037d2:	7811      	ldrb	r1, [r2, #0]
 80037d4:	002a      	movs	r2, r5
 80037d6:	4798      	blx	r3
 80037d8:	0003      	movs	r3, r0
 80037da:	7023      	strb	r3, [r4, #0]
  return res;
 80037dc:	19bb      	adds	r3, r7, r6
 80037de:	781b      	ldrb	r3, [r3, #0]
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b005      	add	sp, #20
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e8:	20002448 	.word	0x20002448

080037ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003800:	e007      	b.n	8003812 <mem_cpy+0x26>
		*d++ = *s++;
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	1c53      	adds	r3, r2, #1
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	6179      	str	r1, [r7, #20]
 800380e:	7812      	ldrb	r2, [r2, #0]
 8003810:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f2      	bne.n	8003802 <mem_cpy+0x16>
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b006      	add	sp, #24
 8003824:	bd80      	pop	{r7, pc}

08003826 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003826:	b580      	push	{r7, lr}
 8003828:	b086      	sub	sp, #24
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003836:	e005      	b.n	8003844 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	617a      	str	r2, [r7, #20]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1e5a      	subs	r2, r3, #1
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f4      	bne.n	8003838 <mem_set+0x12>
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}

08003858 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	1e5a      	subs	r2, r3, #1
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <mem_cmp+0x40>
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	61fa      	str	r2, [r7, #28]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	0019      	movs	r1, r3
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	61ba      	str	r2, [r7, #24]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	1acb      	subs	r3, r1, r3
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ec      	beq.n	8003872 <mem_cmp+0x1a>
	return r;
 8003898:	697b      	ldr	r3, [r7, #20]
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b008      	add	sp, #32
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80038ac:	e002      	b.n	80038b4 <chk_chr+0x12>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3301      	adds	r3, #1
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <chk_chr+0x26>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	001a      	movs	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d1f2      	bne.n	80038ae <chk_chr+0xc>
	return *str;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e037      	b.n	8003958 <chk_lock+0x84>
		if (Files[i].fs) {	/* Existing entry */
 80038e8:	492f      	ldr	r1, [pc, #188]	; (80039a8 <chk_lock+0xd4>)
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	0013      	movs	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	189b      	adds	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	585b      	ldr	r3, [r3, r1]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d029      	beq.n	800394e <chk_lock+0x7a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80038fa:	492b      	ldr	r1, [pc, #172]	; (80039a8 <chk_lock+0xd4>)
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	0013      	movs	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	189b      	adds	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	585a      	ldr	r2, [r3, r1]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	015b      	lsls	r3, r3, #5
 800390e:	58cb      	ldr	r3, [r1, r3]
 8003910:	429a      	cmp	r2, r3
 8003912:	d11e      	bne.n	8003952 <chk_lock+0x7e>
				Files[i].clu == dp->sclust &&
 8003914:	4924      	ldr	r1, [pc, #144]	; (80039a8 <chk_lock+0xd4>)
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	0013      	movs	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	189b      	adds	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	18cb      	adds	r3, r1, r3
 8003922:	3304      	adds	r3, #4
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4920      	ldr	r1, [pc, #128]	; (80039ac <chk_lock+0xd8>)
 800392a:	585b      	ldr	r3, [r3, r1]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800392c:	429a      	cmp	r2, r3
 800392e:	d110      	bne.n	8003952 <chk_lock+0x7e>
				Files[i].idx == dp->index) break;
 8003930:	491d      	ldr	r1, [pc, #116]	; (80039a8 <chk_lock+0xd4>)
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	0013      	movs	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	189b      	adds	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	18cb      	adds	r3, r1, r3
 800393e:	3308      	adds	r3, #8
 8003940:	881a      	ldrh	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	491a      	ldr	r1, [pc, #104]	; (80039b0 <chk_lock+0xdc>)
 8003946:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8003948:	429a      	cmp	r2, r3
 800394a:	d102      	bne.n	8003952 <chk_lock+0x7e>
				Files[i].idx == dp->index) break;
 800394c:	e007      	b.n	800395e <chk_lock+0x8a>
		} else {			/* Blank entry */
			be = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d9c4      	bls.n	80038e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d109      	bne.n	8003978 <chk_lock+0xa4>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <chk_lock+0x9c>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d101      	bne.n	8003974 <chk_lock+0xa0>
 8003970:	2300      	movs	r3, #0
 8003972:	e014      	b.n	800399e <chk_lock+0xca>
 8003974:	2312      	movs	r3, #18
 8003976:	e012      	b.n	800399e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <chk_lock+0xc4>
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <chk_lock+0xd4>)
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	0013      	movs	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	189b      	adds	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	18cb      	adds	r3, r1, r3
 800398c:	330a      	adds	r3, #10
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	429a      	cmp	r2, r3
 8003996:	d101      	bne.n	800399c <chk_lock+0xc8>
 8003998:	2310      	movs	r3, #16
 800399a:	e000      	b.n	800399e <chk_lock+0xca>
 800399c:	2300      	movs	r3, #0
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	20002230 	.word	0x20002230
 80039ac:	00001008 	.word	0x00001008
 80039b0:	00001006 	.word	0x00001006

080039b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	e002      	b.n	80039c6 <enq_lock+0x12>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3301      	adds	r3, #1
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d808      	bhi.n	80039de <enq_lock+0x2a>
 80039cc:	4908      	ldr	r1, [pc, #32]	; (80039f0 <enq_lock+0x3c>)
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	0013      	movs	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	189b      	adds	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	585b      	ldr	r3, [r3, r1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3b02      	subs	r3, #2
 80039e2:	1e5a      	subs	r2, r3, #1
 80039e4:	4193      	sbcs	r3, r2
 80039e6:	b2db      	uxtb	r3, r3
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20002230 	.word	0x20002230

080039f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e02b      	b.n	8003a5c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8003a04:	4954      	ldr	r1, [pc, #336]	; (8003b58 <inc_lock+0x164>)
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	0013      	movs	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	189b      	adds	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	585a      	ldr	r2, [r3, r1]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	015b      	lsls	r3, r3, #5
 8003a18:	58cb      	ldr	r3, [r1, r3]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d11b      	bne.n	8003a56 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8003a1e:	494e      	ldr	r1, [pc, #312]	; (8003b58 <inc_lock+0x164>)
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	0013      	movs	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18cb      	adds	r3, r1, r3
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	494a      	ldr	r1, [pc, #296]	; (8003b5c <inc_lock+0x168>)
 8003a34:	585b      	ldr	r3, [r3, r1]
		if (Files[i].fs == dp->fs &&
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d10d      	bne.n	8003a56 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8003a3a:	4947      	ldr	r1, [pc, #284]	; (8003b58 <inc_lock+0x164>)
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	0013      	movs	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	18cb      	adds	r3, r1, r3
 8003a48:	3308      	adds	r3, #8
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4944      	ldr	r1, [pc, #272]	; (8003b60 <inc_lock+0x16c>)
 8003a50:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d006      	beq.n	8003a64 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d9d0      	bls.n	8003a04 <inc_lock+0x10>
 8003a62:	e000      	b.n	8003a66 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8003a64:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d144      	bne.n	8003af6 <inc_lock+0x102>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e002      	b.n	8003a78 <inc_lock+0x84>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d808      	bhi.n	8003a90 <inc_lock+0x9c>
 8003a7e:	4936      	ldr	r1, [pc, #216]	; (8003b58 <inc_lock+0x164>)
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	0013      	movs	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	585b      	ldr	r3, [r3, r1]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d101      	bne.n	8003a9a <inc_lock+0xa6>
 8003a96:	2300      	movs	r3, #0
 8003a98:	e059      	b.n	8003b4e <inc_lock+0x15a>
		Files[i].fs = dp->fs;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	015b      	lsls	r3, r3, #5
 8003aa0:	58d0      	ldr	r0, [r2, r3]
 8003aa2:	492d      	ldr	r1, [pc, #180]	; (8003b58 <inc_lock+0x164>)
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	0013      	movs	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	189b      	adds	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a2a      	ldr	r2, [pc, #168]	; (8003b5c <inc_lock+0x168>)
 8003ab4:	5899      	ldr	r1, [r3, r2]
 8003ab6:	4828      	ldr	r0, [pc, #160]	; (8003b58 <inc_lock+0x164>)
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	0013      	movs	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	18c3      	adds	r3, r0, r3
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <inc_lock+0x16c>)
 8003acc:	5a98      	ldrh	r0, [r3, r2]
 8003ace:	4922      	ldr	r1, [pc, #136]	; (8003b58 <inc_lock+0x164>)
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	18cb      	adds	r3, r1, r3
 8003adc:	3308      	adds	r3, #8
 8003ade:	1c02      	adds	r2, r0, #0
 8003ae0:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003ae2:	491d      	ldr	r1, [pc, #116]	; (8003b58 <inc_lock+0x164>)
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	0013      	movs	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	18cb      	adds	r3, r1, r3
 8003af0:	330a      	adds	r3, #10
 8003af2:	2200      	movs	r2, #0
 8003af4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <inc_lock+0x122>
 8003afc:	4916      	ldr	r1, [pc, #88]	; (8003b58 <inc_lock+0x164>)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	0013      	movs	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	189b      	adds	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	18cb      	adds	r3, r1, r3
 8003b0a:	330a      	adds	r3, #10
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <inc_lock+0x122>
 8003b12:	2300      	movs	r3, #0
 8003b14:	e01b      	b.n	8003b4e <inc_lock+0x15a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <inc_lock+0x140>
 8003b1c:	490e      	ldr	r1, [pc, #56]	; (8003b58 <inc_lock+0x164>)
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	0013      	movs	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	18cb      	adds	r3, r1, r3
 8003b2a:	330a      	adds	r3, #10
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	e001      	b.n	8003b38 <inc_lock+0x144>
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	005a      	lsls	r2, r3, #1
 8003b38:	4807      	ldr	r0, [pc, #28]	; (8003b58 <inc_lock+0x164>)
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	000b      	movs	r3, r1
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	185b      	adds	r3, r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	18c3      	adds	r3, r0, r3
 8003b46:	330a      	adds	r3, #10
 8003b48:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3301      	adds	r3, #1
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	20002230 	.word	0x20002230
 8003b5c:	00001008 	.word	0x00001008
 8003b60:	00001006 	.word	0x00001006

08003b64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d83b      	bhi.n	8003bf0 <dec_lock+0x8c>
		n = Files[i].ctr;
 8003b78:	240e      	movs	r4, #14
 8003b7a:	1939      	adds	r1, r7, r4
 8003b7c:	4822      	ldr	r0, [pc, #136]	; (8003c08 <dec_lock+0xa4>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	0013      	movs	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	189b      	adds	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	18c3      	adds	r3, r0, r3
 8003b8a:	330a      	adds	r3, #10
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003b90:	193b      	adds	r3, r7, r4
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d102      	bne.n	8003ba2 <dec_lock+0x3e>
 8003b9c:	193b      	adds	r3, r7, r4
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8003ba2:	210e      	movs	r1, #14
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <dec_lock+0x52>
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	881a      	ldrh	r2, [r3, #0]
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	3a01      	subs	r2, #1
 8003bb4:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8003bb6:	4914      	ldr	r1, [pc, #80]	; (8003c08 <dec_lock+0xa4>)
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	0013      	movs	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	18cb      	adds	r3, r1, r3
 8003bc4:	330a      	adds	r3, #10
 8003bc6:	210e      	movs	r1, #14
 8003bc8:	187a      	adds	r2, r7, r1
 8003bca:	8812      	ldrh	r2, [r2, #0]
 8003bcc:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d107      	bne.n	8003be6 <dec_lock+0x82>
 8003bd6:	490c      	ldr	r1, [pc, #48]	; (8003c08 <dec_lock+0xa4>)
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	0013      	movs	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	189b      	adds	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	2200      	movs	r2, #0
 8003be4:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8003be6:	230d      	movs	r3, #13
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e003      	b.n	8003bf8 <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003bf0:	230d      	movs	r3, #13
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8003bf8:	230d      	movs	r3, #13
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	781b      	ldrb	r3, [r3, #0]
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b005      	add	sp, #20
 8003c04:	bd90      	pop	{r4, r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	20002230 	.word	0x20002230

08003c0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e014      	b.n	8003c44 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003c1a:	490e      	ldr	r1, [pc, #56]	; (8003c54 <clear_lock+0x48>)
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	0013      	movs	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	585b      	ldr	r3, [r3, r1]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d107      	bne.n	8003c3e <clear_lock+0x32>
 8003c2e:	4909      	ldr	r1, [pc, #36]	; (8003c54 <clear_lock+0x48>)
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	0013      	movs	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3301      	adds	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d9e7      	bls.n	8003c1a <clear_lock+0xe>
	}
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b004      	add	sp, #16
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20002230 	.word	0x20002230

08003c58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003c60:	240f      	movs	r4, #15
 8003c62:	193b      	adds	r3, r7, r4
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <sync_window+0x9c>)
 8003c6c:	5c9b      	ldrb	r3, [r3, r2]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d039      	beq.n	8003ce6 <sync_window+0x8e>
		wsect = fs->winsect;	/* Current sector number */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <sync_window+0xa0>)
 8003c76:	589b      	ldr	r3, [r3, r2]
 8003c78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <sync_window+0xa4>)
 8003c7e:	5c98      	ldrb	r0, [r3, r2]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	2301      	movs	r3, #1
 8003c86:	f7ff fd61 	bl	800374c <disk_write>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d003      	beq.n	8003c96 <sync_window+0x3e>
			res = FR_DISK_ERR;
 8003c8e:	193b      	adds	r3, r7, r4
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e027      	b.n	8003ce6 <sync_window+0x8e>
		} else {
			fs->wflag = 0;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <sync_window+0x9c>)
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	5499      	strb	r1, [r3, r2]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	2381      	movs	r3, #129	; 0x81
 8003ca2:	015b      	lsls	r3, r3, #5
 8003ca4:	58d3      	ldr	r3, [r2, r3]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	1ad2      	subs	r2, r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4914      	ldr	r1, [pc, #80]	; (8003d00 <sync_window+0xa8>)
 8003cae:	585b      	ldr	r3, [r3, r1]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d218      	bcs.n	8003ce6 <sync_window+0x8e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <sync_window+0xac>)
 8003cb8:	5c9b      	ldrb	r3, [r3, r2]
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e010      	b.n	8003ce0 <sync_window+0x88>
					wsect += fs->fsize;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	; (8003d00 <sync_window+0xa8>)
 8003cc2:	589b      	ldr	r3, [r3, r2]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	18d3      	adds	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <sync_window+0xa4>)
 8003cce:	5c98      	ldrb	r0, [r3, r2]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f7ff fd39 	bl	800374c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d8eb      	bhi.n	8003cbe <sync_window+0x66>
				}
			}
		}
	}
	return res;
 8003ce6:	230f      	movs	r3, #15
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b007      	add	sp, #28
 8003cf2:	bd90      	pop	{r4, r7, pc}
 8003cf4:	00001004 	.word	0x00001004
 8003cf8:	0000102c 	.word	0x0000102c
 8003cfc:	00001001 	.word	0x00001001
 8003d00:	00001018 	.word	0x00001018
 8003d04:	00001003 	.word	0x00001003

08003d08 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003d12:	250f      	movs	r5, #15
 8003d14:	197b      	adds	r3, r7, r5
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <move_window+0x6c>)
 8003d1e:	589b      	ldr	r3, [r3, r2]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d01f      	beq.n	8003d66 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003d26:	197c      	adds	r4, r7, r5
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff ff94 	bl	8003c58 <sync_window>
 8003d30:	0003      	movs	r3, r0
 8003d32:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003d34:	002c      	movs	r4, r5
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d113      	bne.n	8003d66 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <move_window+0x70>)
 8003d42:	5c98      	ldrb	r0, [r3, r2]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f7ff fcd7 	bl	80036fc <disk_read>
 8003d4e:	1e03      	subs	r3, r0, #0
 8003d50:	d005      	beq.n	8003d5e <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003d52:	2301      	movs	r3, #1
 8003d54:	425b      	negs	r3, r3
 8003d56:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4904      	ldr	r1, [pc, #16]	; (8003d74 <move_window+0x6c>)
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	505a      	str	r2, [r3, r1]
		}
	}
	return res;
 8003d66:	230f      	movs	r3, #15
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	781b      	ldrb	r3, [r3, #0]
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b004      	add	sp, #16
 8003d72:	bdb0      	pop	{r4, r5, r7, pc}
 8003d74:	0000102c 	.word	0x0000102c
 8003d78:	00001001 	.word	0x00001001

08003d7c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003d7c:	b5b0      	push	{r4, r5, r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003d84:	250f      	movs	r5, #15
 8003d86:	197c      	adds	r4, r7, r5
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7ff ff64 	bl	8003c58 <sync_window>
 8003d90:	0003      	movs	r3, r0
 8003d92:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003d94:	197b      	adds	r3, r7, r5
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d000      	beq.n	8003d9e <sync_fs+0x22>
 8003d9c:	e0aa      	b.n	8003ef4 <sync_fs+0x178>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	015b      	lsls	r3, r3, #5
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d000      	beq.n	8003dac <sync_fs+0x30>
 8003daa:	e095      	b.n	8003ed8 <sync_fs+0x15c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a55      	ldr	r2, [pc, #340]	; (8003f04 <sync_fs+0x188>)
 8003db0:	5c9b      	ldrb	r3, [r3, r2]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d000      	beq.n	8003db8 <sync_fs+0x3c>
 8003db6:	e08f      	b.n	8003ed8 <sync_fs+0x15c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <sync_fs+0x18c>)
 8003dbe:	5a9b      	ldrh	r3, [r3, r2]
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	f7ff fd2f 	bl	8003826 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	23ff      	movs	r3, #255	; 0xff
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2155      	movs	r1, #85	; 0x55
 8003dd0:	54d1      	strb	r1, [r2, r3]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4d      	ldr	r2, [pc, #308]	; (8003f0c <sync_fs+0x190>)
 8003dd6:	21aa      	movs	r1, #170	; 0xaa
 8003dd8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2252      	movs	r2, #82	; 0x52
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2252      	movs	r2, #82	; 0x52
 8003de4:	705a      	strb	r2, [r3, #1]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2261      	movs	r2, #97	; 0x61
 8003dea:	709a      	strb	r2, [r3, #2]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2241      	movs	r2, #65	; 0x41
 8003df0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	23f2      	movs	r3, #242	; 0xf2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2172      	movs	r1, #114	; 0x72
 8003dfa:	54d1      	strb	r1, [r2, r3]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	23e6      	movs	r3, #230	; 0xe6
 8003e00:	33ff      	adds	r3, #255	; 0xff
 8003e02:	2172      	movs	r1, #114	; 0x72
 8003e04:	54d1      	strb	r1, [r2, r3]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	23f3      	movs	r3, #243	; 0xf3
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2141      	movs	r1, #65	; 0x41
 8003e0e:	54d1      	strb	r1, [r2, r3]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	23e8      	movs	r3, #232	; 0xe8
 8003e14:	33ff      	adds	r3, #255	; 0xff
 8003e16:	2161      	movs	r1, #97	; 0x61
 8003e18:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <sync_fs+0x194>)
 8003e1e:	589b      	ldr	r3, [r3, r2]
 8003e20:	b2d9      	uxtb	r1, r3
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	23f4      	movs	r3, #244	; 0xf4
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	54d1      	strb	r1, [r2, r3]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a38      	ldr	r2, [pc, #224]	; (8003f10 <sync_fs+0x194>)
 8003e2e:	589b      	ldr	r3, [r3, r2]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b2d9      	uxtb	r1, r3
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	23ea      	movs	r3, #234	; 0xea
 8003e3c:	33ff      	adds	r3, #255	; 0xff
 8003e3e:	54d1      	strb	r1, [r2, r3]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a33      	ldr	r2, [pc, #204]	; (8003f10 <sync_fs+0x194>)
 8003e44:	589b      	ldr	r3, [r3, r2]
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	b2d9      	uxtb	r1, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	23f5      	movs	r3, #245	; 0xf5
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	54d1      	strb	r1, [r2, r3]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2e      	ldr	r2, [pc, #184]	; (8003f10 <sync_fs+0x194>)
 8003e56:	589b      	ldr	r3, [r3, r2]
 8003e58:	0e1b      	lsrs	r3, r3, #24
 8003e5a:	b2d9      	uxtb	r1, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	23ec      	movs	r3, #236	; 0xec
 8003e60:	33ff      	adds	r3, #255	; 0xff
 8003e62:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <sync_fs+0x198>)
 8003e68:	589b      	ldr	r3, [r3, r2]
 8003e6a:	b2d9      	uxtb	r1, r3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	23f6      	movs	r3, #246	; 0xf6
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	54d1      	strb	r1, [r2, r3]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <sync_fs+0x198>)
 8003e78:	589b      	ldr	r3, [r3, r2]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	b2d9      	uxtb	r1, r3
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	23ee      	movs	r3, #238	; 0xee
 8003e86:	33ff      	adds	r3, #255	; 0xff
 8003e88:	54d1      	strb	r1, [r2, r3]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <sync_fs+0x198>)
 8003e8e:	589b      	ldr	r3, [r3, r2]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	b2d9      	uxtb	r1, r3
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	23f7      	movs	r3, #247	; 0xf7
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	54d1      	strb	r1, [r2, r3]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <sync_fs+0x198>)
 8003ea0:	589b      	ldr	r3, [r3, r2]
 8003ea2:	0e1b      	lsrs	r3, r3, #24
 8003ea4:	b2d9      	uxtb	r1, r3
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	23f0      	movs	r3, #240	; 0xf0
 8003eaa:	33ff      	adds	r3, #255	; 0xff
 8003eac:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <sync_fs+0x19c>)
 8003eb2:	589b      	ldr	r3, [r3, r2]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4918      	ldr	r1, [pc, #96]	; (8003f1c <sync_fs+0x1a0>)
 8003eba:	505a      	str	r2, [r3, r1]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <sync_fs+0x1a4>)
 8003ec0:	5c98      	ldrb	r0, [r3, r2]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <sync_fs+0x1a0>)
 8003ec8:	589a      	ldr	r2, [r3, r2]
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f7ff fc3e 	bl	800374c <disk_write>
			fs->fsi_flag = 0;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <sync_fs+0x188>)
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <sync_fs+0x1a4>)
 8003edc:	5c9b      	ldrb	r3, [r3, r2]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff fc5a 	bl	800379c <disk_ioctl>
 8003ee8:	1e03      	subs	r3, r0, #0
 8003eea:	d003      	beq.n	8003ef4 <sync_fs+0x178>
			res = FR_DISK_ERR;
 8003eec:	230f      	movs	r3, #15
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	781b      	ldrb	r3, [r3, #0]
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b004      	add	sp, #16
 8003f00:	bdb0      	pop	{r4, r5, r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	00001005 	.word	0x00001005
 8003f08:	0000100a 	.word	0x0000100a
 8003f0c:	000001ff 	.word	0x000001ff
 8003f10:	00001010 	.word	0x00001010
 8003f14:	0000100c 	.word	0x0000100c
 8003f18:	0000101c 	.word	0x0000101c
 8003f1c:	0000102c 	.word	0x0000102c
 8003f20:	00001001 	.word	0x00001001

08003f24 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	3b02      	subs	r3, #2
 8003f32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <clust2sect+0x40>)
 8003f38:	589b      	ldr	r3, [r3, r2]
 8003f3a:	3b02      	subs	r3, #2
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d301      	bcc.n	8003f46 <clust2sect+0x22>
 8003f42:	2300      	movs	r3, #0
 8003f44:	e009      	b.n	8003f5a <clust2sect+0x36>
	return clst * fs->csize + fs->database;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <clust2sect+0x44>)
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	001a      	movs	r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	435a      	muls	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4905      	ldr	r1, [pc, #20]	; (8003f6c <clust2sect+0x48>)
 8003f56:	585b      	ldr	r3, [r3, r1]
 8003f58:	18d3      	adds	r3, r2, r3
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	00001014 	.word	0x00001014
 8003f68:	00001002 	.word	0x00001002
 8003f6c:	00001028 	.word	0x00001028

08003f70 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d905      	bls.n	8003f8c <get_fat+0x1c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a78      	ldr	r2, [pc, #480]	; (8004164 <get_fat+0x1f4>)
 8003f84:	589b      	ldr	r3, [r3, r2]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e0e2      	b.n	8004158 <get_fat+0x1e8>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003f92:	2301      	movs	r3, #1
 8003f94:	425b      	negs	r3, r3
 8003f96:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	015b      	lsls	r3, r3, #5
 8003f9e:	5cd3      	ldrb	r3, [r2, r3]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d100      	bne.n	8003fa6 <get_fat+0x36>
 8003fa4:	e095      	b.n	80040d2 <get_fat+0x162>
 8003fa6:	dd00      	ble.n	8003faa <get_fat+0x3a>
 8003fa8:	e0cc      	b.n	8004144 <get_fat+0x1d4>
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d002      	beq.n	8003fb4 <get_fat+0x44>
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d05e      	beq.n	8004070 <get_fat+0x100>
 8003fb2:	e0c7      	b.n	8004144 <get_fat+0x1d4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	18d3      	adds	r3, r2, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	2381      	movs	r3, #129	; 0x81
 8003fc6:	015b      	lsls	r3, r3, #5
 8003fc8:	58d4      	ldr	r4, [r2, r3]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a66      	ldr	r2, [pc, #408]	; (8004168 <get_fat+0x1f8>)
 8003fce:	5a9b      	ldrh	r3, [r3, r2]
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7fc f8a0 	bl	8000118 <__udivsi3>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	18e2      	adds	r2, r4, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7ff fe91 	bl	8003d08 <move_window>
 8003fe6:	1e03      	subs	r3, r0, #0
 8003fe8:	d000      	beq.n	8003fec <get_fat+0x7c>
 8003fea:	e0ae      	b.n	800414a <get_fat+0x1da>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	60fa      	str	r2, [r7, #12]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	495c      	ldr	r1, [pc, #368]	; (8004168 <get_fat+0x1f8>)
 8003ff6:	5a52      	ldrh	r2, [r2, r1]
 8003ff8:	0011      	movs	r1, r2
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7fc f912 	bl	8000224 <__aeabi_uidivmod>
 8004000:	000b      	movs	r3, r1
 8004002:	001a      	movs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	5c9b      	ldrb	r3, [r3, r2]
 8004008:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	2381      	movs	r3, #129	; 0x81
 800400e:	015b      	lsls	r3, r3, #5
 8004010:	58d4      	ldr	r4, [r2, r3]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a54      	ldr	r2, [pc, #336]	; (8004168 <get_fat+0x1f8>)
 8004016:	5a9b      	ldrh	r3, [r3, r2]
 8004018:	0019      	movs	r1, r3
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7fc f87c 	bl	8000118 <__udivsi3>
 8004020:	0003      	movs	r3, r0
 8004022:	18e2      	adds	r2, r4, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0011      	movs	r1, r2
 8004028:	0018      	movs	r0, r3
 800402a:	f7ff fe6d 	bl	8003d08 <move_window>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d000      	beq.n	8004034 <get_fat+0xc4>
 8004032:	e08c      	b.n	800414e <get_fat+0x1de>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a4c      	ldr	r2, [pc, #304]	; (8004168 <get_fat+0x1f8>)
 8004038:	5a9b      	ldrh	r3, [r3, r2]
 800403a:	001a      	movs	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0011      	movs	r1, r2
 8004040:	0018      	movs	r0, r3
 8004042:	f7fc f8ef 	bl	8000224 <__aeabi_uidivmod>
 8004046:	000b      	movs	r3, r1
 8004048:	001a      	movs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	5c9b      	ldrb	r3, [r3, r2]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	001a      	movs	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4313      	orrs	r3, r2
 8004056:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2201      	movs	r2, #1
 800405c:	4013      	ands	r3, r2
 800405e:	d002      	beq.n	8004066 <get_fat+0xf6>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	e002      	b.n	800406c <get_fat+0xfc>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	051b      	lsls	r3, r3, #20
 800406a:	0d1b      	lsrs	r3, r3, #20
 800406c:	617b      	str	r3, [r7, #20]
			break;
 800406e:	e073      	b.n	8004158 <get_fat+0x1e8>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	2381      	movs	r3, #129	; 0x81
 8004074:	015b      	lsls	r3, r3, #5
 8004076:	58d4      	ldr	r4, [r2, r3]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3b      	ldr	r2, [pc, #236]	; (8004168 <get_fat+0x1f8>)
 800407c:	5a9b      	ldrh	r3, [r3, r2]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	0019      	movs	r1, r3
 8004084:	6838      	ldr	r0, [r7, #0]
 8004086:	f7fc f847 	bl	8000118 <__udivsi3>
 800408a:	0003      	movs	r3, r0
 800408c:	18e2      	adds	r2, r4, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0011      	movs	r1, r2
 8004092:	0018      	movs	r0, r3
 8004094:	f7ff fe38 	bl	8003d08 <move_window>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d15a      	bne.n	8004152 <get_fat+0x1e2>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	005a      	lsls	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4931      	ldr	r1, [pc, #196]	; (8004168 <get_fat+0x1f8>)
 80040a4:	5a5b      	ldrh	r3, [r3, r1]
 80040a6:	0019      	movs	r1, r3
 80040a8:	0010      	movs	r0, r2
 80040aa:	f7fc f8bb 	bl	8000224 <__aeabi_uidivmod>
 80040ae:	000b      	movs	r3, r1
 80040b0:	001a      	movs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	189b      	adds	r3, r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	3301      	adds	r3, #1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	b21a      	sxth	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	b21b      	sxth	r3, r3
 80040c8:	4313      	orrs	r3, r2
 80040ca:	b21b      	sxth	r3, r3
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	617b      	str	r3, [r7, #20]
			break;
 80040d0:	e042      	b.n	8004158 <get_fat+0x1e8>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	2381      	movs	r3, #129	; 0x81
 80040d6:	015b      	lsls	r3, r3, #5
 80040d8:	58d4      	ldr	r4, [r2, r3]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a22      	ldr	r2, [pc, #136]	; (8004168 <get_fat+0x1f8>)
 80040de:	5a9b      	ldrh	r3, [r3, r2]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	0019      	movs	r1, r3
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f7fc f816 	bl	8000118 <__udivsi3>
 80040ec:	0003      	movs	r3, r0
 80040ee:	18e2      	adds	r2, r4, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	0011      	movs	r1, r2
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff fe07 	bl	8003d08 <move_window>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d12b      	bne.n	8004156 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4918      	ldr	r1, [pc, #96]	; (8004168 <get_fat+0x1f8>)
 8004106:	5a5b      	ldrh	r3, [r3, r1]
 8004108:	0019      	movs	r1, r3
 800410a:	0010      	movs	r0, r2
 800410c:	f7fc f88a 	bl	8000224 <__aeabi_uidivmod>
 8004110:	000b      	movs	r3, r1
 8004112:	001a      	movs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	189b      	adds	r3, r3, r2
 8004118:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3303      	adds	r3, #3
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	061a      	lsls	r2, r3, #24
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3302      	adds	r3, #2
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	4313      	orrs	r3, r2
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	3201      	adds	r2, #1
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	0212      	lsls	r2, r2, #8
 8004134:	4313      	orrs	r3, r2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	617b      	str	r3, [r7, #20]
			break;
 8004142:	e009      	b.n	8004158 <get_fat+0x1e8>

		default:
			val = 1;	/* Internal error */
 8004144:	2301      	movs	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e006      	b.n	8004158 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	e004      	b.n	8004158 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	e002      	b.n	8004158 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	e000      	b.n	8004158 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004156:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8004158:	697b      	ldr	r3, [r7, #20]
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b007      	add	sp, #28
 8004160:	bd90      	pop	{r4, r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	00001014 	.word	0x00001014
 8004168:	0000100a 	.word	0x0000100a

0800416c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800416c:	b5b0      	push	{r4, r5, r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d905      	bls.n	800418a <put_fat+0x1e>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4aab      	ldr	r2, [pc, #684]	; (8004430 <put_fat+0x2c4>)
 8004182:	589b      	ldr	r3, [r3, r2]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	d304      	bcc.n	8004194 <put_fat+0x28>
		res = FR_INT_ERR;
 800418a:	231f      	movs	r3, #31
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2202      	movs	r2, #2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	e145      	b.n	8004420 <put_fat+0x2b4>

	} else {
		switch (fs->fs_type) {
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	015b      	lsls	r3, r3, #5
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d100      	bne.n	80041a2 <put_fat+0x36>
 80041a0:	e0d5      	b.n	800434e <put_fat+0x1e2>
 80041a2:	dd00      	ble.n	80041a6 <put_fat+0x3a>
 80041a4:	e130      	b.n	8004408 <put_fat+0x29c>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d003      	beq.n	80041b2 <put_fat+0x46>
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d100      	bne.n	80041b0 <put_fat+0x44>
 80041ae:	e092      	b.n	80042d6 <put_fat+0x16a>
 80041b0:	e12a      	b.n	8004408 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	18d3      	adds	r3, r2, r3
 80041be:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	2381      	movs	r3, #129	; 0x81
 80041c4:	015b      	lsls	r3, r3, #5
 80041c6:	58d4      	ldr	r4, [r2, r3]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a9a      	ldr	r2, [pc, #616]	; (8004434 <put_fat+0x2c8>)
 80041cc:	5a9b      	ldrh	r3, [r3, r2]
 80041ce:	0019      	movs	r1, r3
 80041d0:	6978      	ldr	r0, [r7, #20]
 80041d2:	f7fb ffa1 	bl	8000118 <__udivsi3>
 80041d6:	0003      	movs	r3, r0
 80041d8:	18e2      	adds	r2, r4, r3
 80041da:	251f      	movs	r5, #31
 80041dc:	197c      	adds	r4, r7, r5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7ff fd90 	bl	8003d08 <move_window>
 80041e8:	0003      	movs	r3, r0
 80041ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80041ec:	197b      	adds	r3, r7, r5
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d000      	beq.n	80041f6 <put_fat+0x8a>
 80041f4:	e10d      	b.n	8004412 <put_fat+0x2a6>
			p = &fs->win.d8[bc++ % SS(fs)];
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	617a      	str	r2, [r7, #20]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	498d      	ldr	r1, [pc, #564]	; (8004434 <put_fat+0x2c8>)
 8004200:	5a52      	ldrh	r2, [r2, r1]
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f7fc f80d 	bl	8000224 <__aeabi_uidivmod>
 800420a:	000b      	movs	r3, r1
 800420c:	001a      	movs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	189b      	adds	r3, r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2201      	movs	r2, #1
 8004218:	4013      	ands	r3, r2
 800421a:	d00d      	beq.n	8004238 <put_fat+0xcc>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	b25b      	sxtb	r3, r3
 8004222:	220f      	movs	r2, #15
 8004224:	4013      	ands	r3, r2
 8004226:	b25a      	sxtb	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	b25b      	sxtb	r3, r3
 8004230:	4313      	orrs	r3, r2
 8004232:	b25b      	sxtb	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e001      	b.n	800423c <put_fat+0xd0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a7d      	ldr	r2, [pc, #500]	; (8004438 <put_fat+0x2cc>)
 8004244:	2101      	movs	r1, #1
 8004246:	5499      	strb	r1, [r3, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	2381      	movs	r3, #129	; 0x81
 800424c:	015b      	lsls	r3, r3, #5
 800424e:	58d4      	ldr	r4, [r2, r3]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a78      	ldr	r2, [pc, #480]	; (8004434 <put_fat+0x2c8>)
 8004254:	5a9b      	ldrh	r3, [r3, r2]
 8004256:	0019      	movs	r1, r3
 8004258:	6978      	ldr	r0, [r7, #20]
 800425a:	f7fb ff5d 	bl	8000118 <__udivsi3>
 800425e:	0003      	movs	r3, r0
 8004260:	18e2      	adds	r2, r4, r3
 8004262:	251f      	movs	r5, #31
 8004264:	197c      	adds	r4, r7, r5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	0011      	movs	r1, r2
 800426a:	0018      	movs	r0, r3
 800426c:	f7ff fd4c 	bl	8003d08 <move_window>
 8004270:	0003      	movs	r3, r0
 8004272:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004274:	197b      	adds	r3, r7, r5
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d000      	beq.n	800427e <put_fat+0x112>
 800427c:	e0cb      	b.n	8004416 <put_fat+0x2aa>
			p = &fs->win.d8[bc % SS(fs)];
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a6c      	ldr	r2, [pc, #432]	; (8004434 <put_fat+0x2c8>)
 8004282:	5a9b      	ldrh	r3, [r3, r2]
 8004284:	001a      	movs	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	0011      	movs	r1, r2
 800428a:	0018      	movs	r0, r3
 800428c:	f7fb ffca 	bl	8000224 <__aeabi_uidivmod>
 8004290:	000b      	movs	r3, r1
 8004292:	001a      	movs	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	189b      	adds	r3, r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2201      	movs	r2, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	d003      	beq.n	80042aa <put_fat+0x13e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e00e      	b.n	80042c8 <put_fat+0x15c>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b25b      	sxtb	r3, r3
 80042b0:	220f      	movs	r2, #15
 80042b2:	4393      	bics	r3, r2
 80042b4:	b25a      	sxtb	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	b25b      	sxtb	r3, r3
 80042bc:	210f      	movs	r1, #15
 80042be:	400b      	ands	r3, r1
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	4313      	orrs	r3, r2
 80042c4:	b25b      	sxtb	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a5a      	ldr	r2, [pc, #360]	; (8004438 <put_fat+0x2cc>)
 80042d0:	2101      	movs	r1, #1
 80042d2:	5499      	strb	r1, [r3, r2]
			break;
 80042d4:	e0a4      	b.n	8004420 <put_fat+0x2b4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	2381      	movs	r3, #129	; 0x81
 80042da:	015b      	lsls	r3, r3, #5
 80042dc:	58d4      	ldr	r4, [r2, r3]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a54      	ldr	r2, [pc, #336]	; (8004434 <put_fat+0x2c8>)
 80042e2:	5a9b      	ldrh	r3, [r3, r2]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	0019      	movs	r1, r3
 80042ea:	68b8      	ldr	r0, [r7, #8]
 80042ec:	f7fb ff14 	bl	8000118 <__udivsi3>
 80042f0:	0003      	movs	r3, r0
 80042f2:	18e2      	adds	r2, r4, r3
 80042f4:	251f      	movs	r5, #31
 80042f6:	197c      	adds	r4, r7, r5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	0011      	movs	r1, r2
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7ff fd03 	bl	8003d08 <move_window>
 8004302:	0003      	movs	r3, r0
 8004304:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004306:	197b      	adds	r3, r7, r5
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d000      	beq.n	8004310 <put_fat+0x1a4>
 800430e:	e084      	b.n	800441a <put_fat+0x2ae>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	005a      	lsls	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4947      	ldr	r1, [pc, #284]	; (8004434 <put_fat+0x2c8>)
 8004318:	5a5b      	ldrh	r3, [r3, r1]
 800431a:	0019      	movs	r1, r3
 800431c:	0010      	movs	r0, r2
 800431e:	f7fb ff81 	bl	8000224 <__aeabi_uidivmod>
 8004322:	000b      	movs	r3, r1
 8004324:	001a      	movs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	189b      	adds	r3, r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	b29b      	uxth	r3, r3
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	b29a      	uxth	r2, r3
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	3301      	adds	r3, #1
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <put_fat+0x2cc>)
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]
			break;
 800434c:	e068      	b.n	8004420 <put_fat+0x2b4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	2381      	movs	r3, #129	; 0x81
 8004352:	015b      	lsls	r3, r3, #5
 8004354:	58d4      	ldr	r4, [r2, r3]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a36      	ldr	r2, [pc, #216]	; (8004434 <put_fat+0x2c8>)
 800435a:	5a9b      	ldrh	r3, [r3, r2]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	b29b      	uxth	r3, r3
 8004360:	0019      	movs	r1, r3
 8004362:	68b8      	ldr	r0, [r7, #8]
 8004364:	f7fb fed8 	bl	8000118 <__udivsi3>
 8004368:	0003      	movs	r3, r0
 800436a:	18e2      	adds	r2, r4, r3
 800436c:	251f      	movs	r5, #31
 800436e:	197c      	adds	r4, r7, r5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	0011      	movs	r1, r2
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff fcc7 	bl	8003d08 <move_window>
 800437a:	0003      	movs	r3, r0
 800437c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800437e:	197b      	adds	r3, r7, r5
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d14b      	bne.n	800441e <put_fat+0x2b2>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	009a      	lsls	r2, r3, #2
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4929      	ldr	r1, [pc, #164]	; (8004434 <put_fat+0x2c8>)
 800438e:	5a5b      	ldrh	r3, [r3, r1]
 8004390:	0019      	movs	r1, r3
 8004392:	0010      	movs	r0, r2
 8004394:	f7fb ff46 	bl	8000224 <__aeabi_uidivmod>
 8004398:	000b      	movs	r3, r1
 800439a:	001a      	movs	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	3303      	adds	r3, #3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	061a      	lsls	r2, r3, #24
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	3302      	adds	r3, #2
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	4313      	orrs	r3, r2
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	3201      	adds	r2, #1
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	0212      	lsls	r2, r2, #8
 80043bc:	4313      	orrs	r3, r2
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	0f1b      	lsrs	r3, r3, #28
 80043c6:	071b      	lsls	r3, r3, #28
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	b29a      	uxth	r2, r3
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	3301      	adds	r3, #1
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0c1a      	lsrs	r2, r3, #16
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	3302      	adds	r3, #2
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	0e1a      	lsrs	r2, r3, #24
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3303      	adds	r3, #3
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <put_fat+0x2cc>)
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]
			break;
 8004406:	e00b      	b.n	8004420 <put_fat+0x2b4>

		default :
			res = FR_INT_ERR;
 8004408:	231f      	movs	r3, #31
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	2202      	movs	r2, #2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e006      	b.n	8004420 <put_fat+0x2b4>
			if (res != FR_OK) break;
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	e004      	b.n	8004420 <put_fat+0x2b4>
			if (res != FR_OK) break;
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	e002      	b.n	8004420 <put_fat+0x2b4>
			if (res != FR_OK) break;
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	e000      	b.n	8004420 <put_fat+0x2b4>
			if (res != FR_OK) break;
 800441e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004420:	231f      	movs	r3, #31
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	781b      	ldrb	r3, [r3, #0]
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b008      	add	sp, #32
 800442c:	bdb0      	pop	{r4, r5, r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	00001014 	.word	0x00001014
 8004434:	0000100a 	.word	0x0000100a
 8004438:	00001004 	.word	0x00001004

0800443c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800443c:	b5b0      	push	{r4, r5, r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d905      	bls.n	8004458 <remove_chain+0x1c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a30      	ldr	r2, [pc, #192]	; (8004510 <remove_chain+0xd4>)
 8004450:	589b      	ldr	r3, [r3, r2]
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d304      	bcc.n	8004462 <remove_chain+0x26>
		res = FR_INT_ERR;
 8004458:	230f      	movs	r3, #15
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	2202      	movs	r2, #2
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e04e      	b.n	8004500 <remove_chain+0xc4>

	} else {
		res = FR_OK;
 8004462:	230f      	movs	r3, #15
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800446a:	e03f      	b.n	80044ec <remove_chain+0xb0>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0011      	movs	r1, r2
 8004472:	0018      	movs	r0, r3
 8004474:	f7ff fd7c 	bl	8003f70 <get_fat>
 8004478:	0003      	movs	r3, r0
 800447a:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03b      	beq.n	80044fa <remove_chain+0xbe>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d104      	bne.n	8004492 <remove_chain+0x56>
 8004488:	230f      	movs	r3, #15
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	2202      	movs	r2, #2
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e036      	b.n	8004500 <remove_chain+0xc4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	d104      	bne.n	80044a2 <remove_chain+0x66>
 8004498:	230f      	movs	r3, #15
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e02e      	b.n	8004500 <remove_chain+0xc4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80044a2:	250f      	movs	r5, #15
 80044a4:	197c      	adds	r4, r7, r5
 80044a6:	6839      	ldr	r1, [r7, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7ff fe5d 	bl	800416c <put_fat>
 80044b2:	0003      	movs	r3, r0
 80044b4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80044b6:	197b      	adds	r3, r7, r5
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11f      	bne.n	80044fe <remove_chain+0xc2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <remove_chain+0xd8>)
 80044c2:	589b      	ldr	r3, [r3, r2]
 80044c4:	3301      	adds	r3, #1
 80044c6:	d00f      	beq.n	80044e8 <remove_chain+0xac>
				fs->free_clust++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a12      	ldr	r2, [pc, #72]	; (8004514 <remove_chain+0xd8>)
 80044cc:	589b      	ldr	r3, [r3, r2]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4910      	ldr	r1, [pc, #64]	; (8004514 <remove_chain+0xd8>)
 80044d4:	505a      	str	r2, [r3, r1]
				fs->fsi_flag |= 1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <remove_chain+0xdc>)
 80044da:	5c9b      	ldrb	r3, [r3, r2]
 80044dc:	2201      	movs	r2, #1
 80044de:	4313      	orrs	r3, r2
 80044e0:	b2d9      	uxtb	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a0c      	ldr	r2, [pc, #48]	; (8004518 <remove_chain+0xdc>)
 80044e6:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <remove_chain+0xd4>)
 80044f0:	589b      	ldr	r3, [r3, r2]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3b9      	bcc.n	800446c <remove_chain+0x30>
 80044f8:	e002      	b.n	8004500 <remove_chain+0xc4>
			if (nxt == 0) break;				/* Empty cluster? */
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	e000      	b.n	8004500 <remove_chain+0xc4>
			if (res != FR_OK) break;
 80044fe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004500:	230f      	movs	r3, #15
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	781b      	ldrb	r3, [r3, #0]
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bdb0      	pop	{r4, r5, r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	00001014 	.word	0x00001014
 8004514:	00001010 	.word	0x00001010
 8004518:	00001005 	.word	0x00001005

0800451c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800451c:	b5b0      	push	{r4, r5, r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10f      	bne.n	800454c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a50      	ldr	r2, [pc, #320]	; (8004670 <create_chain+0x154>)
 8004530:	589b      	ldr	r3, [r3, r2]
 8004532:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <create_chain+0x2a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4d      	ldr	r2, [pc, #308]	; (8004674 <create_chain+0x158>)
 800453e:	589b      	ldr	r3, [r3, r2]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	429a      	cmp	r2, r3
 8004544:	d31e      	bcc.n	8004584 <create_chain+0x68>
 8004546:	2301      	movs	r3, #1
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e01b      	b.n	8004584 <create_chain+0x68>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0011      	movs	r1, r2
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff fd0c 	bl	8003f70 <get_fat>
 8004558:	0003      	movs	r3, r0
 800455a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d801      	bhi.n	8004566 <create_chain+0x4a>
 8004562:	2301      	movs	r3, #1
 8004564:	e07f      	b.n	8004666 <create_chain+0x14a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	3301      	adds	r3, #1
 800456a:	d101      	bne.n	8004570 <create_chain+0x54>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	e07a      	b.n	8004666 <create_chain+0x14a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a40      	ldr	r2, [pc, #256]	; (8004674 <create_chain+0x158>)
 8004574:	589b      	ldr	r3, [r3, r2]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d201      	bcs.n	8004580 <create_chain+0x64>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	e072      	b.n	8004666 <create_chain+0x14a>
		scl = clst;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	3301      	adds	r3, #1
 800458c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a38      	ldr	r2, [pc, #224]	; (8004674 <create_chain+0x158>)
 8004592:	589b      	ldr	r3, [r3, r2]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	429a      	cmp	r2, r3
 8004598:	d307      	bcc.n	80045aa <create_chain+0x8e>
			ncl = 2;
 800459a:	2302      	movs	r3, #2
 800459c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d901      	bls.n	80045aa <create_chain+0x8e>
 80045a6:	2300      	movs	r3, #0
 80045a8:	e05d      	b.n	8004666 <create_chain+0x14a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0011      	movs	r1, r2
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff fcdd 	bl	8003f70 <get_fat>
 80045b6:	0003      	movs	r3, r0
 80045b8:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3301      	adds	r3, #1
 80045c4:	d002      	beq.n	80045cc <create_chain+0xb0>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <create_chain+0xb4>
			return cs;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	e04a      	b.n	8004666 <create_chain+0x14a>
		if (ncl == scl) return 0;		/* No free cluster */
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1d7      	bne.n	8004588 <create_chain+0x6c>
 80045d8:	2300      	movs	r3, #0
 80045da:	e044      	b.n	8004666 <create_chain+0x14a>
		if (cs == 0) break;				/* Found a free cluster */
 80045dc:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80045de:	250f      	movs	r5, #15
 80045e0:	197c      	adds	r4, r7, r5
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <create_chain+0x15c>)
 80045e4:	6979      	ldr	r1, [r7, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff fdbf 	bl	800416c <put_fat>
 80045ee:	0003      	movs	r3, r0
 80045f0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 80045f2:	197b      	adds	r3, r7, r5
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <create_chain+0xf6>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <create_chain+0xf6>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004600:	197c      	adds	r4, r7, r5
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6839      	ldr	r1, [r7, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f7ff fdaf 	bl	800416c <put_fat>
 800460e:	0003      	movs	r3, r0
 8004610:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8004612:	230f      	movs	r3, #15
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d119      	bne.n	8004650 <create_chain+0x134>
		fs->last_clust = ncl;			/* Update FSINFO */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4914      	ldr	r1, [pc, #80]	; (8004670 <create_chain+0x154>)
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	505a      	str	r2, [r3, r1]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <create_chain+0x160>)
 8004628:	589b      	ldr	r3, [r3, r2]
 800462a:	3301      	adds	r3, #1
 800462c:	d01a      	beq.n	8004664 <create_chain+0x148>
			fs->free_clust--;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a12      	ldr	r2, [pc, #72]	; (800467c <create_chain+0x160>)
 8004632:	589b      	ldr	r3, [r3, r2]
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4910      	ldr	r1, [pc, #64]	; (800467c <create_chain+0x160>)
 800463a:	505a      	str	r2, [r3, r1]
			fs->fsi_flag |= 1;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a10      	ldr	r2, [pc, #64]	; (8004680 <create_chain+0x164>)
 8004640:	5c9b      	ldrb	r3, [r3, r2]
 8004642:	2201      	movs	r2, #1
 8004644:	4313      	orrs	r3, r2
 8004646:	b2d9      	uxtb	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <create_chain+0x164>)
 800464c:	5499      	strb	r1, [r3, r2]
 800464e:	e009      	b.n	8004664 <create_chain+0x148>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004650:	230f      	movs	r3, #15
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d102      	bne.n	8004660 <create_chain+0x144>
 800465a:	2301      	movs	r3, #1
 800465c:	425b      	negs	r3, r3
 800465e:	e000      	b.n	8004662 <create_chain+0x146>
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004664:	697b      	ldr	r3, [r7, #20]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bdb0      	pop	{r4, r5, r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	0000100c 	.word	0x0000100c
 8004674:	00001014 	.word	0x00001014
 8004678:	0fffffff 	.word	0x0fffffff
 800467c:	00001010 	.word	0x00001010
 8004680:	00001005 	.word	0x00001005

08004684 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <clmt_clust+0x80>)
 8004692:	589b      	ldr	r3, [r3, r2]
 8004694:	3304      	adds	r3, #4
 8004696:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	015b      	lsls	r3, r3, #5
 800469e:	58d3      	ldr	r3, [r2, r3]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <clmt_clust+0x84>)
 80046a2:	5a9b      	ldrh	r3, [r3, r2]
 80046a4:	0019      	movs	r1, r3
 80046a6:	6838      	ldr	r0, [r7, #0]
 80046a8:	f7fb fd36 	bl	8000118 <__udivsi3>
 80046ac:	0003      	movs	r3, r0
 80046ae:	0018      	movs	r0, r3
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	015b      	lsls	r3, r3, #5
 80046b6:	58d3      	ldr	r3, [r2, r3]
 80046b8:	4a14      	ldr	r2, [pc, #80]	; (800470c <clmt_clust+0x88>)
 80046ba:	5c9b      	ldrb	r3, [r3, r2]
 80046bc:	0019      	movs	r1, r3
 80046be:	f7fb fd2b 	bl	8000118 <__udivsi3>
 80046c2:	0003      	movs	r3, r0
 80046c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1d1a      	adds	r2, r3, #4
 80046ca:	613a      	str	r2, [r7, #16]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <clmt_clust+0x56>
 80046d6:	2300      	movs	r3, #0
 80046d8:	e010      	b.n	80046fc <clmt_clust+0x78>
		if (cl < ncl) break;	/* In this fragment? */
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d307      	bcc.n	80046f2 <clmt_clust+0x6e>
		cl -= ncl; tbl++;		/* Next fragment */
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80046f0:	e7e9      	b.n	80046c6 <clmt_clust+0x42>
		if (cl < ncl) break;	/* In this fragment? */
 80046f2:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	18d3      	adds	r3, r2, r3
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b006      	add	sp, #24
 8004702:	bd80      	pop	{r7, pc}
 8004704:	00001024 	.word	0x00001024
 8004708:	0000100a 	.word	0x0000100a
 800470c:	00001002 	.word	0x00001002

08004710 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b299      	uxth	r1, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a5d      	ldr	r2, [pc, #372]	; (8004898 <dir_sdi+0x188>)
 8004722:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a5d      	ldr	r2, [pc, #372]	; (800489c <dir_sdi+0x18c>)
 8004728:	589b      	ldr	r3, [r3, r2]
 800472a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d008      	beq.n	8004744 <dir_sdi+0x34>
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	58d3      	ldr	r3, [r2, r3]
 800473a:	4a59      	ldr	r2, [pc, #356]	; (80048a0 <dir_sdi+0x190>)
 800473c:	589b      	ldr	r3, [r3, r2]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	d301      	bcc.n	8004748 <dir_sdi+0x38>
		return FR_INT_ERR;
 8004744:	2302      	movs	r3, #2
 8004746:	e0a2      	b.n	800488e <dir_sdi+0x17e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <dir_sdi+0x5e>
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	015b      	lsls	r3, r3, #5
 8004754:	58d2      	ldr	r2, [r2, r3]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	015b      	lsls	r3, r3, #5
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d106      	bne.n	800476e <dir_sdi+0x5e>
		clst = dp->fs->dirbase;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	015b      	lsls	r3, r3, #5
 8004766:	58d3      	ldr	r3, [r2, r3]
 8004768:	4a4e      	ldr	r2, [pc, #312]	; (80048a4 <dir_sdi+0x194>)
 800476a:	589b      	ldr	r3, [r3, r2]
 800476c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d113      	bne.n	800479c <dir_sdi+0x8c>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	015b      	lsls	r3, r3, #5
 800477a:	58d3      	ldr	r3, [r2, r3]
 800477c:	4a47      	ldr	r2, [pc, #284]	; (800489c <dir_sdi+0x18c>)
 800477e:	5a9b      	ldrh	r3, [r3, r2]
 8004780:	001a      	movs	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	4293      	cmp	r3, r2
 8004786:	d301      	bcc.n	800478c <dir_sdi+0x7c>
			return FR_INT_ERR;
 8004788:	2302      	movs	r3, #2
 800478a:	e080      	b.n	800488e <dir_sdi+0x17e>
		sect = dp->fs->dirbase;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	015b      	lsls	r3, r3, #5
 8004792:	58d3      	ldr	r3, [r2, r3]
 8004794:	4a43      	ldr	r2, [pc, #268]	; (80048a4 <dir_sdi+0x194>)
 8004796:	589b      	ldr	r3, [r3, r2]
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e042      	b.n	8004822 <dir_sdi+0x112>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	58d3      	ldr	r3, [r2, r3]
 80047a4:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <dir_sdi+0x198>)
 80047a6:	5a9b      	ldrh	r3, [r3, r2]
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	0019      	movs	r1, r3
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	015b      	lsls	r3, r3, #5
 80047b4:	58d3      	ldr	r3, [r2, r3]
 80047b6:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <dir_sdi+0x19c>)
 80047b8:	5c9b      	ldrb	r3, [r3, r2]
 80047ba:	434b      	muls	r3, r1
 80047bc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80047be:	e021      	b.n	8004804 <dir_sdi+0xf4>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	015b      	lsls	r3, r3, #5
 80047c6:	58d3      	ldr	r3, [r2, r3]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	0011      	movs	r1, r2
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7ff fbcf 	bl	8003f70 <get_fat>
 80047d2:	0003      	movs	r3, r0
 80047d4:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3301      	adds	r3, #1
 80047da:	d101      	bne.n	80047e0 <dir_sdi+0xd0>
 80047dc:	2301      	movs	r3, #1
 80047de:	e056      	b.n	800488e <dir_sdi+0x17e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d908      	bls.n	80047f8 <dir_sdi+0xe8>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	015b      	lsls	r3, r3, #5
 80047ec:	58d3      	ldr	r3, [r2, r3]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <dir_sdi+0x190>)
 80047f0:	589b      	ldr	r3, [r3, r2]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d301      	bcc.n	80047fc <dir_sdi+0xec>
				return FR_INT_ERR;
 80047f8:	2302      	movs	r3, #2
 80047fa:	e048      	b.n	800488e <dir_sdi+0x17e>
			idx -= ic;
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	429a      	cmp	r2, r3
 800480a:	d2d9      	bcs.n	80047c0 <dir_sdi+0xb0>
		}
		sect = clust2sect(dp->fs, clst);
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	015b      	lsls	r3, r3, #5
 8004812:	58d3      	ldr	r3, [r2, r3]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f7ff fb83 	bl	8003f24 <clust2sect>
 800481e:	0003      	movs	r3, r0
 8004820:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4922      	ldr	r1, [pc, #136]	; (80048b0 <dir_sdi+0x1a0>)
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	505a      	str	r2, [r3, r1]
	if (!sect) return FR_INT_ERR;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <dir_sdi+0x124>
 8004830:	2302      	movs	r3, #2
 8004832:	e02c      	b.n	800488e <dir_sdi+0x17e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	015b      	lsls	r3, r3, #5
 800483a:	58d3      	ldr	r3, [r2, r3]
 800483c:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <dir_sdi+0x198>)
 800483e:	5a9b      	ldrh	r3, [r3, r2]
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	b29b      	uxth	r3, r3
 8004844:	0019      	movs	r1, r3
 8004846:	6838      	ldr	r0, [r7, #0]
 8004848:	f7fb fc66 	bl	8000118 <__udivsi3>
 800484c:	0003      	movs	r3, r0
 800484e:	001a      	movs	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	18d2      	adds	r2, r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4917      	ldr	r1, [pc, #92]	; (80048b4 <dir_sdi+0x1a4>)
 8004858:	505a      	str	r2, [r3, r1]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	015b      	lsls	r3, r3, #5
 8004860:	58d3      	ldr	r3, [r2, r3]
 8004862:	001c      	movs	r4, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	015b      	lsls	r3, r3, #5
 800486a:	58d3      	ldr	r3, [r2, r3]
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <dir_sdi+0x198>)
 800486e:	5a9b      	ldrh	r3, [r3, r2]
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	b29b      	uxth	r3, r3
 8004874:	001a      	movs	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	0011      	movs	r1, r2
 800487a:	0018      	movs	r0, r3
 800487c:	f7fb fcd2 	bl	8000224 <__aeabi_uidivmod>
 8004880:	000b      	movs	r3, r1
 8004882:	015b      	lsls	r3, r3, #5
 8004884:	18e2      	adds	r2, r4, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4905      	ldr	r1, [pc, #20]	; (80048a0 <dir_sdi+0x190>)
 800488a:	505a      	str	r2, [r3, r1]

	return FR_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b007      	add	sp, #28
 8004894:	bd90      	pop	{r4, r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	00001006 	.word	0x00001006
 800489c:	00001008 	.word	0x00001008
 80048a0:	00001014 	.word	0x00001014
 80048a4:	00001024 	.word	0x00001024
 80048a8:	0000100a 	.word	0x0000100a
 80048ac:	00001002 	.word	0x00001002
 80048b0:	0000100c 	.word	0x0000100c
 80048b4:	00001010 	.word	0x00001010

080048b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a94      	ldr	r2, [pc, #592]	; (8004b18 <dir_next+0x260>)
 80048c6:	5a9b      	ldrh	r3, [r3, r2]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	0c1b      	lsrs	r3, r3, #16
 80048d2:	d004      	beq.n	80048de <dir_next+0x26>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a91      	ldr	r2, [pc, #580]	; (8004b1c <dir_next+0x264>)
 80048d8:	589b      	ldr	r3, [r3, r2]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <dir_next+0x2a>
		return FR_NO_FILE;
 80048de:	2304      	movs	r3, #4
 80048e0:	e115      	b.n	8004b0e <dir_next+0x256>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	2380      	movs	r3, #128	; 0x80
 80048e6:	015b      	lsls	r3, r3, #5
 80048e8:	58d3      	ldr	r3, [r2, r3]
 80048ea:	4a8d      	ldr	r2, [pc, #564]	; (8004b20 <dir_next+0x268>)
 80048ec:	5a9b      	ldrh	r3, [r3, r2]
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	001a      	movs	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	0011      	movs	r1, r2
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fb fc93 	bl	8000224 <__aeabi_uidivmod>
 80048fe:	1e0b      	subs	r3, r1, #0
 8004900:	d000      	beq.n	8004904 <dir_next+0x4c>
 8004902:	e0e5      	b.n	8004ad0 <dir_next+0x218>
		dp->sect++;					/* Next sector */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a85      	ldr	r2, [pc, #532]	; (8004b1c <dir_next+0x264>)
 8004908:	589b      	ldr	r3, [r3, r2]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4983      	ldr	r1, [pc, #524]	; (8004b1c <dir_next+0x264>)
 8004910:	505a      	str	r2, [r3, r1]

		if (!dp->clust) {		/* Static table */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a83      	ldr	r2, [pc, #524]	; (8004b24 <dir_next+0x26c>)
 8004916:	589b      	ldr	r3, [r3, r2]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10c      	bne.n	8004936 <dir_next+0x7e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	015b      	lsls	r3, r3, #5
 8004922:	58d3      	ldr	r3, [r2, r3]
 8004924:	4a80      	ldr	r2, [pc, #512]	; (8004b28 <dir_next+0x270>)
 8004926:	5a9b      	ldrh	r3, [r3, r2]
 8004928:	001a      	movs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4293      	cmp	r3, r2
 800492e:	d200      	bcs.n	8004932 <dir_next+0x7a>
 8004930:	e0ce      	b.n	8004ad0 <dir_next+0x218>
				return FR_NO_FILE;
 8004932:	2304      	movs	r3, #4
 8004934:	e0eb      	b.n	8004b0e <dir_next+0x256>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	015b      	lsls	r3, r3, #5
 800493c:	58d3      	ldr	r3, [r2, r3]
 800493e:	4a78      	ldr	r2, [pc, #480]	; (8004b20 <dir_next+0x268>)
 8004940:	5a9b      	ldrh	r3, [r3, r2]
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	b29b      	uxth	r3, r3
 8004946:	0019      	movs	r1, r3
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7fb fbe5 	bl	8000118 <__udivsi3>
 800494e:	0003      	movs	r3, r0
 8004950:	0019      	movs	r1, r3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	015b      	lsls	r3, r3, #5
 8004958:	58d3      	ldr	r3, [r2, r3]
 800495a:	4a74      	ldr	r2, [pc, #464]	; (8004b2c <dir_next+0x274>)
 800495c:	5c9b      	ldrb	r3, [r3, r2]
 800495e:	3b01      	subs	r3, #1
 8004960:	400b      	ands	r3, r1
 8004962:	d000      	beq.n	8004966 <dir_next+0xae>
 8004964:	e0b4      	b.n	8004ad0 <dir_next+0x218>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	015b      	lsls	r3, r3, #5
 800496c:	58d2      	ldr	r2, [r2, r3]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	496c      	ldr	r1, [pc, #432]	; (8004b24 <dir_next+0x26c>)
 8004972:	585b      	ldr	r3, [r3, r1]
 8004974:	0019      	movs	r1, r3
 8004976:	0010      	movs	r0, r2
 8004978:	f7ff fafa 	bl	8003f70 <get_fat>
 800497c:	0003      	movs	r3, r0
 800497e:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d801      	bhi.n	800498a <dir_next+0xd2>
 8004986:	2302      	movs	r3, #2
 8004988:	e0c1      	b.n	8004b0e <dir_next+0x256>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	3301      	adds	r3, #1
 800498e:	d101      	bne.n	8004994 <dir_next+0xdc>
 8004990:	2301      	movs	r3, #1
 8004992:	e0bc      	b.n	8004b0e <dir_next+0x256>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	015b      	lsls	r3, r3, #5
 800499a:	58d3      	ldr	r3, [r2, r3]
 800499c:	4a64      	ldr	r2, [pc, #400]	; (8004b30 <dir_next+0x278>)
 800499e:	589b      	ldr	r3, [r3, r2]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d200      	bcs.n	80049a8 <dir_next+0xf0>
 80049a6:	e082      	b.n	8004aae <dir_next+0x1f6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <dir_next+0xfa>
 80049ae:	2304      	movs	r3, #4
 80049b0:	e0ad      	b.n	8004b0e <dir_next+0x256>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	015b      	lsls	r3, r3, #5
 80049b8:	58d2      	ldr	r2, [r2, r3]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4959      	ldr	r1, [pc, #356]	; (8004b24 <dir_next+0x26c>)
 80049be:	585b      	ldr	r3, [r3, r1]
 80049c0:	0019      	movs	r1, r3
 80049c2:	0010      	movs	r0, r2
 80049c4:	f7ff fdaa 	bl	800451c <create_chain>
 80049c8:	0003      	movs	r3, r0
 80049ca:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <dir_next+0x11e>
 80049d2:	2307      	movs	r3, #7
 80049d4:	e09b      	b.n	8004b0e <dir_next+0x256>
					if (clst == 1) return FR_INT_ERR;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <dir_next+0x128>
 80049dc:	2302      	movs	r3, #2
 80049de:	e096      	b.n	8004b0e <dir_next+0x256>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	3301      	adds	r3, #1
 80049e4:	d101      	bne.n	80049ea <dir_next+0x132>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e091      	b.n	8004b0e <dir_next+0x256>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	015b      	lsls	r3, r3, #5
 80049f0:	58d3      	ldr	r3, [r2, r3]
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff f930 	bl	8003c58 <sync_window>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <dir_next+0x148>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e086      	b.n	8004b0e <dir_next+0x256>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	015b      	lsls	r3, r3, #5
 8004a06:	58d3      	ldr	r3, [r2, r3]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	015b      	lsls	r3, r3, #5
 8004a10:	58d3      	ldr	r3, [r2, r3]
 8004a12:	4a43      	ldr	r2, [pc, #268]	; (8004b20 <dir_next+0x268>)
 8004a14:	5a9b      	ldrh	r3, [r3, r2]
 8004a16:	001a      	movs	r2, r3
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f7fe ff04 	bl	8003826 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	015b      	lsls	r3, r3, #5
 8004a24:	58d0      	ldr	r0, [r2, r3]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	015b      	lsls	r3, r3, #5
 8004a2c:	58d4      	ldr	r4, [r2, r3]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	0019      	movs	r1, r3
 8004a32:	f7ff fa77 	bl	8003f24 <clust2sect>
 8004a36:	0003      	movs	r3, r0
 8004a38:	4a3e      	ldr	r2, [pc, #248]	; (8004b34 <dir_next+0x27c>)
 8004a3a:	50a3      	str	r3, [r4, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e01d      	b.n	8004a7e <dir_next+0x1c6>
						dp->fs->wflag = 1;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	015b      	lsls	r3, r3, #5
 8004a48:	58d3      	ldr	r3, [r2, r3]
 8004a4a:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <dir_next+0x280>)
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	5499      	strb	r1, [r3, r2]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	015b      	lsls	r3, r3, #5
 8004a56:	58d3      	ldr	r3, [r2, r3]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7ff f8fd 	bl	8003c58 <sync_window>
 8004a5e:	1e03      	subs	r3, r0, #0
 8004a60:	d001      	beq.n	8004a66 <dir_next+0x1ae>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e053      	b.n	8004b0e <dir_next+0x256>
						dp->fs->winsect++;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	015b      	lsls	r3, r3, #5
 8004a6c:	58d3      	ldr	r3, [r2, r3]
 8004a6e:	4a31      	ldr	r2, [pc, #196]	; (8004b34 <dir_next+0x27c>)
 8004a70:	589a      	ldr	r2, [r3, r2]
 8004a72:	3201      	adds	r2, #1
 8004a74:	492f      	ldr	r1, [pc, #188]	; (8004b34 <dir_next+0x27c>)
 8004a76:	505a      	str	r2, [r3, r1]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	015b      	lsls	r3, r3, #5
 8004a84:	58d3      	ldr	r3, [r2, r3]
 8004a86:	4a29      	ldr	r2, [pc, #164]	; (8004b2c <dir_next+0x274>)
 8004a88:	5c9b      	ldrb	r3, [r3, r2]
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d3d7      	bcc.n	8004a42 <dir_next+0x18a>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	015b      	lsls	r3, r3, #5
 8004a98:	58d3      	ldr	r3, [r2, r3]
 8004a9a:	4a26      	ldr	r2, [pc, #152]	; (8004b34 <dir_next+0x27c>)
 8004a9c:	5899      	ldr	r1, [r3, r2]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	015b      	lsls	r3, r3, #5
 8004aa4:	58d3      	ldr	r3, [r2, r3]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	1a8a      	subs	r2, r1, r2
 8004aaa:	4922      	ldr	r1, [pc, #136]	; (8004b34 <dir_next+0x27c>)
 8004aac:	505a      	str	r2, [r3, r1]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	491c      	ldr	r1, [pc, #112]	; (8004b24 <dir_next+0x26c>)
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	505a      	str	r2, [r3, r1]
				dp->sect = clust2sect(dp->fs, clst);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	015b      	lsls	r3, r3, #5
 8004abc:	58d3      	ldr	r3, [r2, r3]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	0011      	movs	r1, r2
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7ff fa2e 	bl	8003f24 <clust2sect>
 8004ac8:	0002      	movs	r2, r0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4913      	ldr	r1, [pc, #76]	; (8004b1c <dir_next+0x264>)
 8004ace:	505a      	str	r2, [r3, r1]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	b299      	uxth	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <dir_next+0x260>)
 8004ad8:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	015b      	lsls	r3, r3, #5
 8004ae0:	58d3      	ldr	r3, [r2, r3]
 8004ae2:	001c      	movs	r4, r3
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	015b      	lsls	r3, r3, #5
 8004aea:	58d3      	ldr	r3, [r2, r3]
 8004aec:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <dir_next+0x268>)
 8004aee:	5a9b      	ldrh	r3, [r3, r2]
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	001a      	movs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	0011      	movs	r1, r2
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fb fb92 	bl	8000224 <__aeabi_uidivmod>
 8004b00:	000b      	movs	r3, r1
 8004b02:	015b      	lsls	r3, r3, #5
 8004b04:	18e2      	adds	r2, r4, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4909      	ldr	r1, [pc, #36]	; (8004b30 <dir_next+0x278>)
 8004b0a:	505a      	str	r2, [r3, r1]

	return FR_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b007      	add	sp, #28
 8004b14:	bd90      	pop	{r4, r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	00001006 	.word	0x00001006
 8004b1c:	00001010 	.word	0x00001010
 8004b20:	0000100a 	.word	0x0000100a
 8004b24:	0000100c 	.word	0x0000100c
 8004b28:	00001008 	.word	0x00001008
 8004b2c:	00001002 	.word	0x00001002
 8004b30:	00001014 	.word	0x00001014
 8004b34:	0000102c 	.word	0x0000102c
 8004b38:	00001004 	.word	0x00001004

08004b3c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004b3c:	b5b0      	push	{r4, r5, r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004b46:	250f      	movs	r5, #15
 8004b48:	197c      	adds	r4, r7, r5
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff fdde 	bl	8004710 <dir_sdi>
 8004b54:	0003      	movs	r3, r0
 8004b56:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004b58:	197b      	adds	r3, r7, r5
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d139      	bne.n	8004bd4 <dir_alloc+0x98>
		n = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	015b      	lsls	r3, r3, #5
 8004b6a:	58d2      	ldr	r2, [r2, r3]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4921      	ldr	r1, [pc, #132]	; (8004bf4 <dir_alloc+0xb8>)
 8004b70:	585b      	ldr	r3, [r3, r1]
 8004b72:	250f      	movs	r5, #15
 8004b74:	197c      	adds	r4, r7, r5
 8004b76:	0019      	movs	r1, r3
 8004b78:	0010      	movs	r0, r2
 8004b7a:	f7ff f8c5 	bl	8003d08 <move_window>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004b82:	197b      	adds	r3, r7, r5
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d123      	bne.n	8004bd2 <dir_alloc+0x96>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <dir_alloc+0xbc>)
 8004b8e:	589b      	ldr	r3, [r3, r2]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2be5      	cmp	r3, #229	; 0xe5
 8004b94:	d005      	beq.n	8004ba2 <dir_alloc+0x66>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <dir_alloc+0xbc>)
 8004b9a:	589b      	ldr	r3, [r3, r2]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <dir_alloc+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d102      	bne.n	8004bb6 <dir_alloc+0x7a>
 8004bb0:	e010      	b.n	8004bd4 <dir_alloc+0x98>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004bb6:	250f      	movs	r5, #15
 8004bb8:	197c      	adds	r4, r7, r5
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7ff fe7a 	bl	80048b8 <dir_next>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8004bc8:	197b      	adds	r3, r7, r5
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0c9      	beq.n	8004b64 <dir_alloc+0x28>
 8004bd0:	e000      	b.n	8004bd4 <dir_alloc+0x98>
			if (res != FR_OK) break;
 8004bd2:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	18bb      	adds	r3, r7, r2
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d102      	bne.n	8004be4 <dir_alloc+0xa8>
 8004bde:	18bb      	adds	r3, r7, r2
 8004be0:	2207      	movs	r2, #7
 8004be2:	701a      	strb	r2, [r3, #0]
	return res;
 8004be4:	230f      	movs	r3, #15
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	781b      	ldrb	r3, [r3, #0]
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	00001010 	.word	0x00001010
 8004bf8:	00001014 	.word	0x00001014

08004bfc <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	331b      	adds	r3, #27
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	b21a      	sxth	r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	331a      	adds	r3, #26
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b21b      	sxth	r3, r3
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	015b      	lsls	r3, r3, #5
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d10f      	bne.n	8004c4c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	3315      	adds	r3, #21
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	b21a      	sxth	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	b21b      	sxth	r3, r3
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b21b      	sxth	r3, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

	return cl;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b004      	add	sp, #16
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	331a      	adds	r3, #26
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	331b      	adds	r3, #27
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	0c1a      	lsrs	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3314      	adds	r3, #20
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	0a1b      	lsrs	r3, r3, #8
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3315      	adds	r3, #21
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004ca0:	b5b0      	push	{r4, r5, r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	001a      	movs	r2, r3
 8004cb0:	2340      	movs	r3, #64	; 0x40
 8004cb2:	439a      	bics	r2, r3
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	1e5a      	subs	r2, r3, #1
 8004cb8:	0013      	movs	r3, r2
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	189b      	adds	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	189b      	adds	r3, r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	230e      	movs	r3, #14
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2201      	movs	r2, #1
 8004cce:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004cd0:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <cmp_lfn+0xf4>)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	b21a      	sxth	r2, r3
 8004ce4:	492b      	ldr	r1, [pc, #172]	; (8004d94 <cmp_lfn+0xf4>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	18cb      	adds	r3, r1, r3
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	0019      	movs	r1, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	185b      	adds	r3, r3, r1
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b21b      	sxth	r3, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b21a      	sxth	r2, r3
 8004cfa:	210c      	movs	r1, #12
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8004d00:	250e      	movs	r5, #14
 8004d02:	197b      	adds	r3, r7, r5
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01c      	beq.n	8004d44 <cmp_lfn+0xa4>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004d0a:	197c      	adds	r4, r7, r5
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f002 fb45 	bl	80073a0 <ff_wtoupper>
 8004d16:	0003      	movs	r3, r0
 8004d18:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2bfe      	cmp	r3, #254	; 0xfe
 8004d1e:	d80f      	bhi.n	8004d40 <cmp_lfn+0xa0>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	617a      	str	r2, [r7, #20]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	18d3      	adds	r3, r2, r3
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f002 fb36 	bl	80073a0 <ff_wtoupper>
 8004d34:	0003      	movs	r3, r0
 8004d36:	001a      	movs	r2, r3
 8004d38:	197b      	adds	r3, r7, r5
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <cmp_lfn+0xb4>
				return 0;				/* Not matched */
 8004d40:	2300      	movs	r3, #0
 8004d42:	e022      	b.n	8004d8a <cmp_lfn+0xea>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004d44:	230c      	movs	r3, #12
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <cmp_lfn+0xf8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d001      	beq.n	8004d54 <cmp_lfn+0xb4>
 8004d50:	2300      	movs	r3, #0
 8004d52:	e01a      	b.n	8004d8a <cmp_lfn+0xea>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	3301      	adds	r3, #1
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d9b7      	bls.n	8004cd0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	001a      	movs	r2, r3
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d00d      	beq.n	8004d88 <cmp_lfn+0xe8>
 8004d6c:	230e      	movs	r3, #14
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <cmp_lfn+0xe8>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	18d3      	adds	r3, r2, r3
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <cmp_lfn+0xe8>
		return 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e000      	b.n	8004d8a <cmp_lfn+0xea>

	return 1;						/* The part of LFN matched */
 8004d88:	2301      	movs	r3, #1
}
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b006      	add	sp, #24
 8004d90:	bdb0      	pop	{r4, r5, r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	0800763c 	.word	0x0800763c
 8004d98:	0000ffff 	.word	0x0000ffff

08004d9c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	0019      	movs	r1, r3
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	1dbb      	adds	r3, r7, #6
 8004dae:	1c0a      	adds	r2, r1, #0
 8004db0:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	330d      	adds	r3, #13
 8004db6:	1dba      	adds	r2, r7, #6
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	330b      	adds	r3, #11
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	331a      	adds	r3, #26
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	331b      	adds	r3, #27
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004ddc:	1dfb      	adds	r3, r7, #7
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	0013      	movs	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004dee:	2316      	movs	r3, #22
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004dfa:	2116      	movs	r1, #22
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <fit_lfn+0x100>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d008      	beq.n	8004e18 <fit_lfn+0x7c>
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	61fa      	str	r2, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	18d2      	adds	r2, r2, r3
 8004e12:	187b      	adds	r3, r7, r1
 8004e14:	8812      	ldrh	r2, [r2, #0]
 8004e16:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004e18:	4a21      	ldr	r2, [pc, #132]	; (8004ea0 <fit_lfn+0x104>)
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	18d3      	adds	r3, r2, r3
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	001a      	movs	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	2016      	movs	r0, #22
 8004e28:	183a      	adds	r2, r7, r0
 8004e2a:	8812      	ldrh	r2, [r2, #0]
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	183b      	adds	r3, r7, r0
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	b299      	uxth	r1, r3
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <fit_lfn+0x104>)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	18d3      	adds	r3, r2, r3
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	18d3      	adds	r3, r2, r3
 8004e46:	b2ca      	uxtb	r2, r1
 8004e48:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004e4a:	183b      	adds	r3, r7, r0
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <fit_lfn+0xbe>
 8004e52:	183b      	adds	r3, r7, r0
 8004e54:	2201      	movs	r2, #1
 8004e56:	4252      	negs	r2, r2
 8004e58:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d9c9      	bls.n	8004dfa <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004e66:	2316      	movs	r3, #22
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <fit_lfn+0x100>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d006      	beq.n	8004e80 <fit_lfn+0xe4>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	18d3      	adds	r3, r2, r3
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <fit_lfn+0xf0>
 8004e80:	1dfb      	adds	r3, r7, #7
 8004e82:	1dfa      	adds	r2, r7, #7
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	2140      	movs	r1, #64	; 0x40
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1dfa      	adds	r2, r7, #7
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	701a      	strb	r2, [r3, #0]
}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b008      	add	sp, #32
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	0000ffff 	.word	0x0000ffff
 8004ea0:	0800763c 	.word	0x0800763c

08004ea4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08c      	sub	sp, #48	; 0x30
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	220b      	movs	r2, #11
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7fe fc97 	bl	80037ec <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	d92f      	bls.n	8004f24 <gen_numname+0x80>
		sr = seq;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004ec8:	e026      	b.n	8004f18 <gen_numname+0x74>
			wc = *lfn++;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	1c9a      	adds	r2, r3, #2
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	2222      	movs	r2, #34	; 0x22
 8004ed2:	18ba      	adds	r2, r7, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004edc:	e019      	b.n	8004f12 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	005a      	lsls	r2, r3, #1
 8004ee2:	2022      	movs	r0, #34	; 0x22
 8004ee4:	183b      	adds	r3, r7, r0
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	2101      	movs	r1, #1
 8004eea:	400b      	ands	r3, r1
 8004eec:	18d3      	adds	r3, r2, r3
 8004eee:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004ef0:	183b      	adds	r3, r7, r0
 8004ef2:	183a      	adds	r2, r7, r0
 8004ef4:	8812      	ldrh	r2, [r2, #0]
 8004ef6:	0852      	lsrs	r2, r2, #1
 8004ef8:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	025b      	lsls	r3, r3, #9
 8004f00:	4013      	ands	r3, r2
 8004f02:	d003      	beq.n	8004f0c <gen_numname+0x68>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4a30      	ldr	r2, [pc, #192]	; (8004fc8 <gen_numname+0x124>)
 8004f08:	4053      	eors	r3, r2
 8004f0a:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	3301      	adds	r3, #1
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2b0f      	cmp	r3, #15
 8004f16:	d9e2      	bls.n	8004ede <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1d4      	bne.n	8004eca <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004f24:	2307      	movs	r3, #7
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	220f      	movs	r2, #15
 8004f2e:	4013      	ands	r3, r2
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	212f      	movs	r1, #47	; 0x2f
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	3230      	adds	r2, #48	; 0x30
 8004f38:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8004f3a:	187b      	adds	r3, r7, r1
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b39      	cmp	r3, #57	; 0x39
 8004f40:	d904      	bls.n	8004f4c <gen_numname+0xa8>
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	187a      	adds	r2, r7, r1
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	3207      	adds	r2, #7
 8004f4a:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f52:	2014      	movs	r0, #20
 8004f54:	183a      	adds	r2, r7, r0
 8004f56:	212f      	movs	r1, #47	; 0x2f
 8004f58:	1879      	adds	r1, r7, r1
 8004f5a:	7809      	ldrb	r1, [r1, #0]
 8004f5c:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1de      	bne.n	8004f28 <gen_numname+0x84>
	ns[i] = '~';
 8004f6a:	183a      	adds	r2, r7, r0
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	227e      	movs	r2, #126	; 0x7e
 8004f72:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f74:	2300      	movs	r3, #0
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
 8004f78:	e002      	b.n	8004f80 <gen_numname+0xdc>
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d205      	bcs.n	8004f94 <gen_numname+0xf0>
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	18d3      	adds	r3, r2, r3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d1f2      	bne.n	8004f7a <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	d806      	bhi.n	8004fa8 <gen_numname+0x104>
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fa0:	2214      	movs	r2, #20
 8004fa2:	18ba      	adds	r2, r7, r2
 8004fa4:	5cd1      	ldrb	r1, [r2, r3]
 8004fa6:	e000      	b.n	8004faa <gen_numname+0x106>
 8004fa8:	2120      	movs	r1, #32
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	627a      	str	r2, [r7, #36]	; 0x24
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	18d3      	adds	r3, r2, r3
 8004fb4:	1c0a      	adds	r2, r1, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	2b07      	cmp	r3, #7
 8004fbc:	d9ea      	bls.n	8004f94 <gen_numname+0xf0>
}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b00c      	add	sp, #48	; 0x30
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	00011021 	.word	0x00011021

08004fcc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004fd4:	230f      	movs	r3, #15
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8004fdc:	230b      	movs	r3, #11
 8004fde:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004fe0:	200f      	movs	r0, #15
 8004fe2:	183b      	adds	r3, r7, r0
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	0852      	lsrs	r2, r2, #1
 8004fea:	01db      	lsls	r3, r3, #7
 8004fec:	4313      	orrs	r3, r2
 8004fee:	b2d9      	uxtb	r1, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	188a      	adds	r2, r1, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3b01      	subs	r3, #1
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ea      	bne.n	8004fe0 <sum_sfn+0x14>
	return sum;
 800500a:	183b      	adds	r3, r7, r0
 800500c:	781b      	ldrb	r3, [r3, #0]
}
 800500e:	0018      	movs	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	b004      	add	sp, #16
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005018:	b5b0      	push	{r4, r5, r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005020:	2517      	movs	r5, #23
 8005022:	197c      	adds	r4, r7, r5
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2100      	movs	r1, #0
 8005028:	0018      	movs	r0, r3
 800502a:	f7ff fb71 	bl	8004710 <dir_sdi>
 800502e:	0003      	movs	r3, r0
 8005030:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8005032:	197b      	adds	r3, r7, r5
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <dir_find+0x28>
 800503a:	197b      	adds	r3, r7, r5
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	e0e3      	b.n	8005208 <dir_find+0x1f0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005040:	2114      	movs	r1, #20
 8005042:	187b      	adds	r3, r7, r1
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	2315      	movs	r3, #21
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	187a      	adds	r2, r7, r1
 800504e:	7812      	ldrb	r2, [r2, #0]
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <dir_find+0x1f8>)
 8005056:	2101      	movs	r1, #1
 8005058:	4249      	negs	r1, r1
 800505a:	5299      	strh	r1, [r3, r2]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	015b      	lsls	r3, r3, #5
 8005062:	58d2      	ldr	r2, [r2, r3]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	496b      	ldr	r1, [pc, #428]	; (8005214 <dir_find+0x1fc>)
 8005068:	585b      	ldr	r3, [r3, r1]
 800506a:	2517      	movs	r5, #23
 800506c:	197c      	adds	r4, r7, r5
 800506e:	0019      	movs	r1, r3
 8005070:	0010      	movs	r0, r2
 8005072:	f7fe fe49 	bl	8003d08 <move_window>
 8005076:	0003      	movs	r3, r0
 8005078:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800507a:	0029      	movs	r1, r5
 800507c:	187b      	adds	r3, r7, r1
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d000      	beq.n	8005086 <dir_find+0x6e>
 8005084:	e0b8      	b.n	80051f8 <dir_find+0x1e0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a63      	ldr	r2, [pc, #396]	; (8005218 <dir_find+0x200>)
 800508a:	589b      	ldr	r3, [r3, r2]
 800508c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800508e:	2016      	movs	r0, #22
 8005090:	183b      	adds	r3, r7, r0
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005098:	183b      	adds	r3, r7, r0
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d103      	bne.n	80050a8 <dir_find+0x90>
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	2204      	movs	r2, #4
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	e0ac      	b.n	8005202 <dir_find+0x1ea>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	330b      	adds	r3, #11
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	200f      	movs	r0, #15
 80050b0:	183b      	adds	r3, r7, r0
 80050b2:	213f      	movs	r1, #63	; 0x3f
 80050b4:	400a      	ands	r2, r1
 80050b6:	701a      	strb	r2, [r3, #0]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80050b8:	2316      	movs	r3, #22
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2be5      	cmp	r3, #229	; 0xe5
 80050c0:	d008      	beq.n	80050d4 <dir_find+0xbc>
 80050c2:	183b      	adds	r3, r7, r0
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2208      	movs	r2, #8
 80050c8:	4013      	ands	r3, r2
 80050ca:	d00d      	beq.n	80050e8 <dir_find+0xd0>
 80050cc:	183b      	adds	r3, r7, r0
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b0f      	cmp	r3, #15
 80050d2:	d009      	beq.n	80050e8 <dir_find+0xd0>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80050d4:	2315      	movs	r3, #21
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	22ff      	movs	r2, #255	; 0xff
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a4c      	ldr	r2, [pc, #304]	; (8005210 <dir_find+0x1f8>)
 80050e0:	2101      	movs	r1, #1
 80050e2:	4249      	negs	r1, r1
 80050e4:	5299      	strh	r1, [r3, r2]
 80050e6:	e078      	b.n	80051da <dir_find+0x1c2>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80050e8:	230f      	movs	r3, #15
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d147      	bne.n	8005182 <dir_find+0x16a>
				if (dp->lfn) {
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	2381      	movs	r3, #129	; 0x81
 80050f6:	015b      	lsls	r3, r3, #5
 80050f8:	58d3      	ldr	r3, [r2, r3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d100      	bne.n	8005100 <dir_find+0xe8>
 80050fe:	e06c      	b.n	80051da <dir_find+0x1c2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005100:	2016      	movs	r0, #22
 8005102:	183b      	adds	r3, r7, r0
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	4013      	ands	r3, r2
 800510a:	d015      	beq.n	8005138 <dir_find+0x120>
						sum = dir[LDIR_Chksum];
 800510c:	2314      	movs	r3, #20
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	7b52      	ldrb	r2, [r2, #13]
 8005114:	701a      	strb	r2, [r3, #0]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005116:	183b      	adds	r3, r7, r0
 8005118:	183a      	adds	r2, r7, r0
 800511a:	7812      	ldrb	r2, [r2, #0]
 800511c:	2140      	movs	r1, #64	; 0x40
 800511e:	438a      	bics	r2, r1
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	2315      	movs	r3, #21
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	183a      	adds	r2, r7, r0
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	701a      	strb	r2, [r3, #0]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3b      	ldr	r2, [pc, #236]	; (800521c <dir_find+0x204>)
 8005130:	5a99      	ldrh	r1, [r3, r2]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a36      	ldr	r2, [pc, #216]	; (8005210 <dir_find+0x1f8>)
 8005136:	5299      	strh	r1, [r3, r2]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005138:	2316      	movs	r3, #22
 800513a:	18fa      	adds	r2, r7, r3
 800513c:	2415      	movs	r4, #21
 800513e:	193b      	adds	r3, r7, r4
 8005140:	7812      	ldrb	r2, [r2, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d117      	bne.n	8005178 <dir_find+0x160>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	330d      	adds	r3, #13
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2214      	movs	r2, #20
 8005150:	18ba      	adds	r2, r7, r2
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d10f      	bne.n	8005178 <dir_find+0x160>
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	2381      	movs	r3, #129	; 0x81
 800515c:	015b      	lsls	r3, r3, #5
 800515e:	58d3      	ldr	r3, [r2, r3]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	0011      	movs	r1, r2
 8005164:	0018      	movs	r0, r3
 8005166:	f7ff fd9b 	bl	8004ca0 <cmp_lfn>
 800516a:	1e03      	subs	r3, r0, #0
 800516c:	d004      	beq.n	8005178 <dir_find+0x160>
 800516e:	193b      	adds	r3, r7, r4
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	3b01      	subs	r3, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	e000      	b.n	800517a <dir_find+0x162>
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	2315      	movs	r3, #21
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e02b      	b.n	80051da <dir_find+0x1c2>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005182:	2315      	movs	r3, #21
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <dir_find+0x18a>
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff ff1c 	bl	8004fcc <sum_sfn>
 8005194:	0003      	movs	r3, r0
 8005196:	001a      	movs	r2, r3
 8005198:	2314      	movs	r3, #20
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02c      	beq.n	80051fc <dir_find+0x1e4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <dir_find+0x208>)
 80051a6:	589b      	ldr	r3, [r3, r2]
 80051a8:	330b      	adds	r3, #11
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	001a      	movs	r2, r3
 80051ae:	2301      	movs	r3, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	d109      	bne.n	80051c8 <dir_find+0x1b0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <dir_find+0x208>)
 80051b8:	5899      	ldr	r1, [r3, r2]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	220b      	movs	r2, #11
 80051be:	0018      	movs	r0, r3
 80051c0:	f7fe fb4a 	bl	8003858 <mem_cmp>
 80051c4:	1e03      	subs	r3, r0, #0
 80051c6:	d01b      	beq.n	8005200 <dir_find+0x1e8>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80051c8:	2315      	movs	r3, #21
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	22ff      	movs	r2, #255	; 0xff
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <dir_find+0x1f8>)
 80051d4:	2101      	movs	r1, #1
 80051d6:	4249      	negs	r1, r1
 80051d8:	5299      	strh	r1, [r3, r2]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80051da:	2517      	movs	r5, #23
 80051dc:	197c      	adds	r4, r7, r5
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2100      	movs	r1, #0
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7ff fb68 	bl	80048b8 <dir_next>
 80051e8:	0003      	movs	r3, r0
 80051ea:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80051ec:	197b      	adds	r3, r7, r5
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d100      	bne.n	80051f6 <dir_find+0x1de>
 80051f4:	e732      	b.n	800505c <dir_find+0x44>
 80051f6:	e004      	b.n	8005202 <dir_find+0x1ea>
		if (res != FR_OK) break;
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	e002      	b.n	8005202 <dir_find+0x1ea>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	e000      	b.n	8005202 <dir_find+0x1ea>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005200:	46c0      	nop			; (mov r8, r8)

	return res;
 8005202:	2317      	movs	r3, #23
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	781b      	ldrb	r3, [r3, #0]
}
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b006      	add	sp, #24
 800520e:	bdb0      	pop	{r4, r5, r7, pc}
 8005210:	00001024 	.word	0x00001024
 8005214:	00001010 	.word	0x00001010
 8005218:	00001014 	.word	0x00001014
 800521c:	00001006 	.word	0x00001006
 8005220:	00001018 	.word	0x00001018

08005224 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005224:	b5b0      	push	{r4, r5, r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a94      	ldr	r2, [pc, #592]	; (8005480 <dir_register+0x25c>)
 8005230:	589b      	ldr	r3, [r3, r2]
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	2381      	movs	r3, #129	; 0x81
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	58d3      	ldr	r3, [r2, r3]
 800523c:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800523e:	6a39      	ldr	r1, [r7, #32]
 8005240:	240c      	movs	r4, #12
 8005242:	193b      	adds	r3, r7, r4
 8005244:	220c      	movs	r2, #12
 8005246:	0018      	movs	r0, r3
 8005248:	f7fe fad0 	bl	80037ec <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800524c:	193b      	adds	r3, r7, r4
 800524e:	7adb      	ldrb	r3, [r3, #11]
 8005250:	001a      	movs	r2, r3
 8005252:	2301      	movs	r3, #1
 8005254:	4013      	ands	r3, r2
 8005256:	d03e      	beq.n	80052d6 <dir_register+0xb2>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	330b      	adds	r3, #11
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	2381      	movs	r3, #129	; 0x81
 8005264:	015b      	lsls	r3, r3, #5
 8005266:	2100      	movs	r1, #0
 8005268:	50d1      	str	r1, [r2, r3]
		for (n = 1; n < 100; n++) {
 800526a:	2301      	movs	r3, #1
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
 800526e:	e015      	b.n	800529c <dir_register+0x78>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	210c      	movs	r1, #12
 8005276:	1879      	adds	r1, r7, r1
 8005278:	6a38      	ldr	r0, [r7, #32]
 800527a:	f7ff fe13 	bl	8004ea4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800527e:	252f      	movs	r5, #47	; 0x2f
 8005280:	197c      	adds	r4, r7, r5
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f7ff fec7 	bl	8005018 <dir_find>
 800528a:	0003      	movs	r3, r0
 800528c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800528e:	197b      	adds	r3, r7, r5
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <dir_register+0x80>
		for (n = 1; n < 100; n++) {
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	3301      	adds	r3, #1
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	2b63      	cmp	r3, #99	; 0x63
 80052a0:	d9e6      	bls.n	8005270 <dir_register+0x4c>
 80052a2:	e000      	b.n	80052a6 <dir_register+0x82>
			if (res != FR_OK) break;
 80052a4:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	2b64      	cmp	r3, #100	; 0x64
 80052aa:	d101      	bne.n	80052b0 <dir_register+0x8c>
 80052ac:	2307      	movs	r3, #7
 80052ae:	e0e2      	b.n	8005476 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80052b0:	222f      	movs	r2, #47	; 0x2f
 80052b2:	18bb      	adds	r3, r7, r2
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d002      	beq.n	80052c0 <dir_register+0x9c>
 80052ba:	18bb      	adds	r3, r7, r2
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	e0da      	b.n	8005476 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	330b      	adds	r3, #11
 80052c4:	220c      	movs	r2, #12
 80052c6:	18ba      	adds	r2, r7, r2
 80052c8:	7ad2      	ldrb	r2, [r2, #11]
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	2381      	movs	r3, #129	; 0x81
 80052d0:	015b      	lsls	r3, r3, #5
 80052d2:	69f9      	ldr	r1, [r7, #28]
 80052d4:	50d1      	str	r1, [r2, r3]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80052d6:	230c      	movs	r3, #12
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	7adb      	ldrb	r3, [r3, #11]
 80052dc:	001a      	movs	r2, r3
 80052de:	2302      	movs	r3, #2
 80052e0:	4013      	ands	r3, r2
 80052e2:	d015      	beq.n	8005310 <dir_register+0xec>
		for (n = 0; lfn[n]; n++) ;
 80052e4:	2300      	movs	r3, #0
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e8:	e002      	b.n	80052f0 <dir_register+0xcc>
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	3301      	adds	r3, #1
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	18d3      	adds	r3, r2, r3
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f5      	bne.n	80052ea <dir_register+0xc6>
		nent = (n + 25) / 13;
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	3319      	adds	r3, #25
 8005302:	210d      	movs	r1, #13
 8005304:	0018      	movs	r0, r3
 8005306:	f7fa ff07 	bl	8000118 <__udivsi3>
 800530a:	0003      	movs	r3, r0
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
 800530e:	e001      	b.n	8005314 <dir_register+0xf0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005310:	2301      	movs	r3, #1
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005314:	252f      	movs	r5, #47	; 0x2f
 8005316:	197c      	adds	r4, r7, r5
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0011      	movs	r1, r2
 800531e:	0018      	movs	r0, r3
 8005320:	f7ff fc0c 	bl	8004b3c <dir_alloc>
 8005324:	0003      	movs	r3, r0
 8005326:	7023      	strb	r3, [r4, #0]

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005328:	0029      	movs	r1, r5
 800532a:	187b      	adds	r3, r7, r1
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d160      	bne.n	80053f4 <dir_register+0x1d0>
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	3b01      	subs	r3, #1
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d05a      	beq.n	80053f4 <dir_register+0x1d0>
		res = dir_sdi(dp, dp->index - nent);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a50      	ldr	r2, [pc, #320]	; (8005484 <dir_register+0x260>)
 8005342:	5a9b      	ldrh	r3, [r3, r2]
 8005344:	001a      	movs	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad2      	subs	r2, r2, r3
 800534a:	000d      	movs	r5, r1
 800534c:	187c      	adds	r4, r7, r1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0011      	movs	r1, r2
 8005352:	0018      	movs	r0, r3
 8005354:	f7ff f9dc 	bl	8004710 <dir_sdi>
 8005358:	0003      	movs	r3, r0
 800535a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800535c:	197b      	adds	r3, r7, r5
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d147      	bne.n	80053f4 <dir_register+0x1d0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a46      	ldr	r2, [pc, #280]	; (8005480 <dir_register+0x25c>)
 8005368:	589b      	ldr	r3, [r3, r2]
 800536a:	221b      	movs	r2, #27
 800536c:	18bc      	adds	r4, r7, r2
 800536e:	0018      	movs	r0, r3
 8005370:	f7ff fe2c 	bl	8004fcc <sum_sfn>
 8005374:	0003      	movs	r3, r0
 8005376:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	015b      	lsls	r3, r3, #5
 800537e:	58d2      	ldr	r2, [r2, r3]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4941      	ldr	r1, [pc, #260]	; (8005488 <dir_register+0x264>)
 8005384:	585b      	ldr	r3, [r3, r1]
 8005386:	252f      	movs	r5, #47	; 0x2f
 8005388:	197c      	adds	r4, r7, r5
 800538a:	0019      	movs	r1, r3
 800538c:	0010      	movs	r0, r2
 800538e:	f7fe fcbb 	bl	8003d08 <move_window>
 8005392:	0003      	movs	r3, r0
 8005394:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8005396:	002c      	movs	r4, r5
 8005398:	193b      	adds	r3, r7, r4
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d128      	bne.n	80053f2 <dir_register+0x1ce>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	2381      	movs	r3, #129	; 0x81
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	58d0      	ldr	r0, [r2, r3]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a38      	ldr	r2, [pc, #224]	; (800548c <dir_register+0x268>)
 80053ac:	5899      	ldr	r1, [r3, r2]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	231b      	movs	r3, #27
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f7ff fcf0 	bl	8004d9c <fit_lfn>
				dp->fs->wflag = 1;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	015b      	lsls	r3, r3, #5
 80053c2:	58d3      	ldr	r3, [r2, r3]
 80053c4:	4a32      	ldr	r2, [pc, #200]	; (8005490 <dir_register+0x26c>)
 80053c6:	2101      	movs	r1, #1
 80053c8:	5499      	strb	r1, [r3, r2]
				res = dir_next(dp, 0);	/* Next entry */
 80053ca:	0025      	movs	r5, r4
 80053cc:	193c      	adds	r4, r7, r4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2100      	movs	r1, #0
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7ff fa70 	bl	80048b8 <dir_next>
 80053d8:	0003      	movs	r3, r0
 80053da:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80053dc:	197b      	adds	r3, r7, r5
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d107      	bne.n	80053f4 <dir_register+0x1d0>
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	3b01      	subs	r3, #1
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1c3      	bne.n	8005378 <dir_register+0x154>
 80053f0:	e000      	b.n	80053f4 <dir_register+0x1d0>
				if (res != FR_OK) break;
 80053f2:	46c0      	nop			; (mov r8, r8)
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80053f4:	202f      	movs	r0, #47	; 0x2f
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d138      	bne.n	8005470 <dir_register+0x24c>
		res = move_window(dp->fs, dp->sect);
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	015b      	lsls	r3, r3, #5
 8005404:	58d2      	ldr	r2, [r2, r3]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	491f      	ldr	r1, [pc, #124]	; (8005488 <dir_register+0x264>)
 800540a:	585b      	ldr	r3, [r3, r1]
 800540c:	0005      	movs	r5, r0
 800540e:	183c      	adds	r4, r7, r0
 8005410:	0019      	movs	r1, r3
 8005412:	0010      	movs	r0, r2
 8005414:	f7fe fc78 	bl	8003d08 <move_window>
 8005418:	0003      	movs	r3, r0
 800541a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800541c:	197b      	adds	r3, r7, r5
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d125      	bne.n	8005470 <dir_register+0x24c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <dir_register+0x268>)
 8005428:	589b      	ldr	r3, [r3, r2]
 800542a:	2220      	movs	r2, #32
 800542c:	2100      	movs	r1, #0
 800542e:	0018      	movs	r0, r3
 8005430:	f7fe f9f9 	bl	8003826 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a15      	ldr	r2, [pc, #84]	; (800548c <dir_register+0x268>)
 8005438:	5898      	ldr	r0, [r3, r2]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a10      	ldr	r2, [pc, #64]	; (8005480 <dir_register+0x25c>)
 800543e:	589b      	ldr	r3, [r3, r2]
 8005440:	220b      	movs	r2, #11
 8005442:	0019      	movs	r1, r3
 8005444:	f7fe f9d2 	bl	80037ec <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a0d      	ldr	r2, [pc, #52]	; (8005480 <dir_register+0x25c>)
 800544c:	589b      	ldr	r3, [r3, r2]
 800544e:	330b      	adds	r3, #11
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	490d      	ldr	r1, [pc, #52]	; (800548c <dir_register+0x268>)
 8005456:	585b      	ldr	r3, [r3, r1]
 8005458:	330c      	adds	r3, #12
 800545a:	2118      	movs	r1, #24
 800545c:	400a      	ands	r2, r1
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	015b      	lsls	r3, r3, #5
 8005468:	58d3      	ldr	r3, [r2, r3]
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <dir_register+0x26c>)
 800546c:	2101      	movs	r1, #1
 800546e:	5499      	strb	r1, [r3, r2]
		}
	}

	return res;
 8005470:	232f      	movs	r3, #47	; 0x2f
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	781b      	ldrb	r3, [r3, #0]
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b00c      	add	sp, #48	; 0x30
 800547c:	bdb0      	pop	{r4, r5, r7, pc}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	00001018 	.word	0x00001018
 8005484:	00001006 	.word	0x00001006
 8005488:	00001010 	.word	0x00001010
 800548c:	00001014 	.word	0x00001014
 8005490:	00001004 	.word	0x00001004

08005494 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005494:	b5b0      	push	{r4, r5, r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	e002      	b.n	80054ac <create_name+0x18>
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3301      	adds	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b2f      	cmp	r3, #47	; 0x2f
 80054b2:	d0f8      	beq.n	80054a6 <create_name+0x12>
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b5c      	cmp	r3, #92	; 0x5c
 80054ba:	d0f4      	beq.n	80054a6 <create_name+0x12>
	lfn = dp->lfn;
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	2381      	movs	r3, #129	; 0x81
 80054c0:	015b      	lsls	r3, r3, #5
 80054c2:	58d3      	ldr	r3, [r2, r3]
 80054c4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	61ba      	str	r2, [r7, #24]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	2124      	movs	r1, #36	; 0x24
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80054e0:	000a      	movs	r2, r1
 80054e2:	18bb      	adds	r3, r7, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	2b1f      	cmp	r3, #31
 80054e8:	d93d      	bls.n	8005566 <create_name+0xd2>
 80054ea:	18bb      	adds	r3, r7, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	2b2f      	cmp	r3, #47	; 0x2f
 80054f0:	d039      	beq.n	8005566 <create_name+0xd2>
 80054f2:	18bb      	adds	r3, r7, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	2b5c      	cmp	r3, #92	; 0x5c
 80054f8:	d035      	beq.n	8005566 <create_name+0xd2>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2bfe      	cmp	r3, #254	; 0xfe
 80054fe:	d901      	bls.n	8005504 <create_name+0x70>
			return FR_INVALID_NAME;
 8005500:	2306      	movs	r3, #6
 8005502:	e1c8      	b.n	8005896 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005504:	2524      	movs	r5, #36	; 0x24
 8005506:	197b      	adds	r3, r7, r5
 8005508:	197a      	adds	r2, r7, r5
 800550a:	8812      	ldrh	r2, [r2, #0]
 800550c:	21ff      	movs	r1, #255	; 0xff
 800550e:	400a      	ands	r2, r1
 8005510:	801a      	strh	r2, [r3, #0]
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005512:	197c      	adds	r4, r7, r5
 8005514:	197b      	adds	r3, r7, r5
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	2101      	movs	r1, #1
 800551a:	0018      	movs	r0, r3
 800551c:	f001 feee 	bl	80072fc <ff_convert>
 8005520:	0003      	movs	r3, r0
 8005522:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005524:	197b      	adds	r3, r7, r5
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <create_name+0x9c>
 800552c:	2306      	movs	r3, #6
 800552e:	e1b2      	b.n	8005896 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005530:	2224      	movs	r2, #36	; 0x24
 8005532:	18bb      	adds	r3, r7, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	2b7f      	cmp	r3, #127	; 0x7f
 8005538:	d80a      	bhi.n	8005550 <create_name+0xbc>
 800553a:	18bb      	adds	r3, r7, r2
 800553c:	881a      	ldrh	r2, [r3, #0]
 800553e:	4ba7      	ldr	r3, [pc, #668]	; (80057dc <create_name+0x348>)
 8005540:	0011      	movs	r1, r2
 8005542:	0018      	movs	r0, r3
 8005544:	f7fe f9ad 	bl	80038a2 <chk_chr>
 8005548:	1e03      	subs	r3, r0, #0
 800554a:	d001      	beq.n	8005550 <create_name+0xbc>
			return FR_INVALID_NAME;
 800554c:	2306      	movs	r3, #6
 800554e:	e1a2      	b.n	8005896 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	617a      	str	r2, [r7, #20]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	18d3      	adds	r3, r2, r3
 800555c:	2224      	movs	r2, #36	; 0x24
 800555e:	18ba      	adds	r2, r7, r2
 8005560:	8812      	ldrh	r2, [r2, #0]
 8005562:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005564:	e7b3      	b.n	80054ce <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	18d2      	adds	r2, r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005570:	2324      	movs	r3, #36	; 0x24
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	2b1f      	cmp	r3, #31
 8005578:	d801      	bhi.n	800557e <create_name+0xea>
 800557a:	2204      	movs	r2, #4
 800557c:	e000      	b.n	8005580 <create_name+0xec>
 800557e:	2200      	movs	r2, #0
 8005580:	2327      	movs	r3, #39	; 0x27
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005586:	e016      	b.n	80055b6 <create_name+0x122>
		w = lfn[di - 1];
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4a95      	ldr	r2, [pc, #596]	; (80057e0 <create_name+0x34c>)
 800558c:	4694      	mov	ip, r2
 800558e:	4463      	add	r3, ip
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	18d2      	adds	r2, r2, r3
 8005596:	2124      	movs	r1, #36	; 0x24
 8005598:	187b      	adds	r3, r7, r1
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 800559e:	000a      	movs	r2, r1
 80055a0:	18bb      	adds	r3, r7, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d003      	beq.n	80055b0 <create_name+0x11c>
 80055a8:	18bb      	adds	r3, r7, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	2b2e      	cmp	r3, #46	; 0x2e
 80055ae:	d106      	bne.n	80055be <create_name+0x12a>
		di--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <create_name+0xf4>
 80055bc:	e000      	b.n	80055c0 <create_name+0x12c>
		if (w != ' ' && w != '.') break;
 80055be:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <create_name+0x136>
 80055c6:	2306      	movs	r3, #6
 80055c8:	e165      	b.n	8005896 <create_name+0x402>

	lfn[di] = 0;						/* LFN is created */
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	18d3      	adds	r3, r2, r3
 80055d2:	2200      	movs	r2, #0
 80055d4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a82      	ldr	r2, [pc, #520]	; (80057e4 <create_name+0x350>)
 80055da:	589b      	ldr	r3, [r3, r2]
 80055dc:	220b      	movs	r2, #11
 80055de:	2120      	movs	r1, #32
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7fe f920 	bl	8003826 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e002      	b.n	80055f2 <create_name+0x15e>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	18d3      	adds	r3, r2, r3
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d0f5      	beq.n	80055ec <create_name+0x158>
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	18d3      	adds	r3, r2, r3
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	2b2e      	cmp	r3, #46	; 0x2e
 800560c:	d0ee      	beq.n	80055ec <create_name+0x158>
	if (si) cf |= NS_LOSS | NS_LFN;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <create_name+0x196>
 8005614:	2227      	movs	r2, #39	; 0x27
 8005616:	18bb      	adds	r3, r7, r2
 8005618:	18ba      	adds	r2, r7, r2
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	2103      	movs	r1, #3
 800561e:	430a      	orrs	r2, r1
 8005620:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005622:	e002      	b.n	800562a <create_name+0x196>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3b01      	subs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <create_name+0x1b0>
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4a6b      	ldr	r2, [pc, #428]	; (80057e0 <create_name+0x34c>)
 8005634:	4694      	mov	ip, r2
 8005636:	4463      	add	r3, ip
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	2b2e      	cmp	r3, #46	; 0x2e
 8005642:	d1ef      	bne.n	8005624 <create_name+0x190>

	b = i = 0; ni = 8;
 8005644:	2300      	movs	r3, #0
 8005646:	623b      	str	r3, [r7, #32]
 8005648:	2326      	movs	r3, #38	; 0x26
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	2308      	movs	r3, #8
 8005652:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	61ba      	str	r2, [r7, #24]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	18d2      	adds	r2, r2, r3
 8005660:	2124      	movs	r1, #36	; 0x24
 8005662:	187b      	adds	r3, r7, r1
 8005664:	8812      	ldrh	r2, [r2, #0]
 8005666:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8005668:	000a      	movs	r2, r1
 800566a:	18bb      	adds	r3, r7, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d100      	bne.n	8005674 <create_name+0x1e0>
 8005672:	e0b0      	b.n	80057d6 <create_name+0x342>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005674:	18bb      	adds	r3, r7, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	2b20      	cmp	r3, #32
 800567a:	d007      	beq.n	800568c <create_name+0x1f8>
 800567c:	18bb      	adds	r3, r7, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	2b2e      	cmp	r3, #46	; 0x2e
 8005682:	d10b      	bne.n	800569c <create_name+0x208>
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	d007      	beq.n	800569c <create_name+0x208>
			cf |= NS_LOSS | NS_LFN; continue;
 800568c:	2227      	movs	r2, #39	; 0x27
 800568e:	18bb      	adds	r3, r7, r2
 8005690:	18ba      	adds	r2, r7, r2
 8005692:	7812      	ldrb	r2, [r2, #0]
 8005694:	2103      	movs	r1, #3
 8005696:	430a      	orrs	r2, r1
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e09b      	b.n	80057d4 <create_name+0x340>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d203      	bcs.n	80056ac <create_name+0x218>
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d127      	bne.n	80056fc <create_name+0x268>
			if (ni == 11) {				/* Long extension */
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b0b      	cmp	r3, #11
 80056b0:	d107      	bne.n	80056c2 <create_name+0x22e>
				cf |= NS_LOSS | NS_LFN; break;
 80056b2:	2227      	movs	r2, #39	; 0x27
 80056b4:	18bb      	adds	r3, r7, r2
 80056b6:	18ba      	adds	r2, r7, r2
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	2103      	movs	r1, #3
 80056bc:	430a      	orrs	r2, r1
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e097      	b.n	80057f2 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d006      	beq.n	80056d8 <create_name+0x244>
 80056ca:	2227      	movs	r2, #39	; 0x27
 80056cc:	18bb      	adds	r3, r7, r2
 80056ce:	18ba      	adds	r2, r7, r2
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	2103      	movs	r1, #3
 80056d4:	430a      	orrs	r2, r1
 80056d6:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d900      	bls.n	80056e2 <create_name+0x24e>
 80056e0:	e086      	b.n	80057f0 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	2308      	movs	r3, #8
 80056e8:	623b      	str	r3, [r7, #32]
 80056ea:	230b      	movs	r3, #11
 80056ec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80056ee:	2226      	movs	r2, #38	; 0x26
 80056f0:	18bb      	adds	r3, r7, r2
 80056f2:	18ba      	adds	r2, r7, r2
 80056f4:	7812      	ldrb	r2, [r2, #0]
 80056f6:	0092      	lsls	r2, r2, #2
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e06b      	b.n	80057d4 <create_name+0x340>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80056fc:	2524      	movs	r5, #36	; 0x24
 80056fe:	197b      	adds	r3, r7, r5
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	2b7f      	cmp	r3, #127	; 0x7f
 8005704:	d91a      	bls.n	800573c <create_name+0x2a8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005706:	197c      	adds	r4, r7, r5
 8005708:	197b      	adds	r3, r7, r5
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	2100      	movs	r1, #0
 800570e:	0018      	movs	r0, r3
 8005710:	f001 fdf4 	bl	80072fc <ff_convert>
 8005714:	0003      	movs	r3, r0
 8005716:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005718:	197b      	adds	r3, r7, r5
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d006      	beq.n	800572e <create_name+0x29a>
 8005720:	197b      	adds	r3, r7, r5
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	3b80      	subs	r3, #128	; 0x80
 8005726:	4a30      	ldr	r2, [pc, #192]	; (80057e8 <create_name+0x354>)
 8005728:	5cd2      	ldrb	r2, [r2, r3]
 800572a:	197b      	adds	r3, r7, r5
 800572c:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800572e:	2227      	movs	r2, #39	; 0x27
 8005730:	18bb      	adds	r3, r7, r2
 8005732:	18ba      	adds	r2, r7, r2
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	2102      	movs	r1, #2
 8005738:	430a      	orrs	r2, r1
 800573a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800573c:	2224      	movs	r2, #36	; 0x24
 800573e:	18bb      	adds	r3, r7, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <create_name+0x2c4>
 8005746:	18bb      	adds	r3, r7, r2
 8005748:	881a      	ldrh	r2, [r3, #0]
 800574a:	4b28      	ldr	r3, [pc, #160]	; (80057ec <create_name+0x358>)
 800574c:	0011      	movs	r1, r2
 800574e:	0018      	movs	r0, r3
 8005750:	f7fe f8a7 	bl	80038a2 <chk_chr>
 8005754:	1e03      	subs	r3, r0, #0
 8005756:	d00b      	beq.n	8005770 <create_name+0x2dc>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005758:	2324      	movs	r3, #36	; 0x24
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	225f      	movs	r2, #95	; 0x5f
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	2227      	movs	r2, #39	; 0x27
 8005762:	18bb      	adds	r3, r7, r2
 8005764:	18ba      	adds	r2, r7, r2
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	2103      	movs	r1, #3
 800576a:	430a      	orrs	r2, r1
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e025      	b.n	80057bc <create_name+0x328>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005770:	2224      	movs	r2, #36	; 0x24
 8005772:	18bb      	adds	r3, r7, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d90b      	bls.n	8005792 <create_name+0x2fe>
 800577a:	18bb      	adds	r3, r7, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	2b5a      	cmp	r3, #90	; 0x5a
 8005780:	d807      	bhi.n	8005792 <create_name+0x2fe>
					b |= 2;
 8005782:	2226      	movs	r2, #38	; 0x26
 8005784:	18bb      	adds	r3, r7, r2
 8005786:	18ba      	adds	r2, r7, r2
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	2102      	movs	r1, #2
 800578c:	430a      	orrs	r2, r1
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e014      	b.n	80057bc <create_name+0x328>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005792:	2024      	movs	r0, #36	; 0x24
 8005794:	183b      	adds	r3, r7, r0
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d90f      	bls.n	80057bc <create_name+0x328>
 800579c:	183b      	adds	r3, r7, r0
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	2b7a      	cmp	r3, #122	; 0x7a
 80057a2:	d80b      	bhi.n	80057bc <create_name+0x328>
						b |= 1; w -= 0x20;
 80057a4:	2226      	movs	r2, #38	; 0x26
 80057a6:	18bb      	adds	r3, r7, r2
 80057a8:	18ba      	adds	r2, r7, r2
 80057aa:	7812      	ldrb	r2, [r2, #0]
 80057ac:	2101      	movs	r1, #1
 80057ae:	430a      	orrs	r2, r1
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	183b      	adds	r3, r7, r0
 80057b4:	183a      	adds	r2, r7, r0
 80057b6:	8812      	ldrh	r2, [r2, #0]
 80057b8:	3a20      	subs	r2, #32
 80057ba:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <create_name+0x350>)
 80057c0:	589a      	ldr	r2, [r3, r2]
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	1c59      	adds	r1, r3, #1
 80057c6:	6239      	str	r1, [r7, #32]
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	2224      	movs	r2, #36	; 0x24
 80057cc:	18ba      	adds	r2, r7, r2
 80057ce:	8812      	ldrh	r2, [r2, #0]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80057d4:	e73e      	b.n	8005654 <create_name+0x1c0>
		if (!w) break;					/* Break on end of the LFN */
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	e00b      	b.n	80057f2 <create_name+0x35e>
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	08007524 	.word	0x08007524
 80057e0:	7fffffff 	.word	0x7fffffff
 80057e4:	00001018 	.word	0x00001018
 80057e8:	080075bc 	.word	0x080075bc
 80057ec:	08007530 	.word	0x08007530
			if (si > di) break;			/* No extension */
 80057f0:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <create_name+0x40c>)
 80057f6:	589b      	ldr	r3, [r3, r2]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2be5      	cmp	r3, #229	; 0xe5
 80057fc:	d104      	bne.n	8005808 <create_name+0x374>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a27      	ldr	r2, [pc, #156]	; (80058a0 <create_name+0x40c>)
 8005802:	589b      	ldr	r3, [r3, r2]
 8005804:	2205      	movs	r2, #5
 8005806:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b08      	cmp	r3, #8
 800580c:	d105      	bne.n	800581a <create_name+0x386>
 800580e:	2226      	movs	r2, #38	; 0x26
 8005810:	18bb      	adds	r3, r7, r2
 8005812:	18ba      	adds	r2, r7, r2
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800581a:	2126      	movs	r1, #38	; 0x26
 800581c:	187b      	adds	r3, r7, r1
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	220c      	movs	r2, #12
 8005822:	4013      	ands	r3, r2
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d005      	beq.n	8005834 <create_name+0x3a0>
 8005828:	187b      	adds	r3, r7, r1
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2203      	movs	r2, #3
 800582e:	4013      	ands	r3, r2
 8005830:	2b03      	cmp	r3, #3
 8005832:	d106      	bne.n	8005842 <create_name+0x3ae>
		cf |= NS_LFN;
 8005834:	2227      	movs	r2, #39	; 0x27
 8005836:	18bb      	adds	r3, r7, r2
 8005838:	18ba      	adds	r2, r7, r2
 800583a:	7812      	ldrb	r2, [r2, #0]
 800583c:	2102      	movs	r1, #2
 800583e:	430a      	orrs	r2, r1
 8005840:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005842:	2127      	movs	r1, #39	; 0x27
 8005844:	187b      	adds	r3, r7, r1
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2202      	movs	r2, #2
 800584a:	4013      	ands	r3, r2
 800584c:	d11a      	bne.n	8005884 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800584e:	2326      	movs	r3, #38	; 0x26
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2203      	movs	r2, #3
 8005856:	4013      	ands	r3, r2
 8005858:	2b01      	cmp	r3, #1
 800585a:	d105      	bne.n	8005868 <create_name+0x3d4>
 800585c:	187b      	adds	r3, r7, r1
 800585e:	187a      	adds	r2, r7, r1
 8005860:	7812      	ldrb	r2, [r2, #0]
 8005862:	2110      	movs	r1, #16
 8005864:	430a      	orrs	r2, r1
 8005866:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005868:	2326      	movs	r3, #38	; 0x26
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	220c      	movs	r2, #12
 8005870:	4013      	ands	r3, r2
 8005872:	2b04      	cmp	r3, #4
 8005874:	d106      	bne.n	8005884 <create_name+0x3f0>
 8005876:	2227      	movs	r2, #39	; 0x27
 8005878:	18bb      	adds	r3, r7, r2
 800587a:	18ba      	adds	r2, r7, r2
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	2108      	movs	r1, #8
 8005880:	430a      	orrs	r2, r1
 8005882:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a06      	ldr	r2, [pc, #24]	; (80058a0 <create_name+0x40c>)
 8005888:	589b      	ldr	r3, [r3, r2]
 800588a:	330b      	adds	r3, #11
 800588c:	2227      	movs	r2, #39	; 0x27
 800588e:	18ba      	adds	r2, r7, r2
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005894:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005896:	0018      	movs	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	b00a      	add	sp, #40	; 0x28
 800589c:	bdb0      	pop	{r4, r5, r7, pc}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	00001018 	.word	0x00001018

080058a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80058a4:	b5b0      	push	{r4, r5, r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b2f      	cmp	r3, #47	; 0x2f
 80058b4:	d003      	beq.n	80058be <follow_path+0x1a>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b5c      	cmp	r3, #92	; 0x5c
 80058bc:	d102      	bne.n	80058c4 <follow_path+0x20>
		path++;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a39      	ldr	r2, [pc, #228]	; (80059ac <follow_path+0x108>)
 80058c8:	2100      	movs	r1, #0
 80058ca:	5099      	str	r1, [r3, r2]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b1f      	cmp	r3, #31
 80058d2:	d80d      	bhi.n	80058f0 <follow_path+0x4c>
		res = dir_sdi(dp, 0);
 80058d4:	230f      	movs	r3, #15
 80058d6:	18fc      	adds	r4, r7, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2100      	movs	r1, #0
 80058dc:	0018      	movs	r0, r3
 80058de:	f7fe ff17 	bl	8004710 <dir_sdi>
 80058e2:	0003      	movs	r3, r0
 80058e4:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a31      	ldr	r2, [pc, #196]	; (80059b0 <follow_path+0x10c>)
 80058ea:	2100      	movs	r1, #0
 80058ec:	5099      	str	r1, [r3, r2]
 80058ee:	e055      	b.n	800599c <follow_path+0xf8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80058f0:	250f      	movs	r5, #15
 80058f2:	197c      	adds	r4, r7, r5
 80058f4:	003a      	movs	r2, r7
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0011      	movs	r1, r2
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7ff fdca 	bl	8005494 <create_name>
 8005900:	0003      	movs	r3, r0
 8005902:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005904:	197b      	adds	r3, r7, r5
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d142      	bne.n	8005992 <follow_path+0xee>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800590c:	197c      	adds	r4, r7, r5
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff fb81 	bl	8005018 <dir_find>
 8005916:	0003      	movs	r3, r0
 8005918:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <follow_path+0x110>)
 800591e:	589a      	ldr	r2, [r3, r2]
 8005920:	210e      	movs	r1, #14
 8005922:	187b      	adds	r3, r7, r1
 8005924:	7ad2      	ldrb	r2, [r2, #11]
 8005926:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8005928:	197b      	adds	r3, r7, r5
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <follow_path+0xa6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005930:	197b      	adds	r3, r7, r5
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d12e      	bne.n	8005996 <follow_path+0xf2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005938:	187b      	adds	r3, r7, r1
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2204      	movs	r2, #4
 800593e:	4013      	ands	r3, r2
 8005940:	d129      	bne.n	8005996 <follow_path+0xf2>
 8005942:	197b      	adds	r3, r7, r5
 8005944:	2205      	movs	r2, #5
 8005946:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8005948:	e025      	b.n	8005996 <follow_path+0xf2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800594a:	230e      	movs	r3, #14
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2204      	movs	r2, #4
 8005952:	4013      	ands	r3, r2
 8005954:	d121      	bne.n	800599a <follow_path+0xf6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <follow_path+0x10c>)
 800595a:	589b      	ldr	r3, [r3, r2]
 800595c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	330b      	adds	r3, #11
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	001a      	movs	r2, r3
 8005966:	2310      	movs	r3, #16
 8005968:	4013      	ands	r3, r2
 800596a:	d104      	bne.n	8005976 <follow_path+0xd2>
				res = FR_NO_PATH; break;
 800596c:	230f      	movs	r3, #15
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	2205      	movs	r2, #5
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e012      	b.n	800599c <follow_path+0xf8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	015b      	lsls	r3, r3, #5
 800597c:	58d3      	ldr	r3, [r2, r3]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	0011      	movs	r1, r2
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff f93a 	bl	8004bfc <ld_clust>
 8005988:	0002      	movs	r2, r0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4907      	ldr	r1, [pc, #28]	; (80059ac <follow_path+0x108>)
 800598e:	505a      	str	r2, [r3, r1]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005990:	e7ae      	b.n	80058f0 <follow_path+0x4c>
			if (res != FR_OK) break;
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	e002      	b.n	800599c <follow_path+0xf8>
				break;
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	e000      	b.n	800599c <follow_path+0xf8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800599a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800599c:	230f      	movs	r3, #15
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	781b      	ldrb	r3, [r3, #0]
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b004      	add	sp, #16
 80059a8:	bdb0      	pop	{r4, r5, r7, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	00001008 	.word	0x00001008
 80059b0:	00001014 	.word	0x00001014
 80059b4:	00001018 	.word	0x00001018

080059b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80059c0:	2301      	movs	r3, #1
 80059c2:	425b      	negs	r3, r3
 80059c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d031      	beq.n	8005a32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e002      	b.n	80059dc <get_ldnumber+0x24>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3301      	adds	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b1f      	cmp	r3, #31
 80059e2:	d903      	bls.n	80059ec <get_ldnumber+0x34>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b3a      	cmp	r3, #58	; 0x3a
 80059ea:	d1f4      	bne.n	80059d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b3a      	cmp	r3, #58	; 0x3a
 80059f2:	d11c      	bne.n	8005a2e <get_ldnumber+0x76>
			tp = *path;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	60fa      	str	r2, [r7, #12]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	3b30      	subs	r3, #48	; 0x30
 8005a04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b09      	cmp	r3, #9
 8005a0a:	d80e      	bhi.n	8005a2a <get_ldnumber+0x72>
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d10a      	bne.n	8005a2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <get_ldnumber+0x72>
					vol = (int)i;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	3301      	adds	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	e002      	b.n	8005a34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005a32:	693b      	ldr	r3, [r7, #16]
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b006      	add	sp, #24
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a30      	ldr	r2, [pc, #192]	; (8005b0c <check_fs+0xd0>)
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	5499      	strb	r1, [r3, r2]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	492f      	ldr	r1, [pc, #188]	; (8005b10 <check_fs+0xd4>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	4252      	negs	r2, r2
 8005a56:	505a      	str	r2, [r3, r1]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	0011      	movs	r1, r2
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f7fe f952 	bl	8003d08 <move_window>
 8005a64:	1e03      	subs	r3, r0, #0
 8005a66:	d001      	beq.n	8005a6c <check_fs+0x30>
		return 3;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e04b      	b.n	8005b04 <check_fs+0xc8>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	33ff      	adds	r3, #255	; 0xff
 8005a70:	33ff      	adds	r3, #255	; 0xff
 8005a72:	3301      	adds	r3, #1
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	b21a      	sxth	r2, r3
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	23ff      	movs	r3, #255	; 0xff
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	5ccb      	ldrb	r3, [r1, r3]
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	4313      	orrs	r3, r2
 8005a86:	b21b      	sxth	r3, r3
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <check_fs+0xd8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d001      	beq.n	8005a92 <check_fs+0x56>
		return 2;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e038      	b.n	8005b04 <check_fs+0xc8>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3336      	adds	r3, #54	; 0x36
 8005a96:	3303      	adds	r3, #3
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	061a      	lsls	r2, r3, #24
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3336      	adds	r3, #54	; 0x36
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	3236      	adds	r2, #54	; 0x36
 8005aac:	3201      	adds	r2, #1
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	0212      	lsls	r2, r2, #8
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	2136      	movs	r1, #54	; 0x36
 8005ab8:	5c52      	ldrb	r2, [r2, r1]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <check_fs+0xdc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d101      	bne.n	8005aca <check_fs+0x8e>
		return 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e01c      	b.n	8005b04 <check_fs+0xc8>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3352      	adds	r3, #82	; 0x52
 8005ace:	3303      	adds	r3, #3
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	061a      	lsls	r2, r3, #24
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3352      	adds	r3, #82	; 0x52
 8005ad8:	3302      	adds	r3, #2
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	3252      	adds	r2, #82	; 0x52
 8005ae4:	3201      	adds	r2, #1
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	0212      	lsls	r2, r2, #8
 8005aea:	4313      	orrs	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	2152      	movs	r1, #82	; 0x52
 8005af0:	5c52      	ldrb	r2, [r2, r1]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	4a07      	ldr	r2, [pc, #28]	; (8005b18 <check_fs+0xdc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <check_fs+0xc6>
		return 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e000      	b.n	8005b04 <check_fs+0xc8>

	return 1;
 8005b02:	2301      	movs	r3, #1
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	00001004 	.word	0x00001004
 8005b10:	0000102c 	.word	0x0000102c
 8005b14:	ffffaa55 	.word	0xffffaa55
 8005b18:	00544146 	.word	0x00544146

08005b1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005b1c:	b5b0      	push	{r4, r5, r7, lr}
 8005b1e:	b096      	sub	sp, #88	; 0x58
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	1dfb      	adds	r3, r7, #7
 8005b28:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f7ff ff40 	bl	80059b8 <get_ldnumber>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da01      	bge.n	8005b46 <find_volume+0x2a>
 8005b42:	230b      	movs	r3, #11
 8005b44:	e31a      	b.n	800617c <find_volume+0x660>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005b46:	4bcf      	ldr	r3, [pc, #828]	; (8005e84 <find_volume+0x368>)
 8005b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b4a:	0092      	lsls	r2, r2, #2
 8005b4c:	58d3      	ldr	r3, [r2, r3]
 8005b4e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <find_volume+0x3e>
 8005b56:	230c      	movs	r3, #12
 8005b58:	e310      	b.n	800617c <find_volume+0x660>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b5e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	015b      	lsls	r3, r3, #5
 8005b66:	5cd3      	ldrb	r3, [r2, r3]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01c      	beq.n	8005ba6 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	4ac6      	ldr	r2, [pc, #792]	; (8005e88 <find_volume+0x36c>)
 8005b70:	5c9b      	ldrb	r3, [r3, r2]
 8005b72:	2537      	movs	r5, #55	; 0x37
 8005b74:	197c      	adds	r4, r7, r5
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7fd fd6e 	bl	8003658 <disk_status>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b80:	0029      	movs	r1, r5
 8005b82:	187b      	adds	r3, r7, r1
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d10c      	bne.n	8005ba6 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005b8c:	1dfb      	adds	r3, r7, #7
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <find_volume+0x86>
 8005b94:	187b      	adds	r3, r7, r1
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d001      	beq.n	8005ba2 <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8005b9e:	230a      	movs	r3, #10
 8005ba0:	e2ec      	b.n	800617c <find_volume+0x660>
			return FR_OK;				/* The file system object is valid */
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e2ea      	b.n	800617c <find_volume+0x660>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	015b      	lsls	r3, r3, #5
 8005bac:	2100      	movs	r1, #0
 8005bae:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb2:	b2d9      	uxtb	r1, r3
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	4ab4      	ldr	r2, [pc, #720]	; (8005e88 <find_volume+0x36c>)
 8005bb8:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	4ab2      	ldr	r2, [pc, #712]	; (8005e88 <find_volume+0x36c>)
 8005bbe:	5c9b      	ldrb	r3, [r3, r2]
 8005bc0:	2537      	movs	r5, #55	; 0x37
 8005bc2:	197c      	adds	r4, r7, r5
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f7fd fd69 	bl	800369c <disk_initialize>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005bce:	197b      	adds	r3, r7, r5
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d001      	beq.n	8005bdc <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e2cf      	b.n	800617c <find_volume+0x660>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <find_volume+0xd8>
 8005be4:	2337      	movs	r3, #55	; 0x37
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2204      	movs	r2, #4
 8005bec:	4013      	ands	r3, r2
 8005bee:	d001      	beq.n	8005bf4 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8005bf0:	230a      	movs	r3, #10
 8005bf2:	e2c3      	b.n	800617c <find_volume+0x660>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	4aa4      	ldr	r2, [pc, #656]	; (8005e88 <find_volume+0x36c>)
 8005bf8:	5c98      	ldrb	r0, [r3, r2]
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	4aa3      	ldr	r2, [pc, #652]	; (8005e8c <find_volume+0x370>)
 8005bfe:	4694      	mov	ip, r2
 8005c00:	4463      	add	r3, ip
 8005c02:	001a      	movs	r2, r3
 8005c04:	2102      	movs	r1, #2
 8005c06:	f7fd fdc9 	bl	800379c <disk_ioctl>
 8005c0a:	1e03      	subs	r3, r0, #0
 8005c0c:	d10d      	bne.n	8005c2a <find_volume+0x10e>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	4a9e      	ldr	r2, [pc, #632]	; (8005e8c <find_volume+0x370>)
 8005c12:	5a9a      	ldrh	r2, [r3, r2]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d306      	bcc.n	8005c2a <find_volume+0x10e>
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	4a9b      	ldr	r2, [pc, #620]	; (8005e8c <find_volume+0x370>)
 8005c20:	5a9a      	ldrh	r2, [r3, r2]
 8005c22:	2380      	movs	r3, #128	; 0x80
 8005c24:	015b      	lsls	r3, r3, #5
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d901      	bls.n	8005c2e <find_volume+0x112>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e2a6      	b.n	800617c <find_volume+0x660>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005c32:	2557      	movs	r5, #87	; 0x57
 8005c34:	197c      	adds	r4, r7, r5
 8005c36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f7ff fefd 	bl	8005a3c <check_fs>
 8005c42:	0003      	movs	r3, r0
 8005c44:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005c46:	197b      	adds	r3, r7, r5
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d155      	bne.n	8005cfa <find_volume+0x1de>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005c4e:	2300      	movs	r3, #0
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
 8005c52:	e027      	b.n	8005ca4 <find_volume+0x188>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	33bf      	adds	r3, #191	; 0xbf
 8005c5c:	33ff      	adds	r3, #255	; 0xff
 8005c5e:	18d3      	adds	r3, r2, r3
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	3304      	adds	r3, #4
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <find_volume+0x176>
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	330b      	adds	r3, #11
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	061a      	lsls	r2, r3, #24
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	330a      	adds	r3, #10
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c80:	3209      	adds	r2, #9
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	0212      	lsls	r2, r2, #8
 8005c86:	4313      	orrs	r3, r2
 8005c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8a:	3208      	adds	r2, #8
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	e000      	b.n	8005c94 <find_volume+0x178>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2214      	movs	r2, #20
 8005c96:	18ba      	adds	r2, r7, r2
 8005c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c9a:	0089      	lsls	r1, r1, #2
 8005c9c:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d9d4      	bls.n	8005c54 <find_volume+0x138>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005caa:	2300      	movs	r3, #0
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <find_volume+0x19e>
 8005cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005cba:	2314      	movs	r3, #20
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cc0:	0092      	lsls	r2, r2, #2
 8005cc2:	58d3      	ldr	r3, [r2, r3]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <find_volume+0x1c2>
 8005ccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	0011      	movs	r1, r2
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f7ff feb2 	bl	8005a3c <check_fs>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	001a      	movs	r2, r3
 8005cdc:	e000      	b.n	8005ce0 <find_volume+0x1c4>
 8005cde:	2202      	movs	r2, #2
 8005ce0:	2157      	movs	r1, #87	; 0x57
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005ce6:	187b      	adds	r3, r7, r1
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <find_volume+0x1de>
 8005cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d9df      	bls.n	8005cba <find_volume+0x19e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005cfa:	2357      	movs	r3, #87	; 0x57
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d101      	bne.n	8005d08 <find_volume+0x1ec>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e239      	b.n	800617c <find_volume+0x660>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005d08:	2357      	movs	r3, #87	; 0x57
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <find_volume+0x1fa>
 8005d12:	230d      	movs	r3, #13
 8005d14:	e232      	b.n	800617c <find_volume+0x660>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	7b1b      	ldrb	r3, [r3, #12]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	b21a      	sxth	r2, r3
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	7adb      	ldrb	r3, [r3, #11]
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b21a      	sxth	r2, r3
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	4958      	ldr	r1, [pc, #352]	; (8005e8c <find_volume+0x370>)
 8005d2c:	5a5b      	ldrh	r3, [r3, r1]
 8005d2e:	b21b      	sxth	r3, r3
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <find_volume+0x21c>
		return FR_NO_FILESYSTEM;
 8005d34:	230d      	movs	r3, #13
 8005d36:	e221      	b.n	800617c <find_volume+0x660>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	7ddb      	ldrb	r3, [r3, #23]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	b21a      	sxth	r2, r3
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	7d9b      	ldrb	r3, [r3, #22]
 8005d44:	b21b      	sxth	r3, r3
 8005d46:	4313      	orrs	r3, r2
 8005d48:	b21b      	sxth	r3, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d112      	bne.n	8005d7a <find_volume+0x25e>
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	2227      	movs	r2, #39	; 0x27
 8005d58:	5c9b      	ldrb	r3, [r3, r2]
 8005d5a:	061a      	lsls	r2, r3, #24
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	2126      	movs	r1, #38	; 0x26
 8005d60:	5c5b      	ldrb	r3, [r3, r1]
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	4313      	orrs	r3, r2
 8005d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d68:	2125      	movs	r1, #37	; 0x25
 8005d6a:	5c52      	ldrb	r2, [r2, r1]
 8005d6c:	0212      	lsls	r2, r2, #8
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d72:	2124      	movs	r1, #36	; 0x24
 8005d74:	5c52      	ldrb	r2, [r2, r1]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	4944      	ldr	r1, [pc, #272]	; (8005e90 <find_volume+0x374>)
 8005d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d80:	505a      	str	r2, [r3, r1]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	7c19      	ldrb	r1, [r3, #16]
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	4a42      	ldr	r2, [pc, #264]	; (8005e94 <find_volume+0x378>)
 8005d8a:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	4a41      	ldr	r2, [pc, #260]	; (8005e94 <find_volume+0x378>)
 8005d90:	5c9b      	ldrb	r3, [r3, r2]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d006      	beq.n	8005da4 <find_volume+0x288>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	4a3e      	ldr	r2, [pc, #248]	; (8005e94 <find_volume+0x378>)
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d001      	beq.n	8005da4 <find_volume+0x288>
		return FR_NO_FILESYSTEM;
 8005da0:	230d      	movs	r3, #13
 8005da2:	e1eb      	b.n	800617c <find_volume+0x660>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	4a3b      	ldr	r2, [pc, #236]	; (8005e94 <find_volume+0x378>)
 8005da8:	5c9b      	ldrb	r3, [r3, r2]
 8005daa:	001a      	movs	r2, r3
 8005dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dae:	4353      	muls	r3, r2
 8005db0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	7b59      	ldrb	r1, [r3, #13]
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <find_volume+0x37c>)
 8005dba:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	4a36      	ldr	r2, [pc, #216]	; (8005e98 <find_volume+0x37c>)
 8005dc0:	5c9b      	ldrb	r3, [r3, r2]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <find_volume+0x2be>
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	4a33      	ldr	r2, [pc, #204]	; (8005e98 <find_volume+0x37c>)
 8005dca:	5c9b      	ldrb	r3, [r3, r2]
 8005dcc:	0019      	movs	r1, r3
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <find_volume+0x37c>)
 8005dd2:	5c9b      	ldrb	r3, [r3, r2]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	400b      	ands	r3, r1
 8005dd8:	d001      	beq.n	8005dde <find_volume+0x2c2>
		return FR_NO_FILESYSTEM;
 8005dda:	230d      	movs	r3, #13
 8005ddc:	e1ce      	b.n	800617c <find_volume+0x660>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	7c9b      	ldrb	r3, [r3, #18]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	b21a      	sxth	r2, r3
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	7c5b      	ldrb	r3, [r3, #17]
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	4313      	orrs	r3, r2
 8005dee:	b21b      	sxth	r3, r3
 8005df0:	b299      	uxth	r1, r3
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	4a29      	ldr	r2, [pc, #164]	; (8005e9c <find_volume+0x380>)
 8005df6:	5299      	strh	r1, [r3, r2]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <find_volume+0x380>)
 8005dfc:	5a9a      	ldrh	r2, [r3, r2]
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	4922      	ldr	r1, [pc, #136]	; (8005e8c <find_volume+0x370>)
 8005e02:	5a5b      	ldrh	r3, [r3, r1]
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	0019      	movs	r1, r3
 8005e0a:	0010      	movs	r0, r2
 8005e0c:	f7fa fa0a 	bl	8000224 <__aeabi_uidivmod>
 8005e10:	000b      	movs	r3, r1
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <find_volume+0x300>
		return FR_NO_FILESYSTEM;
 8005e18:	230d      	movs	r3, #13
 8005e1a:	e1af      	b.n	800617c <find_volume+0x660>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	7d1b      	ldrb	r3, [r3, #20]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	b21a      	sxth	r2, r3
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	7cdb      	ldrb	r3, [r3, #19]
 8005e28:	b21b      	sxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b21b      	sxth	r3, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d112      	bne.n	8005e5e <find_volume+0x342>
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	2223      	movs	r2, #35	; 0x23
 8005e3c:	5c9b      	ldrb	r3, [r3, r2]
 8005e3e:	061a      	lsls	r2, r3, #24
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	2122      	movs	r1, #34	; 0x22
 8005e44:	5c5b      	ldrb	r3, [r3, r1]
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e4c:	2121      	movs	r1, #33	; 0x21
 8005e4e:	5c52      	ldrb	r2, [r2, r1]
 8005e50:	0212      	lsls	r2, r2, #8
 8005e52:	4313      	orrs	r3, r2
 8005e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e56:	2120      	movs	r1, #32
 8005e58:	5c52      	ldrb	r2, [r2, r1]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	7bdb      	ldrb	r3, [r3, #15]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	b21a      	sxth	r2, r3
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	7b9b      	ldrb	r3, [r3, #14]
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b21a      	sxth	r2, r3
 8005e70:	212e      	movs	r1, #46	; 0x2e
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005e76:	187b      	adds	r3, r7, r1
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d110      	bne.n	8005ea0 <find_volume+0x384>
 8005e7e:	230d      	movs	r3, #13
 8005e80:	e17c      	b.n	800617c <find_volume+0x660>
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	20002228 	.word	0x20002228
 8005e88:	00001001 	.word	0x00001001
 8005e8c:	0000100a 	.word	0x0000100a
 8005e90:	00001018 	.word	0x00001018
 8005e94:	00001003 	.word	0x00001003
 8005e98:	00001002 	.word	0x00001002
 8005e9c:	00001008 	.word	0x00001008

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005ea0:	232e      	movs	r3, #46	; 0x2e
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	18d4      	adds	r4, r2, r3
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	4ab5      	ldr	r2, [pc, #724]	; (8006184 <find_volume+0x668>)
 8005eae:	5a9a      	ldrh	r2, [r3, r2]
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	49b5      	ldr	r1, [pc, #724]	; (8006188 <find_volume+0x66c>)
 8005eb4:	5a5b      	ldrh	r3, [r3, r1]
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	0019      	movs	r1, r3
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	f7fa f92b 	bl	8000118 <__udivsi3>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	18e3      	adds	r3, r4, r3
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d201      	bcs.n	8005ed6 <find_volume+0x3ba>
 8005ed2:	230d      	movs	r3, #13
 8005ed4:	e152      	b.n	800617c <find_volume+0x660>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	1ad2      	subs	r2, r2, r3
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	49ab      	ldr	r1, [pc, #684]	; (800618c <find_volume+0x670>)
 8005ee0:	5c5b      	ldrb	r3, [r3, r1]
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	0010      	movs	r0, r2
 8005ee6:	f7fa f917 	bl	8000118 <__udivsi3>
 8005eea:	0003      	movs	r3, r0
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <find_volume+0x3dc>
 8005ef4:	230d      	movs	r3, #13
 8005ef6:	e141      	b.n	800617c <find_volume+0x660>
	fmt = FS_FAT12;
 8005ef8:	2157      	movs	r1, #87	; 0x57
 8005efa:	187b      	adds	r3, r7, r1
 8005efc:	2201      	movs	r2, #1
 8005efe:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	4aa3      	ldr	r2, [pc, #652]	; (8006190 <find_volume+0x674>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d902      	bls.n	8005f0e <find_volume+0x3f2>
 8005f08:	187b      	adds	r3, r7, r1
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	4aa0      	ldr	r2, [pc, #640]	; (8006194 <find_volume+0x678>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d903      	bls.n	8005f1e <find_volume+0x402>
 8005f16:	2357      	movs	r3, #87	; 0x57
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	1c9a      	adds	r2, r3, #2
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	499c      	ldr	r1, [pc, #624]	; (8006198 <find_volume+0x67c>)
 8005f26:	505a      	str	r2, [r3, r1]
	fs->volbase = bsect;								/* Volume start sector */
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	499c      	ldr	r1, [pc, #624]	; (800619c <find_volume+0x680>)
 8005f2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f2e:	505a      	str	r2, [r3, r1]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005f30:	232e      	movs	r3, #46	; 0x2e
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	881a      	ldrh	r2, [r3, #0]
 8005f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f38:	18d1      	adds	r1, r2, r3
 8005f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3c:	2381      	movs	r3, #129	; 0x81
 8005f3e:	015b      	lsls	r3, r3, #5
 8005f40:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8005f42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	18d2      	adds	r2, r2, r3
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	4995      	ldr	r1, [pc, #596]	; (80061a0 <find_volume+0x684>)
 8005f4c:	505a      	str	r2, [r3, r1]
	if (fmt == FS_FAT32) {
 8005f4e:	2357      	movs	r3, #87	; 0x57
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d121      	bne.n	8005f9c <find_volume+0x480>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	4a8a      	ldr	r2, [pc, #552]	; (8006184 <find_volume+0x668>)
 8005f5c:	5a9b      	ldrh	r3, [r3, r2]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <find_volume+0x44a>
 8005f62:	230d      	movs	r3, #13
 8005f64:	e10a      	b.n	800617c <find_volume+0x660>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	222f      	movs	r2, #47	; 0x2f
 8005f6a:	5c9b      	ldrb	r3, [r3, r2]
 8005f6c:	061a      	lsls	r2, r3, #24
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	212e      	movs	r1, #46	; 0x2e
 8005f72:	5c5b      	ldrb	r3, [r3, r1]
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	4313      	orrs	r3, r2
 8005f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f7a:	212d      	movs	r1, #45	; 0x2d
 8005f7c:	5c52      	ldrb	r2, [r2, r1]
 8005f7e:	0212      	lsls	r2, r2, #8
 8005f80:	4313      	orrs	r3, r2
 8005f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f84:	212c      	movs	r1, #44	; 0x2c
 8005f86:	5c52      	ldrb	r2, [r2, r1]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	4985      	ldr	r1, [pc, #532]	; (80061a4 <find_volume+0x688>)
 8005f8e:	505a      	str	r2, [r3, r1]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	4a81      	ldr	r2, [pc, #516]	; (8006198 <find_volume+0x67c>)
 8005f94:	589b      	ldr	r3, [r3, r2]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9a:	e027      	b.n	8005fec <find_volume+0x4d0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	4a79      	ldr	r2, [pc, #484]	; (8006184 <find_volume+0x668>)
 8005fa0:	5a9b      	ldrh	r3, [r3, r2]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <find_volume+0x48e>
 8005fa6:	230d      	movs	r3, #13
 8005fa8:	e0e8      	b.n	800617c <find_volume+0x660>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fac:	2381      	movs	r3, #129	; 0x81
 8005fae:	015b      	lsls	r3, r3, #5
 8005fb0:	58d2      	ldr	r2, [r2, r3]
 8005fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb4:	18d2      	adds	r2, r2, r3
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	497a      	ldr	r1, [pc, #488]	; (80061a4 <find_volume+0x688>)
 8005fba:	505a      	str	r2, [r3, r1]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005fbc:	2357      	movs	r3, #87	; 0x57
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d104      	bne.n	8005fd0 <find_volume+0x4b4>
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	4a73      	ldr	r2, [pc, #460]	; (8006198 <find_volume+0x67c>)
 8005fca:	589b      	ldr	r3, [r3, r2]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	e00c      	b.n	8005fea <find_volume+0x4ce>
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	4a71      	ldr	r2, [pc, #452]	; (8006198 <find_volume+0x67c>)
 8005fd4:	589a      	ldr	r2, [r3, r2]
 8005fd6:	0013      	movs	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	189b      	adds	r3, r3, r2
 8005fdc:	085a      	lsrs	r2, r3, #1
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	496d      	ldr	r1, [pc, #436]	; (8006198 <find_volume+0x67c>)
 8005fe2:	585b      	ldr	r3, [r3, r1]
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	400b      	ands	r3, r1
 8005fe8:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005fea:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	4a6e      	ldr	r2, [pc, #440]	; (80061a8 <find_volume+0x68c>)
 8005ff0:	589c      	ldr	r4, [r3, r2]
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	4a64      	ldr	r2, [pc, #400]	; (8006188 <find_volume+0x66c>)
 8005ff6:	5a9b      	ldrh	r3, [r3, r2]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffc:	18d3      	adds	r3, r2, r3
 8005ffe:	1e5a      	subs	r2, r3, #1
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	4961      	ldr	r1, [pc, #388]	; (8006188 <find_volume+0x66c>)
 8006004:	5a5b      	ldrh	r3, [r3, r1]
 8006006:	0019      	movs	r1, r3
 8006008:	0010      	movs	r0, r2
 800600a:	f7fa f885 	bl	8000118 <__udivsi3>
 800600e:	0003      	movs	r3, r0
 8006010:	429c      	cmp	r4, r3
 8006012:	d201      	bcs.n	8006018 <find_volume+0x4fc>
		return FR_NO_FILESYSTEM;
 8006014:	230d      	movs	r3, #13
 8006016:	e0b1      	b.n	800617c <find_volume+0x660>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	4964      	ldr	r1, [pc, #400]	; (80061ac <find_volume+0x690>)
 800601c:	2201      	movs	r2, #1
 800601e:	4252      	negs	r2, r2
 8006020:	505a      	str	r2, [r3, r1]
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	4a61      	ldr	r2, [pc, #388]	; (80061ac <find_volume+0x690>)
 8006026:	589a      	ldr	r2, [r3, r2]
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	4961      	ldr	r1, [pc, #388]	; (80061b0 <find_volume+0x694>)
 800602c:	505a      	str	r2, [r3, r1]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	4a60      	ldr	r2, [pc, #384]	; (80061b4 <find_volume+0x698>)
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006036:	2357      	movs	r3, #87	; 0x57
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d000      	beq.n	8006042 <find_volume+0x526>
 8006040:	e085      	b.n	800614e <find_volume+0x632>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	2231      	movs	r2, #49	; 0x31
 8006046:	5c9b      	ldrb	r3, [r3, r2]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	b21a      	sxth	r2, r3
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	2130      	movs	r1, #48	; 0x30
 8006050:	5c5b      	ldrb	r3, [r3, r1]
 8006052:	b21b      	sxth	r3, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	b21b      	sxth	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d000      	beq.n	800605e <find_volume+0x542>
 800605c:	e077      	b.n	800614e <find_volume+0x632>
		&& move_window(fs, bsect + 1) == FR_OK)
 800605e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	0011      	movs	r1, r2
 8006066:	0018      	movs	r0, r3
 8006068:	f7fd fe4e 	bl	8003d08 <move_window>
 800606c:	1e03      	subs	r3, r0, #0
 800606e:	d16e      	bne.n	800614e <find_volume+0x632>
	{
		fs->fsi_flag = 0;
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	4a50      	ldr	r2, [pc, #320]	; (80061b4 <find_volume+0x698>)
 8006074:	2100      	movs	r1, #0
 8006076:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	4a4f      	ldr	r2, [pc, #316]	; (80061b8 <find_volume+0x69c>)
 800607c:	5c9b      	ldrb	r3, [r3, r2]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	b21a      	sxth	r2, r3
 8006082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006084:	23ff      	movs	r3, #255	; 0xff
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	5ccb      	ldrb	r3, [r1, r3]
 800608a:	b21b      	sxth	r3, r3
 800608c:	4313      	orrs	r3, r2
 800608e:	b21b      	sxth	r3, r3
 8006090:	4a4a      	ldr	r2, [pc, #296]	; (80061bc <find_volume+0x6a0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d15b      	bne.n	800614e <find_volume+0x632>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	78db      	ldrb	r3, [r3, #3]
 800609a:	061a      	lsls	r2, r3, #24
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	789b      	ldrb	r3, [r3, #2]
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	4313      	orrs	r3, r2
 80060a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a6:	7852      	ldrb	r2, [r2, #1]
 80060a8:	0212      	lsls	r2, r2, #8
 80060aa:	4313      	orrs	r3, r2
 80060ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	4a43      	ldr	r2, [pc, #268]	; (80061c0 <find_volume+0x6a4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d14a      	bne.n	800614e <find_volume+0x632>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80060b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ba:	23e8      	movs	r3, #232	; 0xe8
 80060bc:	33ff      	adds	r3, #255	; 0xff
 80060be:	5cd3      	ldrb	r3, [r2, r3]
 80060c0:	061a      	lsls	r2, r3, #24
 80060c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c4:	23f3      	movs	r3, #243	; 0xf3
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	5ccb      	ldrb	r3, [r1, r3]
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	4313      	orrs	r3, r2
 80060ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060d0:	22e6      	movs	r2, #230	; 0xe6
 80060d2:	32ff      	adds	r2, #255	; 0xff
 80060d4:	5c8a      	ldrb	r2, [r1, r2]
 80060d6:	0212      	lsls	r2, r2, #8
 80060d8:	4313      	orrs	r3, r2
 80060da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060dc:	22f2      	movs	r2, #242	; 0xf2
 80060de:	0052      	lsls	r2, r2, #1
 80060e0:	5c8a      	ldrb	r2, [r1, r2]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	4a37      	ldr	r2, [pc, #220]	; (80061c4 <find_volume+0x6a8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d131      	bne.n	800614e <find_volume+0x632>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80060ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ec:	23ec      	movs	r3, #236	; 0xec
 80060ee:	33ff      	adds	r3, #255	; 0xff
 80060f0:	5cd3      	ldrb	r3, [r2, r3]
 80060f2:	061a      	lsls	r2, r3, #24
 80060f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060f6:	23f5      	movs	r3, #245	; 0xf5
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	5ccb      	ldrb	r3, [r1, r3]
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	4313      	orrs	r3, r2
 8006100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006102:	22ea      	movs	r2, #234	; 0xea
 8006104:	32ff      	adds	r2, #255	; 0xff
 8006106:	5c8a      	ldrb	r2, [r1, r2]
 8006108:	0212      	lsls	r2, r2, #8
 800610a:	4313      	orrs	r3, r2
 800610c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800610e:	22f4      	movs	r2, #244	; 0xf4
 8006110:	0052      	lsls	r2, r2, #1
 8006112:	5c8a      	ldrb	r2, [r1, r2]
 8006114:	431a      	orrs	r2, r3
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	4924      	ldr	r1, [pc, #144]	; (80061ac <find_volume+0x690>)
 800611a:	505a      	str	r2, [r3, r1]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800611c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611e:	23f0      	movs	r3, #240	; 0xf0
 8006120:	33ff      	adds	r3, #255	; 0xff
 8006122:	5cd3      	ldrb	r3, [r2, r3]
 8006124:	061a      	lsls	r2, r3, #24
 8006126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006128:	23f7      	movs	r3, #247	; 0xf7
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	5ccb      	ldrb	r3, [r1, r3]
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	4313      	orrs	r3, r2
 8006132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006134:	22ee      	movs	r2, #238	; 0xee
 8006136:	32ff      	adds	r2, #255	; 0xff
 8006138:	5c8a      	ldrb	r2, [r1, r2]
 800613a:	0212      	lsls	r2, r2, #8
 800613c:	4313      	orrs	r3, r2
 800613e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006140:	22f6      	movs	r2, #246	; 0xf6
 8006142:	0052      	lsls	r2, r2, #1
 8006144:	5c8a      	ldrb	r2, [r1, r2]
 8006146:	431a      	orrs	r2, r3
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	4919      	ldr	r1, [pc, #100]	; (80061b0 <find_volume+0x694>)
 800614c:	505a      	str	r2, [r3, r1]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800614e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006150:	2357      	movs	r3, #87	; 0x57
 8006152:	18f9      	adds	r1, r7, r3
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	015b      	lsls	r3, r3, #5
 8006158:	7809      	ldrb	r1, [r1, #0]
 800615a:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 800615c:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <find_volume+0x6ac>)
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <find_volume+0x6ac>)
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	4b17      	ldr	r3, [pc, #92]	; (80061c8 <find_volume+0x6ac>)
 800616a:	8819      	ldrh	r1, [r3, #0]
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	4a17      	ldr	r2, [pc, #92]	; (80061cc <find_volume+0x6b0>)
 8006170:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	0018      	movs	r0, r3
 8006176:	f7fd fd49 	bl	8003c0c <clear_lock>
#endif

	return FR_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b016      	add	sp, #88	; 0x58
 8006182:	bdb0      	pop	{r4, r5, r7, pc}
 8006184:	00001008 	.word	0x00001008
 8006188:	0000100a 	.word	0x0000100a
 800618c:	00001002 	.word	0x00001002
 8006190:	00000ff5 	.word	0x00000ff5
 8006194:	0000fff5 	.word	0x0000fff5
 8006198:	00001014 	.word	0x00001014
 800619c:	0000101c 	.word	0x0000101c
 80061a0:	00001028 	.word	0x00001028
 80061a4:	00001024 	.word	0x00001024
 80061a8:	00001018 	.word	0x00001018
 80061ac:	00001010 	.word	0x00001010
 80061b0:	0000100c 	.word	0x0000100c
 80061b4:	00001005 	.word	0x00001005
 80061b8:	000001ff 	.word	0x000001ff
 80061bc:	ffffaa55 	.word	0xffffaa55
 80061c0:	41615252 	.word	0x41615252
 80061c4:	61417272 	.word	0x61417272
 80061c8:	2000222c 	.word	0x2000222c
 80061cc:	00001006 	.word	0x00001006

080061d0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d027      	beq.n	8006232 <validate+0x62>
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	015b      	lsls	r3, r3, #5
 80061e8:	58d3      	ldr	r3, [r2, r3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d021      	beq.n	8006232 <validate+0x62>
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	015b      	lsls	r3, r3, #5
 80061f4:	58d2      	ldr	r2, [r2, r3]
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	015b      	lsls	r3, r3, #5
 80061fa:	5cd3      	ldrb	r3, [r2, r3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d018      	beq.n	8006232 <validate+0x62>
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	015b      	lsls	r3, r3, #5
 8006206:	58d3      	ldr	r3, [r2, r3]
 8006208:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <validate+0x70>)
 800620a:	5a9a      	ldrh	r2, [r3, r2]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	490d      	ldr	r1, [pc, #52]	; (8006244 <validate+0x74>)
 8006210:	5a5b      	ldrh	r3, [r3, r1]
 8006212:	429a      	cmp	r2, r3
 8006214:	d10d      	bne.n	8006232 <validate+0x62>
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	015b      	lsls	r3, r3, #5
 800621c:	58d3      	ldr	r3, [r2, r3]
 800621e:	4a0a      	ldr	r2, [pc, #40]	; (8006248 <validate+0x78>)
 8006220:	5c9b      	ldrb	r3, [r3, r2]
 8006222:	0018      	movs	r0, r3
 8006224:	f7fd fa18 	bl	8003658 <disk_status>
 8006228:	0003      	movs	r3, r0
 800622a:	001a      	movs	r2, r3
 800622c:	2301      	movs	r3, #1
 800622e:	4013      	ands	r3, r2
 8006230:	d001      	beq.n	8006236 <validate+0x66>
		return FR_INVALID_OBJECT;
 8006232:	2309      	movs	r3, #9
 8006234:	e000      	b.n	8006238 <validate+0x68>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	0018      	movs	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	b004      	add	sp, #16
 800623e:	bd80      	pop	{r7, pc}
 8006240:	00001006 	.word	0x00001006
 8006244:	00001004 	.word	0x00001004
 8006248:	00001001 	.word	0x00001001

0800624c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	1dfb      	adds	r3, r7, #7
 8006258:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800625e:	2310      	movs	r3, #16
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	0018      	movs	r0, r3
 8006264:	f7ff fba8 	bl	80059b8 <get_ldnumber>
 8006268:	0003      	movs	r3, r0
 800626a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	da01      	bge.n	8006276 <f_mount+0x2a>
 8006272:	230b      	movs	r3, #11
 8006274:	e034      	b.n	80062e0 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006276:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <f_mount+0x9c>)
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	0092      	lsls	r2, r2, #2
 800627c:	58d3      	ldr	r3, [r2, r3]
 800627e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	0018      	movs	r0, r3
 800628a:	f7fd fcbf 	bl	8003c0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	015b      	lsls	r3, r3, #5
 8006294:	2100      	movs	r1, #0
 8006296:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	015b      	lsls	r3, r3, #5
 80062a4:	2100      	movs	r1, #0
 80062a6:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <f_mount+0x9c>)
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	0092      	lsls	r2, r2, #2
 80062b0:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <f_mount+0x74>
 80062b8:	1dfb      	adds	r3, r7, #7
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d001      	beq.n	80062c4 <f_mount+0x78>
 80062c0:	2300      	movs	r3, #0
 80062c2:	e00d      	b.n	80062e0 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80062c4:	2517      	movs	r5, #23
 80062c6:	197c      	adds	r4, r7, r5
 80062c8:	2308      	movs	r3, #8
 80062ca:	18f9      	adds	r1, r7, r3
 80062cc:	230c      	movs	r3, #12
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	2200      	movs	r2, #0
 80062d2:	0018      	movs	r0, r3
 80062d4:	f7ff fc22 	bl	8005b1c <find_volume>
 80062d8:	0003      	movs	r3, r0
 80062da:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80062dc:	197b      	adds	r3, r7, r5
 80062de:	781b      	ldrb	r3, [r3, #0]
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b008      	add	sp, #32
 80062e6:	bdb0      	pop	{r4, r5, r7, pc}
 80062e8:	20002228 	.word	0x20002228

080062ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ee:	4cc8      	ldr	r4, [pc, #800]	; (8006610 <f_open+0x324>)
 80062f0:	44a5      	add	sp, r4
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	4bc6      	ldr	r3, [pc, #792]	; (8006614 <f_open+0x328>)
 80062fa:	49c7      	ldr	r1, [pc, #796]	; (8006618 <f_open+0x32c>)
 80062fc:	185b      	adds	r3, r3, r1
 80062fe:	19db      	adds	r3, r3, r7
 8006300:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <f_open+0x20>
 8006308:	2309      	movs	r3, #9
 800630a:	e257      	b.n	80067bc <f_open+0x4d0>
	fp->fs = 0;			/* Clear file object */
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	2380      	movs	r3, #128	; 0x80
 8006310:	015b      	lsls	r3, r3, #5
 8006312:	2100      	movs	r1, #0
 8006314:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006316:	4bbf      	ldr	r3, [pc, #764]	; (8006614 <f_open+0x328>)
 8006318:	4dbf      	ldr	r5, [pc, #764]	; (8006618 <f_open+0x32c>)
 800631a:	195b      	adds	r3, r3, r5
 800631c:	19db      	adds	r3, r3, r7
 800631e:	4abd      	ldr	r2, [pc, #756]	; (8006614 <f_open+0x328>)
 8006320:	1952      	adds	r2, r2, r5
 8006322:	19d2      	adds	r2, r2, r7
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	211f      	movs	r1, #31
 8006328:	400a      	ands	r2, r1
 800632a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800632c:	4bb9      	ldr	r3, [pc, #740]	; (8006614 <f_open+0x328>)
 800632e:	195b      	adds	r3, r3, r5
 8006330:	19db      	adds	r3, r3, r7
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2201      	movs	r2, #1
 8006336:	4393      	bics	r3, r2
 8006338:	b2da      	uxtb	r2, r3
 800633a:	4eb8      	ldr	r6, [pc, #736]	; (800661c <f_open+0x330>)
 800633c:	19bc      	adds	r4, r7, r6
 800633e:	2308      	movs	r3, #8
 8006340:	18f9      	adds	r1, r7, r3
 8006342:	2320      	movs	r3, #32
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	2080      	movs	r0, #128	; 0x80
 8006348:	0140      	lsls	r0, r0, #5
 800634a:	4684      	mov	ip, r0
 800634c:	4463      	add	r3, ip
 800634e:	0018      	movs	r0, r3
 8006350:	f7ff fbe4 	bl	8005b1c <find_volume>
 8006354:	0003      	movs	r3, r0
 8006356:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006358:	0030      	movs	r0, r6
 800635a:	183b      	adds	r3, r7, r0
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d000      	beq.n	8006364 <f_open+0x78>
 8006362:	e228      	b.n	80067b6 <f_open+0x4ca>
		INIT_BUF(dj);
 8006364:	4bae      	ldr	r3, [pc, #696]	; (8006620 <f_open+0x334>)
 8006366:	195a      	adds	r2, r3, r5
 8006368:	19d3      	adds	r3, r2, r7
 800636a:	49ae      	ldr	r1, [pc, #696]	; (8006624 <f_open+0x338>)
 800636c:	2214      	movs	r2, #20
 800636e:	18ba      	adds	r2, r7, r2
 8006370:	505a      	str	r2, [r3, r1]
 8006372:	4bab      	ldr	r3, [pc, #684]	; (8006620 <f_open+0x334>)
 8006374:	195a      	adds	r2, r3, r5
 8006376:	19d2      	adds	r2, r2, r7
 8006378:	2381      	movs	r3, #129	; 0x81
 800637a:	015b      	lsls	r3, r3, #5
 800637c:	49aa      	ldr	r1, [pc, #680]	; (8006628 <f_open+0x33c>)
 800637e:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	0006      	movs	r6, r0
 8006384:	183c      	adds	r4, r7, r0
 8006386:	2320      	movs	r3, #32
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	0011      	movs	r1, r2
 800638c:	0018      	movs	r0, r3
 800638e:	f7ff fa89 	bl	80058a4 <follow_path>
 8006392:	0003      	movs	r3, r0
 8006394:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 8006396:	4ba2      	ldr	r3, [pc, #648]	; (8006620 <f_open+0x334>)
 8006398:	195b      	adds	r3, r3, r5
 800639a:	19db      	adds	r3, r3, r7
 800639c:	4aa3      	ldr	r2, [pc, #652]	; (800662c <f_open+0x340>)
 800639e:	589b      	ldr	r3, [r3, r2]
 80063a0:	4aa3      	ldr	r2, [pc, #652]	; (8006630 <f_open+0x344>)
 80063a2:	18b9      	adds	r1, r7, r2
 80063a4:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80063a6:	19bb      	adds	r3, r7, r6
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11c      	bne.n	80063e8 <f_open+0xfc>
			if (!dir)	/* Default directory itself */
 80063ae:	18bb      	adds	r3, r7, r2
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <f_open+0xd2>
				res = FR_INVALID_NAME;
 80063b6:	19bb      	adds	r3, r7, r6
 80063b8:	2206      	movs	r2, #6
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e014      	b.n	80063e8 <f_open+0xfc>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80063be:	4b95      	ldr	r3, [pc, #596]	; (8006614 <f_open+0x328>)
 80063c0:	4a95      	ldr	r2, [pc, #596]	; (8006618 <f_open+0x32c>)
 80063c2:	189b      	adds	r3, r3, r2
 80063c4:	19db      	adds	r3, r3, r7
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4393      	bics	r3, r2
 80063cc:	1e5a      	subs	r2, r3, #1
 80063ce:	4193      	sbcs	r3, r2
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	001a      	movs	r2, r3
 80063d4:	4b91      	ldr	r3, [pc, #580]	; (800661c <f_open+0x330>)
 80063d6:	18fc      	adds	r4, r7, r3
 80063d8:	2320      	movs	r3, #32
 80063da:	18fb      	adds	r3, r7, r3
 80063dc:	0011      	movs	r1, r2
 80063de:	0018      	movs	r0, r3
 80063e0:	f7fd fa78 	bl	80038d4 <chk_lock>
 80063e4:	0003      	movs	r3, r0
 80063e6:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80063e8:	4b8a      	ldr	r3, [pc, #552]	; (8006614 <f_open+0x328>)
 80063ea:	4a8b      	ldr	r2, [pc, #556]	; (8006618 <f_open+0x32c>)
 80063ec:	189b      	adds	r3, r3, r2
 80063ee:	19db      	adds	r3, r3, r7
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	221c      	movs	r2, #28
 80063f4:	4013      	ands	r3, r2
 80063f6:	d100      	bne.n	80063fa <f_open+0x10e>
 80063f8:	e0f8      	b.n	80065ec <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 80063fa:	4a88      	ldr	r2, [pc, #544]	; (800661c <f_open+0x330>)
 80063fc:	18bb      	adds	r3, r7, r2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d027      	beq.n	8006454 <f_open+0x168>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006404:	18bb      	adds	r3, r7, r2
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d10f      	bne.n	800642c <f_open+0x140>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800640c:	f7fd fad2 	bl	80039b4 <enq_lock>
 8006410:	1e03      	subs	r3, r0, #0
 8006412:	d007      	beq.n	8006424 <f_open+0x138>
 8006414:	2320      	movs	r3, #32
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	0018      	movs	r0, r3
 800641a:	f7fe ff03 	bl	8005224 <dir_register>
 800641e:	0003      	movs	r3, r0
 8006420:	001a      	movs	r2, r3
 8006422:	e000      	b.n	8006426 <f_open+0x13a>
 8006424:	2212      	movs	r2, #18
 8006426:	4b7d      	ldr	r3, [pc, #500]	; (800661c <f_open+0x330>)
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800642c:	4b79      	ldr	r3, [pc, #484]	; (8006614 <f_open+0x328>)
 800642e:	487a      	ldr	r0, [pc, #488]	; (8006618 <f_open+0x32c>)
 8006430:	181b      	adds	r3, r3, r0
 8006432:	19db      	adds	r3, r3, r7
 8006434:	4a77      	ldr	r2, [pc, #476]	; (8006614 <f_open+0x328>)
 8006436:	1812      	adds	r2, r2, r0
 8006438:	19d2      	adds	r2, r2, r7
 800643a:	7812      	ldrb	r2, [r2, #0]
 800643c:	2108      	movs	r1, #8
 800643e:	430a      	orrs	r2, r1
 8006440:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006442:	4b77      	ldr	r3, [pc, #476]	; (8006620 <f_open+0x334>)
 8006444:	181b      	adds	r3, r3, r0
 8006446:	19db      	adds	r3, r3, r7
 8006448:	4a78      	ldr	r2, [pc, #480]	; (800662c <f_open+0x340>)
 800644a:	589b      	ldr	r3, [r3, r2]
 800644c:	4a78      	ldr	r2, [pc, #480]	; (8006630 <f_open+0x344>)
 800644e:	18ba      	adds	r2, r7, r2
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e019      	b.n	8006488 <f_open+0x19c>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006454:	4b76      	ldr	r3, [pc, #472]	; (8006630 <f_open+0x344>)
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330b      	adds	r3, #11
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	001a      	movs	r2, r3
 8006460:	2311      	movs	r3, #17
 8006462:	4013      	ands	r3, r2
 8006464:	d004      	beq.n	8006470 <f_open+0x184>
					res = FR_DENIED;
 8006466:	4b6d      	ldr	r3, [pc, #436]	; (800661c <f_open+0x330>)
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2207      	movs	r2, #7
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e00b      	b.n	8006488 <f_open+0x19c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006470:	4b68      	ldr	r3, [pc, #416]	; (8006614 <f_open+0x328>)
 8006472:	4a69      	ldr	r2, [pc, #420]	; (8006618 <f_open+0x32c>)
 8006474:	189b      	adds	r3, r3, r2
 8006476:	19db      	adds	r3, r3, r7
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2204      	movs	r2, #4
 800647c:	4013      	ands	r3, r2
 800647e:	d003      	beq.n	8006488 <f_open+0x19c>
						res = FR_EXIST;
 8006480:	4b66      	ldr	r3, [pc, #408]	; (800661c <f_open+0x330>)
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	2208      	movs	r2, #8
 8006486:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006488:	4864      	ldr	r0, [pc, #400]	; (800661c <f_open+0x330>)
 800648a:	183b      	adds	r3, r7, r0
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d000      	beq.n	8006494 <f_open+0x1a8>
 8006492:	e0ee      	b.n	8006672 <f_open+0x386>
 8006494:	4b5f      	ldr	r3, [pc, #380]	; (8006614 <f_open+0x328>)
 8006496:	4c60      	ldr	r4, [pc, #384]	; (8006618 <f_open+0x32c>)
 8006498:	191b      	adds	r3, r3, r4
 800649a:	19db      	adds	r3, r3, r7
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2208      	movs	r2, #8
 80064a0:	4013      	ands	r3, r2
 80064a2:	d100      	bne.n	80064a6 <f_open+0x1ba>
 80064a4:	e0e5      	b.n	8006672 <f_open+0x386>
				dw = GET_FATTIME();				/* Created time */
 80064a6:	f7fd f869 	bl	800357c <get_fattime>
 80064aa:	0003      	movs	r3, r0
 80064ac:	4e61      	ldr	r6, [pc, #388]	; (8006634 <f_open+0x348>)
 80064ae:	19ba      	adds	r2, r7, r6
 80064b0:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80064b2:	495f      	ldr	r1, [pc, #380]	; (8006630 <f_open+0x344>)
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330e      	adds	r3, #14
 80064ba:	19ba      	adds	r2, r7, r6
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	19bb      	adds	r3, r7, r6
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	0a1b      	lsrs	r3, r3, #8
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330f      	adds	r3, #15
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	19bb      	adds	r3, r7, r6
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	0c1a      	lsrs	r2, r3, #16
 80064dc:	187b      	adds	r3, r7, r1
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3310      	adds	r3, #16
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	19bb      	adds	r3, r7, r6
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	0e1a      	lsrs	r2, r3, #24
 80064ec:	187b      	adds	r3, r7, r1
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3311      	adds	r3, #17
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80064f6:	187b      	adds	r3, r7, r1
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330b      	adds	r3, #11
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006500:	187b      	adds	r3, r7, r1
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	331c      	adds	r3, #28
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	187b      	adds	r3, r7, r1
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	331d      	adds	r3, #29
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	187b      	adds	r3, r7, r1
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	331e      	adds	r3, #30
 800651a:	2200      	movs	r2, #0
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	187b      	adds	r3, r7, r1
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	331f      	adds	r3, #31
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006528:	4b3d      	ldr	r3, [pc, #244]	; (8006620 <f_open+0x334>)
 800652a:	0025      	movs	r5, r4
 800652c:	191b      	adds	r3, r3, r4
 800652e:	19da      	adds	r2, r3, r7
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	015b      	lsls	r3, r3, #5
 8006534:	58d3      	ldr	r3, [r2, r3]
 8006536:	000c      	movs	r4, r1
 8006538:	187a      	adds	r2, r7, r1
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	0011      	movs	r1, r2
 800653e:	0018      	movs	r0, r3
 8006540:	f7fe fb5c 	bl	8004bfc <ld_clust>
 8006544:	0003      	movs	r3, r0
 8006546:	493c      	ldr	r1, [pc, #240]	; (8006638 <f_open+0x34c>)
 8006548:	187a      	adds	r2, r7, r1
 800654a:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800654c:	193b      	adds	r3, r7, r4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2100      	movs	r1, #0
 8006552:	0018      	movs	r0, r3
 8006554:	f7fe fb7f 	bl	8004c56 <st_clust>
				dj.fs->wflag = 1;
 8006558:	4b31      	ldr	r3, [pc, #196]	; (8006620 <f_open+0x334>)
 800655a:	195b      	adds	r3, r3, r5
 800655c:	19da      	adds	r2, r3, r7
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	015b      	lsls	r3, r3, #5
 8006562:	58d3      	ldr	r3, [r2, r3]
 8006564:	4a35      	ldr	r2, [pc, #212]	; (800663c <f_open+0x350>)
 8006566:	2101      	movs	r1, #1
 8006568:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 800656a:	4933      	ldr	r1, [pc, #204]	; (8006638 <f_open+0x34c>)
 800656c:	187b      	adds	r3, r7, r1
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d100      	bne.n	8006576 <f_open+0x28a>
 8006574:	e07d      	b.n	8006672 <f_open+0x386>
					dw = dj.fs->winsect;
 8006576:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <f_open+0x334>)
 8006578:	195b      	adds	r3, r3, r5
 800657a:	19da      	adds	r2, r3, r7
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	015b      	lsls	r3, r3, #5
 8006580:	58d3      	ldr	r3, [r2, r3]
 8006582:	4a2f      	ldr	r2, [pc, #188]	; (8006640 <f_open+0x354>)
 8006584:	589b      	ldr	r3, [r3, r2]
 8006586:	19ba      	adds	r2, r7, r6
 8006588:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800658a:	4b25      	ldr	r3, [pc, #148]	; (8006620 <f_open+0x334>)
 800658c:	195b      	adds	r3, r3, r5
 800658e:	19da      	adds	r2, r3, r7
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	015b      	lsls	r3, r3, #5
 8006594:	58d3      	ldr	r3, [r2, r3]
 8006596:	4821      	ldr	r0, [pc, #132]	; (800661c <f_open+0x330>)
 8006598:	183c      	adds	r4, r7, r0
 800659a:	187a      	adds	r2, r7, r1
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7fd ff4b 	bl	800443c <remove_chain>
 80065a6:	0003      	movs	r3, r0
 80065a8:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 80065aa:	481c      	ldr	r0, [pc, #112]	; (800661c <f_open+0x330>)
 80065ac:	183b      	adds	r3, r7, r0
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d15e      	bne.n	8006672 <f_open+0x386>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <f_open+0x334>)
 80065b6:	195b      	adds	r3, r3, r5
 80065b8:	19da      	adds	r2, r3, r7
 80065ba:	2380      	movs	r3, #128	; 0x80
 80065bc:	015b      	lsls	r3, r3, #5
 80065be:	58d3      	ldr	r3, [r2, r3]
 80065c0:	491d      	ldr	r1, [pc, #116]	; (8006638 <f_open+0x34c>)
 80065c2:	187a      	adds	r2, r7, r1
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	3a01      	subs	r2, #1
 80065c8:	491e      	ldr	r1, [pc, #120]	; (8006644 <f_open+0x358>)
 80065ca:	505a      	str	r2, [r3, r1]
						res = move_window(dj.fs, dw);
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <f_open+0x334>)
 80065ce:	195b      	adds	r3, r3, r5
 80065d0:	19da      	adds	r2, r3, r7
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	015b      	lsls	r3, r3, #5
 80065d6:	58d3      	ldr	r3, [r2, r3]
 80065d8:	183c      	adds	r4, r7, r0
 80065da:	19ba      	adds	r2, r7, r6
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	0011      	movs	r1, r2
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fd fb91 	bl	8003d08 <move_window>
 80065e6:	0003      	movs	r3, r0
 80065e8:	7023      	strb	r3, [r4, #0]
 80065ea:	e042      	b.n	8006672 <f_open+0x386>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80065ec:	490b      	ldr	r1, [pc, #44]	; (800661c <f_open+0x330>)
 80065ee:	187b      	adds	r3, r7, r1
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d13d      	bne.n	8006672 <f_open+0x386>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80065f6:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <f_open+0x344>)
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330b      	adds	r3, #11
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	001a      	movs	r2, r3
 8006602:	2310      	movs	r3, #16
 8006604:	4013      	ands	r3, r2
 8006606:	d01f      	beq.n	8006648 <f_open+0x35c>
					res = FR_NO_FILE;
 8006608:	187b      	adds	r3, r7, r1
 800660a:	2204      	movs	r2, #4
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e030      	b.n	8006672 <f_open+0x386>
 8006610:	ffffefa4 	.word	0xffffefa4
 8006614:	ffffefaf 	.word	0xffffefaf
 8006618:	00001058 	.word	0x00001058
 800661c:	00001057 	.word	0x00001057
 8006620:	ffffefc8 	.word	0xffffefc8
 8006624:	00001018 	.word	0x00001018
 8006628:	20002248 	.word	0x20002248
 800662c:	00001014 	.word	0x00001014
 8006630:	00001050 	.word	0x00001050
 8006634:	0000104c 	.word	0x0000104c
 8006638:	00001048 	.word	0x00001048
 800663c:	00001004 	.word	0x00001004
 8006640:	0000102c 	.word	0x0000102c
 8006644:	0000100c 	.word	0x0000100c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006648:	4b5f      	ldr	r3, [pc, #380]	; (80067c8 <f_open+0x4dc>)
 800664a:	4a60      	ldr	r2, [pc, #384]	; (80067cc <f_open+0x4e0>)
 800664c:	189b      	adds	r3, r3, r2
 800664e:	19db      	adds	r3, r3, r7
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2202      	movs	r2, #2
 8006654:	4013      	ands	r3, r2
 8006656:	d00c      	beq.n	8006672 <f_open+0x386>
 8006658:	4b5d      	ldr	r3, [pc, #372]	; (80067d0 <f_open+0x4e4>)
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330b      	adds	r3, #11
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	001a      	movs	r2, r3
 8006664:	2301      	movs	r3, #1
 8006666:	4013      	ands	r3, r2
 8006668:	d003      	beq.n	8006672 <f_open+0x386>
						res = FR_DENIED;
 800666a:	4b5a      	ldr	r3, [pc, #360]	; (80067d4 <f_open+0x4e8>)
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	2207      	movs	r2, #7
 8006670:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006672:	4b58      	ldr	r3, [pc, #352]	; (80067d4 <f_open+0x4e8>)
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d141      	bne.n	8006700 <f_open+0x414>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800667c:	4b52      	ldr	r3, [pc, #328]	; (80067c8 <f_open+0x4dc>)
 800667e:	4953      	ldr	r1, [pc, #332]	; (80067cc <f_open+0x4e0>)
 8006680:	185b      	adds	r3, r3, r1
 8006682:	19db      	adds	r3, r3, r7
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2208      	movs	r2, #8
 8006688:	4013      	ands	r3, r2
 800668a:	d009      	beq.n	80066a0 <f_open+0x3b4>
				mode |= FA__WRITTEN;
 800668c:	4b4e      	ldr	r3, [pc, #312]	; (80067c8 <f_open+0x4dc>)
 800668e:	185b      	adds	r3, r3, r1
 8006690:	19db      	adds	r3, r3, r7
 8006692:	4a4d      	ldr	r2, [pc, #308]	; (80067c8 <f_open+0x4dc>)
 8006694:	1852      	adds	r2, r2, r1
 8006696:	19d2      	adds	r2, r2, r7
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	2120      	movs	r1, #32
 800669c:	430a      	orrs	r2, r1
 800669e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80066a0:	4b4d      	ldr	r3, [pc, #308]	; (80067d8 <f_open+0x4ec>)
 80066a2:	484a      	ldr	r0, [pc, #296]	; (80067cc <f_open+0x4e0>)
 80066a4:	181b      	adds	r3, r3, r0
 80066a6:	19da      	adds	r2, r3, r7
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	015b      	lsls	r3, r3, #5
 80066ac:	58d3      	ldr	r3, [r2, r3]
 80066ae:	4a4b      	ldr	r2, [pc, #300]	; (80067dc <f_open+0x4f0>)
 80066b0:	589a      	ldr	r2, [r3, r2]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	494a      	ldr	r1, [pc, #296]	; (80067e0 <f_open+0x4f4>)
 80066b6:	505a      	str	r2, [r3, r1]
			fp->dir_ptr = dir;
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	2381      	movs	r3, #129	; 0x81
 80066bc:	015b      	lsls	r3, r3, #5
 80066be:	4944      	ldr	r1, [pc, #272]	; (80067d0 <f_open+0x4e4>)
 80066c0:	1879      	adds	r1, r7, r1
 80066c2:	6809      	ldr	r1, [r1, #0]
 80066c4:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80066c6:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <f_open+0x4dc>)
 80066c8:	181b      	adds	r3, r3, r0
 80066ca:	19db      	adds	r3, r3, r7
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2201      	movs	r2, #1
 80066d0:	4393      	bics	r3, r2
 80066d2:	1e5a      	subs	r2, r3, #1
 80066d4:	4193      	sbcs	r3, r2
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	001a      	movs	r2, r3
 80066da:	2320      	movs	r3, #32
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	0011      	movs	r1, r2
 80066e0:	0018      	movs	r0, r3
 80066e2:	f7fd f987 	bl	80039f4 <inc_lock>
 80066e6:	0002      	movs	r2, r0
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	493e      	ldr	r1, [pc, #248]	; (80067e4 <f_open+0x4f8>)
 80066ec:	505a      	str	r2, [r3, r1]
			if (!fp->lockid) res = FR_INT_ERR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4a3c      	ldr	r2, [pc, #240]	; (80067e4 <f_open+0x4f8>)
 80066f2:	589b      	ldr	r3, [r3, r2]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <f_open+0x414>
 80066f8:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <f_open+0x4e8>)
 80066fa:	18fb      	adds	r3, r7, r3
 80066fc:	2202      	movs	r2, #2
 80066fe:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006700:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <f_open+0x4e8>)
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d155      	bne.n	80067b6 <f_open+0x4ca>
			fp->flag = mode;					/* File access mode */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <f_open+0x4dc>)
 800670e:	4d2f      	ldr	r5, [pc, #188]	; (80067cc <f_open+0x4e0>)
 8006710:	1952      	adds	r2, r2, r5
 8006712:	19d2      	adds	r2, r2, r7
 8006714:	4934      	ldr	r1, [pc, #208]	; (80067e8 <f_open+0x4fc>)
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4a33      	ldr	r2, [pc, #204]	; (80067ec <f_open+0x500>)
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <f_open+0x4ec>)
 8006724:	195b      	adds	r3, r3, r5
 8006726:	19da      	adds	r2, r3, r7
 8006728:	2380      	movs	r3, #128	; 0x80
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	58d3      	ldr	r3, [r2, r3]
 800672e:	4c28      	ldr	r4, [pc, #160]	; (80067d0 <f_open+0x4e4>)
 8006730:	193a      	adds	r2, r7, r4
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	0011      	movs	r1, r2
 8006736:	0018      	movs	r0, r3
 8006738:	f7fe fa60 	bl	8004bfc <ld_clust>
 800673c:	0002      	movs	r2, r0
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	492b      	ldr	r1, [pc, #172]	; (80067f0 <f_open+0x504>)
 8006742:	505a      	str	r2, [r3, r1]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006744:	0021      	movs	r1, r4
 8006746:	187b      	adds	r3, r7, r1
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	331f      	adds	r3, #31
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	061a      	lsls	r2, r3, #24
 8006750:	187b      	adds	r3, r7, r1
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	331e      	adds	r3, #30
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	4313      	orrs	r3, r2
 800675c:	187a      	adds	r2, r7, r1
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	321d      	adds	r2, #29
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	0212      	lsls	r2, r2, #8
 8006766:	4313      	orrs	r3, r2
 8006768:	187a      	adds	r2, r7, r1
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	321c      	adds	r2, #28
 800676e:	7812      	ldrb	r2, [r2, #0]
 8006770:	431a      	orrs	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	491f      	ldr	r1, [pc, #124]	; (80067f4 <f_open+0x508>)
 8006776:	505a      	str	r2, [r3, r1]
			fp->fptr = 0;						/* File pointer */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <f_open+0x50c>)
 800677c:	2100      	movs	r1, #0
 800677e:	5099      	str	r1, [r3, r2]
			fp->dsect = 0;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <f_open+0x510>)
 8006784:	2100      	movs	r1, #0
 8006786:	5099      	str	r1, [r3, r2]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <f_open+0x514>)
 800678c:	2100      	movs	r1, #0
 800678e:	5099      	str	r1, [r3, r2]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <f_open+0x4ec>)
 8006792:	195b      	adds	r3, r3, r5
 8006794:	19da      	adds	r2, r3, r7
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	015b      	lsls	r3, r3, #5
 800679a:	58d1      	ldr	r1, [r2, r3]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	015b      	lsls	r3, r3, #5
 80067a2:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	015b      	lsls	r3, r3, #5
 80067aa:	58d3      	ldr	r3, [r2, r3]
 80067ac:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <f_open+0x4fc>)
 80067ae:	5a99      	ldrh	r1, [r3, r2]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a14      	ldr	r2, [pc, #80]	; (8006804 <f_open+0x518>)
 80067b4:	5299      	strh	r1, [r3, r2]
		}
	}

	LEAVE_FF(dj.fs, res);
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <f_open+0x4e8>)
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	781b      	ldrb	r3, [r3, #0]
}
 80067bc:	0018      	movs	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <f_open+0x51c>)
 80067c2:	449d      	add	sp, r3
 80067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	ffffefaf 	.word	0xffffefaf
 80067cc:	00001058 	.word	0x00001058
 80067d0:	00001050 	.word	0x00001050
 80067d4:	00001057 	.word	0x00001057
 80067d8:	ffffefc8 	.word	0xffffefc8
 80067dc:	0000102c 	.word	0x0000102c
 80067e0:	0000101c 	.word	0x0000101c
 80067e4:	00001028 	.word	0x00001028
 80067e8:	00001006 	.word	0x00001006
 80067ec:	00001007 	.word	0x00001007
 80067f0:	00001010 	.word	0x00001010
 80067f4:	0000100c 	.word	0x0000100c
 80067f8:	00001008 	.word	0x00001008
 80067fc:	00001018 	.word	0x00001018
 8006800:	00001024 	.word	0x00001024
 8006804:	00001004 	.word	0x00001004
 8006808:	0000105c 	.word	0x0000105c

0800680c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800680c:	b5b0      	push	{r4, r5, r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006824:	251f      	movs	r5, #31
 8006826:	197c      	adds	r4, r7, r5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	0018      	movs	r0, r3
 800682c:	f7ff fcd0 	bl	80061d0 <validate>
 8006830:	0003      	movs	r3, r0
 8006832:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006834:	197b      	adds	r3, r7, r5
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <f_read+0x36>
 800683c:	197b      	adds	r3, r7, r5
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	e1b8      	b.n	8006bb4 <f_read+0x3a8>
	if (fp->err)								/* Check error */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4aa8      	ldr	r2, [pc, #672]	; (8006ae8 <f_read+0x2dc>)
 8006846:	5c9b      	ldrb	r3, [r3, r2]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <f_read+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4aa6      	ldr	r2, [pc, #664]	; (8006ae8 <f_read+0x2dc>)
 8006850:	5c9b      	ldrb	r3, [r3, r2]
 8006852:	e1af      	b.n	8006bb4 <f_read+0x3a8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4aa5      	ldr	r2, [pc, #660]	; (8006aec <f_read+0x2e0>)
 8006858:	5c9b      	ldrb	r3, [r3, r2]
 800685a:	001a      	movs	r2, r3
 800685c:	2301      	movs	r3, #1
 800685e:	4013      	ands	r3, r2
 8006860:	d101      	bne.n	8006866 <f_read+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006862:	2307      	movs	r3, #7
 8006864:	e1a6      	b.n	8006bb4 <f_read+0x3a8>
	remain = fp->fsize - fp->fptr;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4aa1      	ldr	r2, [pc, #644]	; (8006af0 <f_read+0x2e4>)
 800686a:	589a      	ldr	r2, [r3, r2]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	49a1      	ldr	r1, [pc, #644]	; (8006af4 <f_read+0x2e8>)
 8006870:	585b      	ldr	r3, [r3, r1]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	429a      	cmp	r2, r3
 800687c:	d800      	bhi.n	8006880 <f_read+0x74>
 800687e:	e194      	b.n	8006baa <f_read+0x39e>
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006884:	e191      	b.n	8006baa <f_read+0x39e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a9a      	ldr	r2, [pc, #616]	; (8006af4 <f_read+0x2e8>)
 800688a:	5898      	ldr	r0, [r3, r2]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	015b      	lsls	r3, r3, #5
 8006892:	58d3      	ldr	r3, [r2, r3]
 8006894:	4a98      	ldr	r2, [pc, #608]	; (8006af8 <f_read+0x2ec>)
 8006896:	5a9b      	ldrh	r3, [r3, r2]
 8006898:	0019      	movs	r1, r3
 800689a:	f7f9 fcc3 	bl	8000224 <__aeabi_uidivmod>
 800689e:	1e0b      	subs	r3, r1, #0
 80068a0:	d000      	beq.n	80068a4 <f_read+0x98>
 80068a2:	e13b      	b.n	8006b1c <f_read+0x310>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a93      	ldr	r2, [pc, #588]	; (8006af4 <f_read+0x2e8>)
 80068a8:	5898      	ldr	r0, [r3, r2]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	015b      	lsls	r3, r3, #5
 80068b0:	58d3      	ldr	r3, [r2, r3]
 80068b2:	4a91      	ldr	r2, [pc, #580]	; (8006af8 <f_read+0x2ec>)
 80068b4:	5a9b      	ldrh	r3, [r3, r2]
 80068b6:	0019      	movs	r1, r3
 80068b8:	f7f9 fc2e 	bl	8000118 <__udivsi3>
 80068bc:	0003      	movs	r3, r0
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	68f9      	ldr	r1, [r7, #12]
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	015b      	lsls	r3, r3, #5
 80068c6:	58cb      	ldr	r3, [r1, r3]
 80068c8:	498c      	ldr	r1, [pc, #560]	; (8006afc <f_read+0x2f0>)
 80068ca:	5c5b      	ldrb	r3, [r3, r1]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b2d9      	uxtb	r1, r3
 80068d0:	2017      	movs	r0, #23
 80068d2:	183b      	adds	r3, r7, r0
 80068d4:	400a      	ands	r2, r1
 80068d6:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
 80068d8:	183b      	adds	r3, r7, r0
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d13c      	bne.n	800695a <f_read+0x14e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a84      	ldr	r2, [pc, #528]	; (8006af4 <f_read+0x2e8>)
 80068e4:	589b      	ldr	r3, [r3, r2]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a84      	ldr	r2, [pc, #528]	; (8006b00 <f_read+0x2f4>)
 80068ee:	589b      	ldr	r3, [r3, r2]
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f2:	e01c      	b.n	800692e <f_read+0x122>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4a83      	ldr	r2, [pc, #524]	; (8006b04 <f_read+0x2f8>)
 80068f8:	589b      	ldr	r3, [r3, r2]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <f_read+0x108>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4a7c      	ldr	r2, [pc, #496]	; (8006af4 <f_read+0x2e8>)
 8006902:	589a      	ldr	r2, [r3, r2]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	0011      	movs	r1, r2
 8006908:	0018      	movs	r0, r3
 800690a:	f7fd febb 	bl	8004684 <clmt_clust>
 800690e:	0003      	movs	r3, r0
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006912:	e00c      	b.n	800692e <f_read+0x122>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	015b      	lsls	r3, r3, #5
 800691a:	58d2      	ldr	r2, [r2, r3]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	497a      	ldr	r1, [pc, #488]	; (8006b08 <f_read+0x2fc>)
 8006920:	585b      	ldr	r3, [r3, r1]
 8006922:	0019      	movs	r1, r3
 8006924:	0010      	movs	r0, r2
 8006926:	f7fd fb23 	bl	8003f70 <get_fat>
 800692a:	0003      	movs	r3, r0
 800692c:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d805      	bhi.n	8006940 <f_read+0x134>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4a6c      	ldr	r2, [pc, #432]	; (8006ae8 <f_read+0x2dc>)
 8006938:	2102      	movs	r1, #2
 800693a:	5499      	strb	r1, [r3, r2]
 800693c:	2302      	movs	r3, #2
 800693e:	e139      	b.n	8006bb4 <f_read+0x3a8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	3301      	adds	r3, #1
 8006944:	d105      	bne.n	8006952 <f_read+0x146>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a67      	ldr	r2, [pc, #412]	; (8006ae8 <f_read+0x2dc>)
 800694a:	2101      	movs	r1, #1
 800694c:	5499      	strb	r1, [r3, r2]
 800694e:	2301      	movs	r3, #1
 8006950:	e130      	b.n	8006bb4 <f_read+0x3a8>
				fp->clust = clst;				/* Update current cluster */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	496c      	ldr	r1, [pc, #432]	; (8006b08 <f_read+0x2fc>)
 8006956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006958:	505a      	str	r2, [r3, r1]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	2380      	movs	r3, #128	; 0x80
 800695e:	015b      	lsls	r3, r3, #5
 8006960:	58d2      	ldr	r2, [r2, r3]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4968      	ldr	r1, [pc, #416]	; (8006b08 <f_read+0x2fc>)
 8006966:	585b      	ldr	r3, [r3, r1]
 8006968:	0019      	movs	r1, r3
 800696a:	0010      	movs	r0, r2
 800696c:	f7fd fada 	bl	8003f24 <clust2sect>
 8006970:	0003      	movs	r3, r0
 8006972:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d105      	bne.n	8006986 <f_read+0x17a>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4a5a      	ldr	r2, [pc, #360]	; (8006ae8 <f_read+0x2dc>)
 800697e:	2102      	movs	r1, #2
 8006980:	5499      	strb	r1, [r3, r2]
 8006982:	2302      	movs	r3, #2
 8006984:	e116      	b.n	8006bb4 <f_read+0x3a8>
			sect += csect;
 8006986:	2417      	movs	r4, #23
 8006988:	193b      	adds	r3, r7, r4
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	18d3      	adds	r3, r2, r3
 8006990:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	015b      	lsls	r3, r3, #5
 8006998:	58d3      	ldr	r3, [r2, r3]
 800699a:	4a57      	ldr	r2, [pc, #348]	; (8006af8 <f_read+0x2ec>)
 800699c:	5a9b      	ldrh	r3, [r3, r2]
 800699e:	0019      	movs	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7f9 fbb9 	bl	8000118 <__udivsi3>
 80069a6:	0003      	movs	r3, r0
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d05c      	beq.n	8006a6a <f_read+0x25e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80069b0:	0020      	movs	r0, r4
 80069b2:	183b      	adds	r3, r7, r0
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	18d3      	adds	r3, r2, r3
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	2280      	movs	r2, #128	; 0x80
 80069be:	0152      	lsls	r2, r2, #5
 80069c0:	588a      	ldr	r2, [r1, r2]
 80069c2:	494e      	ldr	r1, [pc, #312]	; (8006afc <f_read+0x2f0>)
 80069c4:	5c52      	ldrb	r2, [r2, r1]
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d90a      	bls.n	80069e0 <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	2380      	movs	r3, #128	; 0x80
 80069ce:	015b      	lsls	r3, r3, #5
 80069d0:	58d3      	ldr	r3, [r2, r3]
 80069d2:	4a4a      	ldr	r2, [pc, #296]	; (8006afc <f_read+0x2f0>)
 80069d4:	5c9b      	ldrb	r3, [r3, r2]
 80069d6:	001a      	movs	r2, r3
 80069d8:	183b      	adds	r3, r7, r0
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	2380      	movs	r3, #128	; 0x80
 80069e4:	015b      	lsls	r3, r3, #5
 80069e6:	58d3      	ldr	r3, [r2, r3]
 80069e8:	4a48      	ldr	r2, [pc, #288]	; (8006b0c <f_read+0x300>)
 80069ea:	5c98      	ldrb	r0, [r3, r2]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	6a39      	ldr	r1, [r7, #32]
 80069f2:	f7fc fe83 	bl	80036fc <disk_read>
 80069f6:	1e03      	subs	r3, r0, #0
 80069f8:	d005      	beq.n	8006a06 <f_read+0x1fa>
					ABORT(fp->fs, FR_DISK_ERR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4a3a      	ldr	r2, [pc, #232]	; (8006ae8 <f_read+0x2dc>)
 80069fe:	2101      	movs	r1, #1
 8006a00:	5499      	strb	r1, [r3, r2]
 8006a02:	2301      	movs	r3, #1
 8006a04:	e0d6      	b.n	8006bb4 <f_read+0x3a8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a38      	ldr	r2, [pc, #224]	; (8006aec <f_read+0x2e0>)
 8006a0a:	5c9b      	ldrb	r3, [r3, r2]
 8006a0c:	001a      	movs	r2, r3
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	4013      	ands	r3, r2
 8006a12:	d01f      	beq.n	8006a54 <f_read+0x248>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a3e      	ldr	r2, [pc, #248]	; (8006b10 <f_read+0x304>)
 8006a18:	589a      	ldr	r2, [r3, r2]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d917      	bls.n	8006a54 <f_read+0x248>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a3a      	ldr	r2, [pc, #232]	; (8006b10 <f_read+0x304>)
 8006a28:	589a      	ldr	r2, [r3, r2]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	2280      	movs	r2, #128	; 0x80
 8006a32:	0152      	lsls	r2, r2, #5
 8006a34:	588a      	ldr	r2, [r1, r2]
 8006a36:	4930      	ldr	r1, [pc, #192]	; (8006af8 <f_read+0x2ec>)
 8006a38:	5a52      	ldrh	r2, [r2, r1]
 8006a3a:	4353      	muls	r3, r2
 8006a3c:	6a3a      	ldr	r2, [r7, #32]
 8006a3e:	18d0      	adds	r0, r2, r3
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	015b      	lsls	r3, r3, #5
 8006a48:	58d3      	ldr	r3, [r2, r3]
 8006a4a:	4a2b      	ldr	r2, [pc, #172]	; (8006af8 <f_read+0x2ec>)
 8006a4c:	5a9b      	ldrh	r3, [r3, r2]
 8006a4e:	001a      	movs	r2, r3
 8006a50:	f7fc fecc 	bl	80037ec <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	015b      	lsls	r3, r3, #5
 8006a5a:	58d3      	ldr	r3, [r2, r3]
 8006a5c:	4a26      	ldr	r2, [pc, #152]	; (8006af8 <f_read+0x2ec>)
 8006a5e:	5a9b      	ldrh	r3, [r3, r2]
 8006a60:	001a      	movs	r2, r3
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	4353      	muls	r3, r2
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006a68:	e089      	b.n	8006b7e <f_read+0x372>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4a28      	ldr	r2, [pc, #160]	; (8006b10 <f_read+0x304>)
 8006a6e:	589b      	ldr	r3, [r3, r2]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d04e      	beq.n	8006b14 <f_read+0x308>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <f_read+0x2e0>)
 8006a7a:	5c9b      	ldrb	r3, [r3, r2]
 8006a7c:	001a      	movs	r2, r3
 8006a7e:	2340      	movs	r3, #64	; 0x40
 8006a80:	4013      	ands	r3, r2
 8006a82:	d01d      	beq.n	8006ac0 <f_read+0x2b4>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	2380      	movs	r3, #128	; 0x80
 8006a88:	015b      	lsls	r3, r3, #5
 8006a8a:	58d3      	ldr	r3, [r2, r3]
 8006a8c:	4a1f      	ldr	r2, [pc, #124]	; (8006b0c <f_read+0x300>)
 8006a8e:	5c98      	ldrb	r0, [r3, r2]
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <f_read+0x304>)
 8006a96:	589a      	ldr	r2, [r3, r2]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f7fc fe57 	bl	800374c <disk_write>
 8006a9e:	1e03      	subs	r3, r0, #0
 8006aa0:	d005      	beq.n	8006aae <f_read+0x2a2>
						ABORT(fp->fs, FR_DISK_ERR);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <f_read+0x2dc>)
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	5499      	strb	r1, [r3, r2]
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e082      	b.n	8006bb4 <f_read+0x3a8>
					fp->flag &= ~FA__DIRTY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4a0e      	ldr	r2, [pc, #56]	; (8006aec <f_read+0x2e0>)
 8006ab2:	5c9b      	ldrb	r3, [r3, r2]
 8006ab4:	2240      	movs	r2, #64	; 0x40
 8006ab6:	4393      	bics	r3, r2
 8006ab8:	b2d9      	uxtb	r1, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <f_read+0x2e0>)
 8006abe:	5499      	strb	r1, [r3, r2]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	015b      	lsls	r3, r3, #5
 8006ac6:	58d3      	ldr	r3, [r2, r3]
 8006ac8:	4a10      	ldr	r2, [pc, #64]	; (8006b0c <f_read+0x300>)
 8006aca:	5c98      	ldrb	r0, [r3, r2]
 8006acc:	68f9      	ldr	r1, [r7, #12]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f7fc fe13 	bl	80036fc <disk_read>
 8006ad6:	1e03      	subs	r3, r0, #0
 8006ad8:	d01c      	beq.n	8006b14 <f_read+0x308>
					ABORT(fp->fs, FR_DISK_ERR);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a02      	ldr	r2, [pc, #8]	; (8006ae8 <f_read+0x2dc>)
 8006ade:	2101      	movs	r1, #1
 8006ae0:	5499      	strb	r1, [r3, r2]
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e066      	b.n	8006bb4 <f_read+0x3a8>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	00001007 	.word	0x00001007
 8006aec:	00001006 	.word	0x00001006
 8006af0:	0000100c 	.word	0x0000100c
 8006af4:	00001008 	.word	0x00001008
 8006af8:	0000100a 	.word	0x0000100a
 8006afc:	00001002 	.word	0x00001002
 8006b00:	00001010 	.word	0x00001010
 8006b04:	00001024 	.word	0x00001024
 8006b08:	00001014 	.word	0x00001014
 8006b0c:	00001001 	.word	0x00001001
 8006b10:	00001018 	.word	0x00001018
			}
#endif
			fp->dsect = sect;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4929      	ldr	r1, [pc, #164]	; (8006bbc <f_read+0x3b0>)
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	505a      	str	r2, [r3, r1]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	015b      	lsls	r3, r3, #5
 8006b22:	58d3      	ldr	r3, [r2, r3]
 8006b24:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <f_read+0x3b4>)
 8006b26:	5a9b      	ldrh	r3, [r3, r2]
 8006b28:	001c      	movs	r4, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a25      	ldr	r2, [pc, #148]	; (8006bc4 <f_read+0x3b8>)
 8006b2e:	5898      	ldr	r0, [r3, r2]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	2380      	movs	r3, #128	; 0x80
 8006b34:	015b      	lsls	r3, r3, #5
 8006b36:	58d3      	ldr	r3, [r2, r3]
 8006b38:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <f_read+0x3b4>)
 8006b3a:	5a9b      	ldrh	r3, [r3, r2]
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	f7f9 fb71 	bl	8000224 <__aeabi_uidivmod>
 8006b42:	000b      	movs	r3, r1
 8006b44:	1ae3      	subs	r3, r4, r3
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d901      	bls.n	8006b54 <f_read+0x348>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4a1b      	ldr	r2, [pc, #108]	; (8006bc4 <f_read+0x3b8>)
 8006b58:	5898      	ldr	r0, [r3, r2]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	015b      	lsls	r3, r3, #5
 8006b60:	58d3      	ldr	r3, [r2, r3]
 8006b62:	4a17      	ldr	r2, [pc, #92]	; (8006bc0 <f_read+0x3b4>)
 8006b64:	5a9b      	ldrh	r3, [r3, r2]
 8006b66:	0019      	movs	r1, r3
 8006b68:	f7f9 fb5c 	bl	8000224 <__aeabi_uidivmod>
 8006b6c:	000b      	movs	r3, r1
 8006b6e:	001a      	movs	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1899      	adds	r1, r3, r2
 8006b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7fc fe37 	bl	80037ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b7e:	6a3a      	ldr	r2, [r7, #32]
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	18d3      	adds	r3, r2, r3
 8006b84:	623b      	str	r3, [r7, #32]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a0e      	ldr	r2, [pc, #56]	; (8006bc4 <f_read+0x3b8>)
 8006b8a:	589a      	ldr	r2, [r3, r2]
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	18d2      	adds	r2, r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	490c      	ldr	r1, [pc, #48]	; (8006bc4 <f_read+0x3b8>)
 8006b94:	505a      	str	r2, [r3, r1]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	18d2      	adds	r2, r2, r3
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d000      	beq.n	8006bb2 <f_read+0x3a6>
 8006bb0:	e669      	b.n	8006886 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b00c      	add	sp, #48	; 0x30
 8006bba:	bdb0      	pop	{r4, r5, r7, pc}
 8006bbc:	00001018 	.word	0x00001018
 8006bc0:	0000100a 	.word	0x0000100a
 8006bc4:	00001008 	.word	0x00001008

08006bc8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b08a      	sub	sp, #40	; 0x28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006be0:	2517      	movs	r5, #23
 8006be2:	197c      	adds	r4, r7, r5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7ff faf2 	bl	80061d0 <validate>
 8006bec:	0003      	movs	r3, r0
 8006bee:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006bf0:	197b      	adds	r3, r7, r5
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <f_write+0x36>
 8006bf8:	197b      	adds	r3, r7, r5
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	e1fc      	b.n	8006ff8 <f_write+0x430>
	if (fp->err)							/* Check error */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4ab9      	ldr	r2, [pc, #740]	; (8006ee8 <f_write+0x320>)
 8006c02:	5c9b      	ldrb	r3, [r3, r2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4ab7      	ldr	r2, [pc, #732]	; (8006ee8 <f_write+0x320>)
 8006c0c:	5c9b      	ldrb	r3, [r3, r2]
 8006c0e:	e1f3      	b.n	8006ff8 <f_write+0x430>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4ab6      	ldr	r2, [pc, #728]	; (8006eec <f_write+0x324>)
 8006c14:	5c9b      	ldrb	r3, [r3, r2]
 8006c16:	001a      	movs	r2, r3
 8006c18:	2302      	movs	r3, #2
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d101      	bne.n	8006c22 <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006c1e:	2307      	movs	r3, #7
 8006c20:	e1ea      	b.n	8006ff8 <f_write+0x430>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4ab2      	ldr	r2, [pc, #712]	; (8006ef0 <f_write+0x328>)
 8006c26:	589a      	ldr	r2, [r3, r2]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	18d2      	adds	r2, r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	49b0      	ldr	r1, [pc, #704]	; (8006ef0 <f_write+0x328>)
 8006c30:	585b      	ldr	r3, [r3, r1]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d300      	bcc.n	8006c38 <f_write+0x70>
 8006c36:	e1c1      	b.n	8006fbc <f_write+0x3f4>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006c3c:	e1be      	b.n	8006fbc <f_write+0x3f4>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4aab      	ldr	r2, [pc, #684]	; (8006ef0 <f_write+0x328>)
 8006c42:	5898      	ldr	r0, [r3, r2]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	2380      	movs	r3, #128	; 0x80
 8006c48:	015b      	lsls	r3, r3, #5
 8006c4a:	58d3      	ldr	r3, [r2, r3]
 8006c4c:	4aa9      	ldr	r2, [pc, #676]	; (8006ef4 <f_write+0x32c>)
 8006c4e:	5a9b      	ldrh	r3, [r3, r2]
 8006c50:	0019      	movs	r1, r3
 8006c52:	f7f9 fae7 	bl	8000224 <__aeabi_uidivmod>
 8006c56:	1e0b      	subs	r3, r1, #0
 8006c58:	d000      	beq.n	8006c5c <f_write+0x94>
 8006c5a:	e15f      	b.n	8006f1c <f_write+0x354>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4aa4      	ldr	r2, [pc, #656]	; (8006ef0 <f_write+0x328>)
 8006c60:	5898      	ldr	r0, [r3, r2]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	2380      	movs	r3, #128	; 0x80
 8006c66:	015b      	lsls	r3, r3, #5
 8006c68:	58d3      	ldr	r3, [r2, r3]
 8006c6a:	4aa2      	ldr	r2, [pc, #648]	; (8006ef4 <f_write+0x32c>)
 8006c6c:	5a9b      	ldrh	r3, [r3, r2]
 8006c6e:	0019      	movs	r1, r3
 8006c70:	f7f9 fa52 	bl	8000118 <__udivsi3>
 8006c74:	0003      	movs	r3, r0
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	68f9      	ldr	r1, [r7, #12]
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	015b      	lsls	r3, r3, #5
 8006c7e:	58cb      	ldr	r3, [r1, r3]
 8006c80:	499d      	ldr	r1, [pc, #628]	; (8006ef8 <f_write+0x330>)
 8006c82:	5c5b      	ldrb	r3, [r3, r1]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b2d9      	uxtb	r1, r3
 8006c88:	2016      	movs	r0, #22
 8006c8a:	183b      	adds	r3, r7, r0
 8006c8c:	400a      	ands	r2, r1
 8006c8e:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 8006c90:	183b      	adds	r3, r7, r0
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d156      	bne.n	8006d46 <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a95      	ldr	r2, [pc, #596]	; (8006ef0 <f_write+0x328>)
 8006c9c:	589b      	ldr	r3, [r3, r2]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d111      	bne.n	8006cc6 <f_write+0xfe>
					clst = fp->sclust;		/* Follow from the origin */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a95      	ldr	r2, [pc, #596]	; (8006efc <f_write+0x334>)
 8006ca6:	589b      	ldr	r3, [r3, r2]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d127      	bne.n	8006d00 <f_write+0x138>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	2380      	movs	r3, #128	; 0x80
 8006cb4:	015b      	lsls	r3, r3, #5
 8006cb6:	58d3      	ldr	r3, [r2, r3]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7fd fc2e 	bl	800451c <create_chain>
 8006cc0:	0003      	movs	r3, r0
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc4:	e01c      	b.n	8006d00 <f_write+0x138>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4a8d      	ldr	r2, [pc, #564]	; (8006f00 <f_write+0x338>)
 8006cca:	589b      	ldr	r3, [r3, r2]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a87      	ldr	r2, [pc, #540]	; (8006ef0 <f_write+0x328>)
 8006cd4:	589a      	ldr	r2, [r3, r2]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	0011      	movs	r1, r2
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f7fd fcd2 	bl	8004684 <clmt_clust>
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce4:	e00c      	b.n	8006d00 <f_write+0x138>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	015b      	lsls	r3, r3, #5
 8006cec:	58d2      	ldr	r2, [r2, r3]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4984      	ldr	r1, [pc, #528]	; (8006f04 <f_write+0x33c>)
 8006cf2:	585b      	ldr	r3, [r3, r1]
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	0010      	movs	r0, r2
 8006cf8:	f7fd fc10 	bl	800451c <create_chain>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d100      	bne.n	8006d08 <f_write+0x140>
 8006d06:	e15e      	b.n	8006fc6 <f_write+0x3fe>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d105      	bne.n	8006d1a <f_write+0x152>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a75      	ldr	r2, [pc, #468]	; (8006ee8 <f_write+0x320>)
 8006d12:	2102      	movs	r1, #2
 8006d14:	5499      	strb	r1, [r3, r2]
 8006d16:	2302      	movs	r3, #2
 8006d18:	e16e      	b.n	8006ff8 <f_write+0x430>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	d105      	bne.n	8006d2c <f_write+0x164>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a71      	ldr	r2, [pc, #452]	; (8006ee8 <f_write+0x320>)
 8006d24:	2101      	movs	r1, #1
 8006d26:	5499      	strb	r1, [r3, r2]
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e165      	b.n	8006ff8 <f_write+0x430>
				fp->clust = clst;			/* Update current cluster */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4975      	ldr	r1, [pc, #468]	; (8006f04 <f_write+0x33c>)
 8006d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d32:	505a      	str	r2, [r3, r1]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a71      	ldr	r2, [pc, #452]	; (8006efc <f_write+0x334>)
 8006d38:	589b      	ldr	r3, [r3, r2]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <f_write+0x17e>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	496e      	ldr	r1, [pc, #440]	; (8006efc <f_write+0x334>)
 8006d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d44:	505a      	str	r2, [r3, r1]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a68      	ldr	r2, [pc, #416]	; (8006eec <f_write+0x324>)
 8006d4a:	5c9b      	ldrb	r3, [r3, r2]
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	2340      	movs	r3, #64	; 0x40
 8006d50:	4013      	ands	r3, r2
 8006d52:	d01d      	beq.n	8006d90 <f_write+0x1c8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	015b      	lsls	r3, r3, #5
 8006d5a:	58d3      	ldr	r3, [r2, r3]
 8006d5c:	4a6a      	ldr	r2, [pc, #424]	; (8006f08 <f_write+0x340>)
 8006d5e:	5c98      	ldrb	r0, [r3, r2]
 8006d60:	68f9      	ldr	r1, [r7, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a69      	ldr	r2, [pc, #420]	; (8006f0c <f_write+0x344>)
 8006d66:	589a      	ldr	r2, [r3, r2]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f7fc fcef 	bl	800374c <disk_write>
 8006d6e:	1e03      	subs	r3, r0, #0
 8006d70:	d005      	beq.n	8006d7e <f_write+0x1b6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a5c      	ldr	r2, [pc, #368]	; (8006ee8 <f_write+0x320>)
 8006d76:	2101      	movs	r1, #1
 8006d78:	5499      	strb	r1, [r3, r2]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e13c      	b.n	8006ff8 <f_write+0x430>
				fp->flag &= ~FA__DIRTY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a5a      	ldr	r2, [pc, #360]	; (8006eec <f_write+0x324>)
 8006d82:	5c9b      	ldrb	r3, [r3, r2]
 8006d84:	2240      	movs	r2, #64	; 0x40
 8006d86:	4393      	bics	r3, r2
 8006d88:	b2d9      	uxtb	r1, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a57      	ldr	r2, [pc, #348]	; (8006eec <f_write+0x324>)
 8006d8e:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	015b      	lsls	r3, r3, #5
 8006d96:	58d2      	ldr	r2, [r2, r3]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	495a      	ldr	r1, [pc, #360]	; (8006f04 <f_write+0x33c>)
 8006d9c:	585b      	ldr	r3, [r3, r1]
 8006d9e:	0019      	movs	r1, r3
 8006da0:	0010      	movs	r0, r2
 8006da2:	f7fd f8bf 	bl	8003f24 <clust2sect>
 8006da6:	0003      	movs	r3, r0
 8006da8:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <f_write+0x1f4>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a4d      	ldr	r2, [pc, #308]	; (8006ee8 <f_write+0x320>)
 8006db4:	2102      	movs	r1, #2
 8006db6:	5499      	strb	r1, [r3, r2]
 8006db8:	2302      	movs	r3, #2
 8006dba:	e11d      	b.n	8006ff8 <f_write+0x430>
			sect += csect;
 8006dbc:	2416      	movs	r4, #22
 8006dbe:	193b      	adds	r3, r7, r4
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	18d3      	adds	r3, r2, r3
 8006dc6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	015b      	lsls	r3, r3, #5
 8006dce:	58d3      	ldr	r3, [r2, r3]
 8006dd0:	4a48      	ldr	r2, [pc, #288]	; (8006ef4 <f_write+0x32c>)
 8006dd2:	5a9b      	ldrh	r3, [r3, r2]
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7f9 f99e 	bl	8000118 <__udivsi3>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d05e      	beq.n	8006ea4 <f_write+0x2dc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006de6:	0020      	movs	r0, r4
 8006de8:	183b      	adds	r3, r7, r0
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	18d3      	adds	r3, r2, r3
 8006df0:	68f9      	ldr	r1, [r7, #12]
 8006df2:	2280      	movs	r2, #128	; 0x80
 8006df4:	0152      	lsls	r2, r2, #5
 8006df6:	588a      	ldr	r2, [r1, r2]
 8006df8:	493f      	ldr	r1, [pc, #252]	; (8006ef8 <f_write+0x330>)
 8006dfa:	5c52      	ldrb	r2, [r2, r1]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d90a      	bls.n	8006e16 <f_write+0x24e>
					cc = fp->fs->csize - csect;
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	2380      	movs	r3, #128	; 0x80
 8006e04:	015b      	lsls	r3, r3, #5
 8006e06:	58d3      	ldr	r3, [r2, r3]
 8006e08:	4a3b      	ldr	r2, [pc, #236]	; (8006ef8 <f_write+0x330>)
 8006e0a:	5c9b      	ldrb	r3, [r3, r2]
 8006e0c:	001a      	movs	r2, r3
 8006e0e:	183b      	adds	r3, r7, r0
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	015b      	lsls	r3, r3, #5
 8006e1c:	58d3      	ldr	r3, [r2, r3]
 8006e1e:	4a3a      	ldr	r2, [pc, #232]	; (8006f08 <f_write+0x340>)
 8006e20:	5c98      	ldrb	r0, [r3, r2]
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	69b9      	ldr	r1, [r7, #24]
 8006e28:	f7fc fc90 	bl	800374c <disk_write>
 8006e2c:	1e03      	subs	r3, r0, #0
 8006e2e:	d005      	beq.n	8006e3c <f_write+0x274>
					ABORT(fp->fs, FR_DISK_ERR);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a2d      	ldr	r2, [pc, #180]	; (8006ee8 <f_write+0x320>)
 8006e34:	2101      	movs	r1, #1
 8006e36:	5499      	strb	r1, [r3, r2]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0dd      	b.n	8006ff8 <f_write+0x430>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a33      	ldr	r2, [pc, #204]	; (8006f0c <f_write+0x344>)
 8006e40:	589a      	ldr	r2, [r3, r2]
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d920      	bls.n	8006e8e <f_write+0x2c6>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4a2e      	ldr	r2, [pc, #184]	; (8006f0c <f_write+0x344>)
 8006e52:	589a      	ldr	r2, [r3, r2]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	2280      	movs	r2, #128	; 0x80
 8006e5c:	0152      	lsls	r2, r2, #5
 8006e5e:	588a      	ldr	r2, [r1, r2]
 8006e60:	4924      	ldr	r1, [pc, #144]	; (8006ef4 <f_write+0x32c>)
 8006e62:	5a52      	ldrh	r2, [r2, r1]
 8006e64:	4353      	muls	r3, r2
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	18d1      	adds	r1, r2, r3
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	015b      	lsls	r3, r3, #5
 8006e70:	58d3      	ldr	r3, [r2, r3]
 8006e72:	4a20      	ldr	r2, [pc, #128]	; (8006ef4 <f_write+0x32c>)
 8006e74:	5a9b      	ldrh	r3, [r3, r2]
 8006e76:	001a      	movs	r2, r3
 8006e78:	f7fc fcb8 	bl	80037ec <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <f_write+0x324>)
 8006e80:	5c9b      	ldrb	r3, [r3, r2]
 8006e82:	2240      	movs	r2, #64	; 0x40
 8006e84:	4393      	bics	r3, r2
 8006e86:	b2d9      	uxtb	r1, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a18      	ldr	r2, [pc, #96]	; (8006eec <f_write+0x324>)
 8006e8c:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	015b      	lsls	r3, r3, #5
 8006e94:	58d3      	ldr	r3, [r2, r3]
 8006e96:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <f_write+0x32c>)
 8006e98:	5a9b      	ldrh	r3, [r3, r2]
 8006e9a:	001a      	movs	r2, r3
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4353      	muls	r3, r2
 8006ea0:	623b      	str	r3, [r7, #32]
				continue;
 8006ea2:	e075      	b.n	8006f90 <f_write+0x3c8>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <f_write+0x344>)
 8006ea8:	589b      	ldr	r3, [r3, r2]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d031      	beq.n	8006f14 <f_write+0x34c>
				if (fp->fptr < fp->fsize &&
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ef0 <f_write+0x328>)
 8006eb4:	589a      	ldr	r2, [r3, r2]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4915      	ldr	r1, [pc, #84]	; (8006f10 <f_write+0x348>)
 8006eba:	585b      	ldr	r3, [r3, r1]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d229      	bcs.n	8006f14 <f_write+0x34c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	015b      	lsls	r3, r3, #5
 8006ec6:	58d3      	ldr	r3, [r2, r3]
 8006ec8:	4a0f      	ldr	r2, [pc, #60]	; (8006f08 <f_write+0x340>)
 8006eca:	5c98      	ldrb	r0, [r3, r2]
 8006ecc:	68f9      	ldr	r1, [r7, #12]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f7fc fc13 	bl	80036fc <disk_read>
 8006ed6:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8006ed8:	d01c      	beq.n	8006f14 <f_write+0x34c>
						ABORT(fp->fs, FR_DISK_ERR);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a02      	ldr	r2, [pc, #8]	; (8006ee8 <f_write+0x320>)
 8006ede:	2101      	movs	r1, #1
 8006ee0:	5499      	strb	r1, [r3, r2]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e088      	b.n	8006ff8 <f_write+0x430>
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	00001007 	.word	0x00001007
 8006eec:	00001006 	.word	0x00001006
 8006ef0:	00001008 	.word	0x00001008
 8006ef4:	0000100a 	.word	0x0000100a
 8006ef8:	00001002 	.word	0x00001002
 8006efc:	00001010 	.word	0x00001010
 8006f00:	00001024 	.word	0x00001024
 8006f04:	00001014 	.word	0x00001014
 8006f08:	00001001 	.word	0x00001001
 8006f0c:	00001018 	.word	0x00001018
 8006f10:	0000100c 	.word	0x0000100c
			}
#endif
			fp->dsect = sect;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	493a      	ldr	r1, [pc, #232]	; (8007000 <f_write+0x438>)
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	505a      	str	r2, [r3, r1]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	2380      	movs	r3, #128	; 0x80
 8006f20:	015b      	lsls	r3, r3, #5
 8006f22:	58d3      	ldr	r3, [r2, r3]
 8006f24:	4a37      	ldr	r2, [pc, #220]	; (8007004 <f_write+0x43c>)
 8006f26:	5a9b      	ldrh	r3, [r3, r2]
 8006f28:	001c      	movs	r4, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4a36      	ldr	r2, [pc, #216]	; (8007008 <f_write+0x440>)
 8006f2e:	5898      	ldr	r0, [r3, r2]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	2380      	movs	r3, #128	; 0x80
 8006f34:	015b      	lsls	r3, r3, #5
 8006f36:	58d3      	ldr	r3, [r2, r3]
 8006f38:	4a32      	ldr	r2, [pc, #200]	; (8007004 <f_write+0x43c>)
 8006f3a:	5a9b      	ldrh	r3, [r3, r2]
 8006f3c:	0019      	movs	r1, r3
 8006f3e:	f7f9 f971 	bl	8000224 <__aeabi_uidivmod>
 8006f42:	000b      	movs	r3, r1
 8006f44:	1ae3      	subs	r3, r4, r3
 8006f46:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006f48:	6a3a      	ldr	r2, [r7, #32]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d901      	bls.n	8006f54 <f_write+0x38c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <f_write+0x440>)
 8006f58:	5898      	ldr	r0, [r3, r2]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	015b      	lsls	r3, r3, #5
 8006f60:	58d3      	ldr	r3, [r2, r3]
 8006f62:	4a28      	ldr	r2, [pc, #160]	; (8007004 <f_write+0x43c>)
 8006f64:	5a9b      	ldrh	r3, [r3, r2]
 8006f66:	0019      	movs	r1, r3
 8006f68:	f7f9 f95c 	bl	8000224 <__aeabi_uidivmod>
 8006f6c:	000b      	movs	r3, r1
 8006f6e:	001a      	movs	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	6a3a      	ldr	r2, [r7, #32]
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7fc fc37 	bl	80037ec <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4a22      	ldr	r2, [pc, #136]	; (800700c <f_write+0x444>)
 8006f82:	5c9b      	ldrb	r3, [r3, r2]
 8006f84:	2240      	movs	r2, #64	; 0x40
 8006f86:	4313      	orrs	r3, r2
 8006f88:	b2d9      	uxtb	r1, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a1f      	ldr	r2, [pc, #124]	; (800700c <f_write+0x444>)
 8006f8e:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	18d3      	adds	r3, r2, r3
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <f_write+0x440>)
 8006f9c:	589a      	ldr	r2, [r3, r2]
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	18d2      	adds	r2, r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4918      	ldr	r1, [pc, #96]	; (8007008 <f_write+0x440>)
 8006fa6:	505a      	str	r2, [r3, r1]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	18d2      	adds	r2, r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d000      	beq.n	8006fc4 <f_write+0x3fc>
 8006fc2:	e63c      	b.n	8006c3e <f_write+0x76>
 8006fc4:	e000      	b.n	8006fc8 <f_write+0x400>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006fc6:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a0f      	ldr	r2, [pc, #60]	; (8007008 <f_write+0x440>)
 8006fcc:	589a      	ldr	r2, [r3, r2]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	490f      	ldr	r1, [pc, #60]	; (8007010 <f_write+0x448>)
 8006fd2:	585b      	ldr	r3, [r3, r1]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d905      	bls.n	8006fe4 <f_write+0x41c>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a0b      	ldr	r2, [pc, #44]	; (8007008 <f_write+0x440>)
 8006fdc:	589a      	ldr	r2, [r3, r2]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	490b      	ldr	r1, [pc, #44]	; (8007010 <f_write+0x448>)
 8006fe2:	505a      	str	r2, [r3, r1]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <f_write+0x444>)
 8006fe8:	5c9b      	ldrb	r3, [r3, r2]
 8006fea:	2220      	movs	r2, #32
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b2d9      	uxtb	r1, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a06      	ldr	r2, [pc, #24]	; (800700c <f_write+0x444>)
 8006ff4:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b00a      	add	sp, #40	; 0x28
 8006ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8007000:	00001018 	.word	0x00001018
 8007004:	0000100a 	.word	0x0000100a
 8007008:	00001008 	.word	0x00001008
 800700c:	00001006 	.word	0x00001006
 8007010:	0000100c 	.word	0x0000100c

08007014 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800701c:	2517      	movs	r5, #23
 800701e:	197c      	adds	r4, r7, r5
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	0018      	movs	r0, r3
 8007024:	f7ff f8d4 	bl	80061d0 <validate>
 8007028:	0003      	movs	r3, r0
 800702a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800702c:	197b      	adds	r3, r7, r5
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d000      	beq.n	8007036 <f_sync+0x22>
 8007034:	e0b2      	b.n	800719c <f_sync+0x188>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a5c      	ldr	r2, [pc, #368]	; (80071ac <f_sync+0x198>)
 800703a:	5c9b      	ldrb	r3, [r3, r2]
 800703c:	001a      	movs	r2, r3
 800703e:	2320      	movs	r3, #32
 8007040:	4013      	ands	r3, r2
 8007042:	d100      	bne.n	8007046 <f_sync+0x32>
 8007044:	e0aa      	b.n	800719c <f_sync+0x188>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a58      	ldr	r2, [pc, #352]	; (80071ac <f_sync+0x198>)
 800704a:	5c9b      	ldrb	r3, [r3, r2]
 800704c:	001a      	movs	r2, r3
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	4013      	ands	r3, r2
 8007052:	d019      	beq.n	8007088 <f_sync+0x74>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	015b      	lsls	r3, r3, #5
 800705a:	58d3      	ldr	r3, [r2, r3]
 800705c:	4a54      	ldr	r2, [pc, #336]	; (80071b0 <f_sync+0x19c>)
 800705e:	5c98      	ldrb	r0, [r3, r2]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a53      	ldr	r2, [pc, #332]	; (80071b4 <f_sync+0x1a0>)
 8007066:	589a      	ldr	r2, [r3, r2]
 8007068:	2301      	movs	r3, #1
 800706a:	f7fc fb6f 	bl	800374c <disk_write>
 800706e:	1e03      	subs	r3, r0, #0
 8007070:	d001      	beq.n	8007076 <f_sync+0x62>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007072:	2301      	movs	r3, #1
 8007074:	e095      	b.n	80071a2 <f_sync+0x18e>
				fp->flag &= ~FA__DIRTY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a4c      	ldr	r2, [pc, #304]	; (80071ac <f_sync+0x198>)
 800707a:	5c9b      	ldrb	r3, [r3, r2]
 800707c:	2240      	movs	r2, #64	; 0x40
 800707e:	4393      	bics	r3, r2
 8007080:	b2d9      	uxtb	r1, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a49      	ldr	r2, [pc, #292]	; (80071ac <f_sync+0x198>)
 8007086:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	015b      	lsls	r3, r3, #5
 800708e:	58d2      	ldr	r2, [r2, r3]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4949      	ldr	r1, [pc, #292]	; (80071b8 <f_sync+0x1a4>)
 8007094:	585b      	ldr	r3, [r3, r1]
 8007096:	2517      	movs	r5, #23
 8007098:	197c      	adds	r4, r7, r5
 800709a:	0019      	movs	r1, r3
 800709c:	0010      	movs	r0, r2
 800709e:	f7fc fe33 	bl	8003d08 <move_window>
 80070a2:	0003      	movs	r3, r0
 80070a4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 80070a6:	002c      	movs	r4, r5
 80070a8:	193b      	adds	r3, r7, r4
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d175      	bne.n	800719c <f_sync+0x188>
				dir = fp->dir_ptr;
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	2381      	movs	r3, #129	; 0x81
 80070b4:	015b      	lsls	r3, r3, #5
 80070b6:	58d3      	ldr	r3, [r2, r3]
 80070b8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	330b      	adds	r3, #11
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	330b      	adds	r3, #11
 80070c4:	2120      	movs	r1, #32
 80070c6:	430a      	orrs	r2, r1
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a3b      	ldr	r2, [pc, #236]	; (80071bc <f_sync+0x1a8>)
 80070d0:	589a      	ldr	r2, [r3, r2]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	331c      	adds	r3, #28
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a37      	ldr	r2, [pc, #220]	; (80071bc <f_sync+0x1a8>)
 80070de:	589b      	ldr	r3, [r3, r2]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	331d      	adds	r3, #29
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a32      	ldr	r2, [pc, #200]	; (80071bc <f_sync+0x1a8>)
 80070f2:	589b      	ldr	r3, [r3, r2]
 80070f4:	0c1a      	lsrs	r2, r3, #16
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	331e      	adds	r3, #30
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2e      	ldr	r2, [pc, #184]	; (80071bc <f_sync+0x1a8>)
 8007102:	589b      	ldr	r3, [r3, r2]
 8007104:	0e1a      	lsrs	r2, r3, #24
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	331f      	adds	r3, #31
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a2b      	ldr	r2, [pc, #172]	; (80071c0 <f_sync+0x1ac>)
 8007112:	589a      	ldr	r2, [r3, r2]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f7fd fd9c 	bl	8004c56 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800711e:	f7fc fa2d 	bl	800357c <get_fattime>
 8007122:	0003      	movs	r3, r0
 8007124:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3316      	adds	r3, #22
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	b29b      	uxth	r3, r3
 8007134:	0a1b      	lsrs	r3, r3, #8
 8007136:	b29a      	uxth	r2, r3
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3317      	adds	r3, #23
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	0c1a      	lsrs	r2, r3, #16
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	3318      	adds	r3, #24
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	0e1a      	lsrs	r2, r3, #24
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	3319      	adds	r3, #25
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	3312      	adds	r3, #18
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	3313      	adds	r3, #19
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a10      	ldr	r2, [pc, #64]	; (80071ac <f_sync+0x198>)
 800716c:	5c9b      	ldrb	r3, [r3, r2]
 800716e:	2220      	movs	r2, #32
 8007170:	4393      	bics	r3, r2
 8007172:	b2d9      	uxtb	r1, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <f_sync+0x198>)
 8007178:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	2380      	movs	r3, #128	; 0x80
 800717e:	015b      	lsls	r3, r3, #5
 8007180:	58d3      	ldr	r3, [r2, r3]
 8007182:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <f_sync+0x1b0>)
 8007184:	2101      	movs	r1, #1
 8007186:	5499      	strb	r1, [r3, r2]
				res = sync_fs(fp->fs);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	2380      	movs	r3, #128	; 0x80
 800718c:	015b      	lsls	r3, r3, #5
 800718e:	58d3      	ldr	r3, [r2, r3]
 8007190:	193c      	adds	r4, r7, r4
 8007192:	0018      	movs	r0, r3
 8007194:	f7fc fdf2 	bl	8003d7c <sync_fs>
 8007198:	0003      	movs	r3, r0
 800719a:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800719c:	2317      	movs	r3, #23
 800719e:	18fb      	adds	r3, r7, r3
 80071a0:	781b      	ldrb	r3, [r3, #0]
}
 80071a2:	0018      	movs	r0, r3
 80071a4:	46bd      	mov	sp, r7
 80071a6:	b006      	add	sp, #24
 80071a8:	bdb0      	pop	{r4, r5, r7, pc}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	00001006 	.word	0x00001006
 80071b0:	00001001 	.word	0x00001001
 80071b4:	00001018 	.word	0x00001018
 80071b8:	0000101c 	.word	0x0000101c
 80071bc:	0000100c 	.word	0x0000100c
 80071c0:	00001010 	.word	0x00001010
 80071c4:	00001004 	.word	0x00001004

080071c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80071c8:	b5b0      	push	{r4, r5, r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80071d0:	250f      	movs	r5, #15
 80071d2:	197c      	adds	r4, r7, r5
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f7ff ff1c 	bl	8007014 <f_sync>
 80071dc:	0003      	movs	r3, r0
 80071de:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 80071e0:	197b      	adds	r3, r7, r5
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d11c      	bne.n	8007222 <f_close+0x5a>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80071e8:	197c      	adds	r4, r7, r5
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f7fe ffef 	bl	80061d0 <validate>
 80071f2:	0003      	movs	r3, r0
 80071f4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80071f6:	197b      	adds	r3, r7, r5
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d111      	bne.n	8007222 <f_close+0x5a>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a0b      	ldr	r2, [pc, #44]	; (8007230 <f_close+0x68>)
 8007202:	589b      	ldr	r3, [r3, r2]
 8007204:	197c      	adds	r4, r7, r5
 8007206:	0018      	movs	r0, r3
 8007208:	f7fc fcac 	bl	8003b64 <dec_lock>
 800720c:	0003      	movs	r3, r0
 800720e:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8007210:	197b      	adds	r3, r7, r5
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <f_close+0x5a>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	015b      	lsls	r3, r3, #5
 800721e:	2100      	movs	r1, #0
 8007220:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007222:	230f      	movs	r3, #15
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	781b      	ldrb	r3, [r3, #0]
}
 8007228:	0018      	movs	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	b004      	add	sp, #16
 800722e:	bdb0      	pop	{r4, r5, r7, pc}
 8007230:	00001028 	.word	0x00001028

08007234 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	1dfb      	adds	r3, r7, #7
 8007240:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8007242:	2417      	movs	r4, #23
 8007244:	193b      	adds	r3, r7, r4
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800724a:	2016      	movs	r0, #22
 800724c:	183b      	adds	r3, r7, r0
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8007252:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 8007254:	7a5b      	ldrb	r3, [r3, #9]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d836      	bhi.n	80072ca <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800725c:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 800725e:	7a5b      	ldrb	r3, [r3, #9]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	001a      	movs	r2, r3
 8007264:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 8007266:	2100      	movs	r1, #0
 8007268:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800726a:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 800726c:	7a5b      	ldrb	r3, [r3, #9]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	18d3      	adds	r3, r2, r3
 8007276:	3304      	adds	r3, #4
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 800727c:	4b16      	ldr	r3, [pc, #88]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 800727e:	7a5b      	ldrb	r3, [r3, #9]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	001a      	movs	r2, r3
 8007284:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 8007286:	189b      	adds	r3, r3, r2
 8007288:	1dfa      	adds	r2, r7, #7
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 8007290:	7a5b      	ldrb	r3, [r3, #9]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	b2d1      	uxtb	r1, r2
 8007298:	4a0f      	ldr	r2, [pc, #60]	; (80072d8 <FATFS_LinkDriverEx+0xa4>)
 800729a:	7251      	strb	r1, [r2, #9]
 800729c:	183a      	adds	r2, r7, r0
 800729e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 80072a0:	183b      	adds	r3, r7, r0
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	3330      	adds	r3, #48	; 0x30
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	3301      	adds	r3, #1
 80072b0:	223a      	movs	r2, #58	; 0x3a
 80072b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3302      	adds	r3, #2
 80072b8:	222f      	movs	r2, #47	; 0x2f
 80072ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	3303      	adds	r3, #3
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072c4:	193b      	adds	r3, r7, r4
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80072ca:	2317      	movs	r3, #23
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	781b      	ldrb	r3, [r3, #0]
}
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b007      	add	sp, #28
 80072d6:	bd90      	pop	{r4, r7, pc}
 80072d8:	20002448 	.word	0x20002448

080072dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	0018      	movs	r0, r3
 80072ee:	f7ff ffa1 	bl	8007234 <FATFS_LinkDriverEx>
 80072f2:	0003      	movs	r3, r0
}
 80072f4:	0018      	movs	r0, r3
 80072f6:	46bd      	mov	sp, r7
 80072f8:	b002      	add	sp, #8
 80072fa:	bd80      	pop	{r7, pc}

080072fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	0002      	movs	r2, r0
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	1dbb      	adds	r3, r7, #6
 8007308:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800730a:	1dbb      	adds	r3, r7, #6
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d805      	bhi.n	800731e <ff_convert+0x22>
		c = chr;
 8007312:	230e      	movs	r3, #14
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	1dba      	adds	r2, r7, #6
 8007318:	8812      	ldrh	r2, [r2, #0]
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e037      	b.n	800738e <ff_convert+0x92>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d010      	beq.n	8007346 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007324:	1dbb      	adds	r3, r7, #6
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	2bff      	cmp	r3, #255	; 0xff
 800732a:	d807      	bhi.n	800733c <ff_convert+0x40>
 800732c:	1dbb      	adds	r3, r7, #6
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	3b80      	subs	r3, #128	; 0x80
 8007332:	001a      	movs	r2, r3
 8007334:	4b19      	ldr	r3, [pc, #100]	; (800739c <ff_convert+0xa0>)
 8007336:	0052      	lsls	r2, r2, #1
 8007338:	5ad2      	ldrh	r2, [r2, r3]
 800733a:	e000      	b.n	800733e <ff_convert+0x42>
 800733c:	2200      	movs	r2, #0
 800733e:	230e      	movs	r3, #14
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	e023      	b.n	800738e <ff_convert+0x92>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007346:	230e      	movs	r3, #14
 8007348:	18fb      	adds	r3, r7, r3
 800734a:	2200      	movs	r2, #0
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e00e      	b.n	800736e <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8007350:	210e      	movs	r1, #14
 8007352:	187b      	adds	r3, r7, r1
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <ff_convert+0xa0>)
 8007358:	0052      	lsls	r2, r2, #1
 800735a:	5ad3      	ldrh	r3, [r2, r3]
 800735c:	1dba      	adds	r2, r7, #6
 800735e:	8812      	ldrh	r2, [r2, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d00a      	beq.n	800737a <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8007364:	187b      	adds	r3, r7, r1
 8007366:	881a      	ldrh	r2, [r3, #0]
 8007368:	187b      	adds	r3, r7, r1
 800736a:	3201      	adds	r2, #1
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	230e      	movs	r3, #14
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2b7f      	cmp	r3, #127	; 0x7f
 8007376:	d9eb      	bls.n	8007350 <ff_convert+0x54>
 8007378:	e000      	b.n	800737c <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800737a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800737c:	210e      	movs	r1, #14
 800737e:	187b      	adds	r3, r7, r1
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	3380      	adds	r3, #128	; 0x80
 8007384:	b29a      	uxth	r2, r3
 8007386:	187b      	adds	r3, r7, r1
 8007388:	21ff      	movs	r1, #255	; 0xff
 800738a:	400a      	ands	r2, r1
 800738c:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800738e:	230e      	movs	r3, #14
 8007390:	18fb      	adds	r3, r7, r3
 8007392:	881b      	ldrh	r3, [r3, #0]
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b004      	add	sp, #16
 800739a:	bd80      	pop	{r7, pc}
 800739c:	0800764c 	.word	0x0800764c

080073a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	0002      	movs	r2, r0
 80073a8:	1dbb      	adds	r3, r7, #6
 80073aa:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e002      	b.n	80073b8 <ff_wtoupper+0x18>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <ff_wtoupper+0x58>)
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	0052      	lsls	r2, r2, #1
 80073be:	5ad3      	ldrh	r3, [r2, r3]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <ff_wtoupper+0x34>
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <ff_wtoupper+0x58>)
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	0052      	lsls	r2, r2, #1
 80073ca:	5ad3      	ldrh	r3, [r2, r3]
 80073cc:	1dba      	adds	r2, r7, #6
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d1ee      	bne.n	80073b2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80073d4:	4b08      	ldr	r3, [pc, #32]	; (80073f8 <ff_wtoupper+0x58>)
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	0052      	lsls	r2, r2, #1
 80073da:	5ad3      	ldrh	r3, [r2, r3]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <ff_wtoupper+0x4a>
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <ff_wtoupper+0x5c>)
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	0052      	lsls	r2, r2, #1
 80073e6:	5ad3      	ldrh	r3, [r2, r3]
 80073e8:	e001      	b.n	80073ee <ff_wtoupper+0x4e>
 80073ea:	1dbb      	adds	r3, r7, #6
 80073ec:	881b      	ldrh	r3, [r3, #0]
}
 80073ee:	0018      	movs	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b004      	add	sp, #16
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	0800774c 	.word	0x0800774c
 80073fc:	0800792c 	.word	0x0800792c

08007400 <__libc_init_array>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	2600      	movs	r6, #0
 8007404:	4d0c      	ldr	r5, [pc, #48]	; (8007438 <__libc_init_array+0x38>)
 8007406:	4c0d      	ldr	r4, [pc, #52]	; (800743c <__libc_init_array+0x3c>)
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	42a6      	cmp	r6, r4
 800740e:	d109      	bne.n	8007424 <__libc_init_array+0x24>
 8007410:	2600      	movs	r6, #0
 8007412:	f000 f821 	bl	8007458 <_init>
 8007416:	4d0a      	ldr	r5, [pc, #40]	; (8007440 <__libc_init_array+0x40>)
 8007418:	4c0a      	ldr	r4, [pc, #40]	; (8007444 <__libc_init_array+0x44>)
 800741a:	1b64      	subs	r4, r4, r5
 800741c:	10a4      	asrs	r4, r4, #2
 800741e:	42a6      	cmp	r6, r4
 8007420:	d105      	bne.n	800742e <__libc_init_array+0x2e>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	00b3      	lsls	r3, r6, #2
 8007426:	58eb      	ldr	r3, [r5, r3]
 8007428:	4798      	blx	r3
 800742a:	3601      	adds	r6, #1
 800742c:	e7ee      	b.n	800740c <__libc_init_array+0xc>
 800742e:	00b3      	lsls	r3, r6, #2
 8007430:	58eb      	ldr	r3, [r5, r3]
 8007432:	4798      	blx	r3
 8007434:	3601      	adds	r6, #1
 8007436:	e7f2      	b.n	800741e <__libc_init_array+0x1e>
 8007438:	08007b0c 	.word	0x08007b0c
 800743c:	08007b0c 	.word	0x08007b0c
 8007440:	08007b0c 	.word	0x08007b0c
 8007444:	08007b10 	.word	0x08007b10

08007448 <memset>:
 8007448:	0003      	movs	r3, r0
 800744a:	1882      	adds	r2, r0, r2
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <memset+0xa>
 8007450:	4770      	bx	lr
 8007452:	7019      	strb	r1, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	e7f9      	b.n	800744c <memset+0x4>

08007458 <_init>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr

08007464 <_fini>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746a:	bc08      	pop	{r3}
 800746c:	469e      	mov	lr, r3
 800746e:	4770      	bx	lr
